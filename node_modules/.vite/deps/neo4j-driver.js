import {
  __commonJS
} from "./chunk-THHHYVWI.js";

// node_modules/neo4j-driver-core/lib/internal/object-util.js
var require_object_util = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/object-util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBrokenObjectReason = exports.isBrokenObject = exports.createBrokenObject = void 0;
    var __isBrokenObject__ = "__isBrokenObject__";
    var __reason__ = "__reason__";
    function createBrokenObject(error, object) {
      if (object === void 0) {
        object = {};
      }
      var fail = function() {
        throw error;
      };
      return new Proxy(object, {
        get: function(_, p) {
          if (p === __isBrokenObject__) {
            return true;
          } else if (p === __reason__) {
            return error;
          } else if (p === "toJSON") {
            return void 0;
          }
          fail();
        },
        set: fail,
        apply: fail,
        construct: fail,
        defineProperty: fail,
        deleteProperty: fail,
        getOwnPropertyDescriptor: fail,
        getPrototypeOf: fail,
        has: fail,
        isExtensible: fail,
        ownKeys: fail,
        preventExtensions: fail,
        setPrototypeOf: fail
      });
    }
    exports.createBrokenObject = createBrokenObject;
    function isBrokenObject(object) {
      return object !== null && typeof object === "object" && object[__isBrokenObject__] === true;
    }
    exports.isBrokenObject = isBrokenObject;
    function getBrokenObjectReason(object) {
      return object[__reason__];
    }
    exports.getBrokenObjectReason = getBrokenObjectReason;
  }
});

// node_modules/neo4j-driver-core/lib/json.js
var require_json = __commonJS({
  "node_modules/neo4j-driver-core/lib/json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringify = void 0;
    var object_util_1 = require_object_util();
    function stringify(val, opts) {
      return JSON.stringify(val, function(_, value) {
        if ((0, object_util_1.isBrokenObject)(value)) {
          return {
            __isBrokenObject__: true,
            __reason__: (0, object_util_1.getBrokenObjectReason)(value)
          };
        }
        if (typeof value === "bigint") {
          return "".concat(value, "n");
        }
        if ((opts === null || opts === void 0 ? void 0 : opts.sortedElements) === true && typeof value === "object" && !Array.isArray(value)) {
          return Object.keys(value).sort().reduce(function(obj, key) {
            obj[key] = value[key];
            return obj;
          }, {});
        }
        if ((opts === null || opts === void 0 ? void 0 : opts.useCustomToString) === true && typeof value === "object" && !Array.isArray(value) && typeof value.toString === "function" && value.toString !== Object.prototype.toString) {
          return value === null || value === void 0 ? void 0 : value.toString();
        }
        return value;
      });
    }
    exports.stringify = stringify;
  }
});

// node_modules/neo4j-driver-core/lib/gql-constants.js
var require_gql_constants = __commonJS({
  "node_modules/neo4j-driver-core/lib/gql-constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rawPolyfilledDiagnosticRecord = void 0;
    exports.rawPolyfilledDiagnosticRecord = {
      OPERATION: "",
      OPERATION_CODE: "0",
      CURRENT_SCHEMA: "/"
    };
    Object.freeze(exports.rawPolyfilledDiagnosticRecord);
  }
});

// node_modules/neo4j-driver-core/lib/error.js
var require_error = __commonJS({
  "node_modules/neo4j-driver-core/lib/error.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROTOCOL_ERROR = exports.SESSION_EXPIRED = exports.SERVICE_UNAVAILABLE = exports.GQLError = exports.Neo4jError = exports.isRetriableError = exports.newGQLError = exports.newError = void 0;
    var json = __importStar(require_json());
    var gql_constants_1 = require_gql_constants();
    var errorClassification = {
      DATABASE_ERROR: "DATABASE_ERROR",
      CLIENT_ERROR: "CLIENT_ERROR",
      TRANSIENT_ERROR: "TRANSIENT_ERROR",
      UNKNOWN: "UNKNOWN"
    };
    Object.freeze(errorClassification);
    var classifications = Object.values(errorClassification);
    var SERVICE_UNAVAILABLE = "ServiceUnavailable";
    exports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;
    var SESSION_EXPIRED = "SessionExpired";
    exports.SESSION_EXPIRED = SESSION_EXPIRED;
    var PROTOCOL_ERROR = "ProtocolError";
    exports.PROTOCOL_ERROR = PROTOCOL_ERROR;
    var NOT_AVAILABLE = "N/A";
    var GQLError = (
      /** @class */
      function(_super) {
        __extends(GQLError2, _super);
        function GQLError2(message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {
          var _this = this;
          var _a;
          _this = _super.call(this, message, cause != null ? { cause } : void 0) || this;
          _this.constructor = GQLError2;
          _this.__proto__ = GQLError2.prototype;
          _this.cause = cause != null ? cause : void 0;
          _this.gqlStatus = gqlStatus;
          _this.gqlStatusDescription = gqlStatusDescription;
          _this.diagnosticRecord = diagnosticRecord;
          _this.classification = _extractClassification(_this.diagnosticRecord);
          _this.rawClassification = (_a = diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification) !== null && _a !== void 0 ? _a : void 0;
          _this.name = "GQLError";
          return _this;
        }
        Object.defineProperty(GQLError2.prototype, "diagnosticRecordAsJsonString", {
          /**
           * The json string representation of the diagnostic record.
           * The goal of this method is provide a serialized object for human inspection.
           *
           * @type {string}
           * @experimental this is part of the preview of GQL-compliant errors
           * @public
           */
          get: function() {
            return json.stringify(this.diagnosticRecord, { useCustomToString: true });
          },
          enumerable: false,
          configurable: true
        });
        return GQLError2;
      }(Error)
    );
    exports.GQLError = GQLError;
    var Neo4jError = (
      /** @class */
      function(_super) {
        __extends(Neo4jError2, _super);
        function Neo4jError2(message, code, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {
          var _this = _super.call(this, message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) || this;
          _this.constructor = Neo4jError2;
          _this.__proto__ = Neo4jError2.prototype;
          _this.code = code;
          _this.name = "Neo4jError";
          _this.retriable = _isRetriableCode(code);
          return _this;
        }
        Neo4jError2.isRetriable = function(error) {
          return error !== null && error !== void 0 && error instanceof Neo4jError2 && error.retriable;
        };
        return Neo4jError2;
      }(GQLError)
    );
    exports.Neo4jError = Neo4jError;
    function newError(message, code, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {
      return new Neo4jError(message, code !== null && code !== void 0 ? code : NOT_AVAILABLE, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : "50N42", gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : "error: general processing exception - unexpected error. " + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);
    }
    exports.newError = newError;
    function newGQLError(message, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {
      return new GQLError(message, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : "50N42", gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : "error: general processing exception - unexpected error. " + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);
    }
    exports.newGQLError = newGQLError;
    var isRetriableError = Neo4jError.isRetriable;
    exports.isRetriableError = isRetriableError;
    function _isRetriableCode(code) {
      return code === SERVICE_UNAVAILABLE || code === SESSION_EXPIRED || _isAuthorizationExpired(code) || _isTransientError(code);
    }
    function _isTransientError(code) {
      return (code === null || code === void 0 ? void 0 : code.includes("TransientError")) === true;
    }
    function _isAuthorizationExpired(code) {
      return code === "Neo.ClientError.Security.AuthorizationExpired";
    }
    function _extractClassification(diagnosticRecord) {
      if (diagnosticRecord === void 0 || diagnosticRecord._classification === void 0) {
        return "UNKNOWN";
      }
      return classifications.includes(diagnosticRecord._classification) ? diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification : "UNKNOWN";
    }
  }
});

// node_modules/neo4j-driver-core/lib/integer.js
var require_integer = __commonJS({
  "node_modules/neo4j-driver-core/lib/integer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = void 0;
    var error_1 = require_error();
    var INT_CACHE = /* @__PURE__ */ new Map();
    var Integer = (
      /** @class */
      function() {
        function Integer2(low, high) {
          this.low = low !== null && low !== void 0 ? low : 0;
          this.high = high !== null && high !== void 0 ? high : 0;
        }
        Integer2.prototype.inSafeRange = function() {
          return this.greaterThanOrEqual(Integer2.MIN_SAFE_VALUE) && this.lessThanOrEqual(Integer2.MAX_SAFE_VALUE);
        };
        Integer2.prototype.toInt = function() {
          return this.low;
        };
        Integer2.prototype.toNumber = function() {
          return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
        };
        Integer2.prototype.toBigInt = function() {
          if (this.isZero()) {
            return BigInt(0);
          } else if (this.isPositive()) {
            return BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low >>> 0);
          } else {
            var negate = this.negate();
            return BigInt(-1) * (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) + BigInt(negate.low >>> 0));
          }
        };
        Integer2.prototype.toNumberOrInfinity = function() {
          if (this.lessThan(Integer2.MIN_SAFE_VALUE)) {
            return Number.NEGATIVE_INFINITY;
          } else if (this.greaterThan(Integer2.MAX_SAFE_VALUE)) {
            return Number.POSITIVE_INFINITY;
          } else {
            return this.toNumber();
          }
        };
        Integer2.prototype.toString = function(radix) {
          radix = radix !== null && radix !== void 0 ? radix : 10;
          if (radix < 2 || radix > 36) {
            throw RangeError("radix out of range: " + radix.toString());
          }
          if (this.isZero()) {
            return "0";
          }
          var rem;
          if (this.isNegative()) {
            if (this.equals(Integer2.MIN_VALUE)) {
              var radixInteger = Integer2.fromNumber(radix);
              var div = this.div(radixInteger);
              rem = div.multiply(radixInteger).subtract(this);
              return div.toString(radix) + rem.toInt().toString(radix);
            } else {
              return "-" + this.negate().toString(radix);
            }
          }
          var radixToPower = Integer2.fromNumber(Math.pow(radix, 6));
          rem = this;
          var result = "";
          while (true) {
            var remDiv = rem.div(radixToPower);
            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
            var digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) {
              return digits + result;
            } else {
              while (digits.length < 6) {
                digits = "0" + digits;
              }
              result = "" + digits + result;
            }
          }
        };
        Integer2.prototype.valueOf = function() {
          return this.toBigInt();
        };
        Integer2.prototype.getHighBits = function() {
          return this.high;
        };
        Integer2.prototype.getLowBits = function() {
          return this.low;
        };
        Integer2.prototype.getNumBitsAbs = function() {
          if (this.isNegative()) {
            return this.equals(Integer2.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
          }
          var val = this.high !== 0 ? this.high : this.low;
          var bit = 0;
          for (bit = 31; bit > 0; bit--) {
            if ((val & 1 << bit) !== 0) {
              break;
            }
          }
          return this.high !== 0 ? bit + 33 : bit + 1;
        };
        Integer2.prototype.isZero = function() {
          return this.high === 0 && this.low === 0;
        };
        Integer2.prototype.isNegative = function() {
          return this.high < 0;
        };
        Integer2.prototype.isPositive = function() {
          return this.high >= 0;
        };
        Integer2.prototype.isOdd = function() {
          return (this.low & 1) === 1;
        };
        Integer2.prototype.isEven = function() {
          return (this.low & 1) === 0;
        };
        Integer2.prototype.equals = function(other) {
          var theOther = Integer2.fromValue(other);
          return this.high === theOther.high && this.low === theOther.low;
        };
        Integer2.prototype.notEquals = function(other) {
          return !this.equals(
            /* validates */
            other
          );
        };
        Integer2.prototype.lessThan = function(other) {
          return this.compare(
            /* validates */
            other
          ) < 0;
        };
        Integer2.prototype.lessThanOrEqual = function(other) {
          return this.compare(
            /* validates */
            other
          ) <= 0;
        };
        Integer2.prototype.greaterThan = function(other) {
          return this.compare(
            /* validates */
            other
          ) > 0;
        };
        Integer2.prototype.greaterThanOrEqual = function(other) {
          return this.compare(
            /* validates */
            other
          ) >= 0;
        };
        Integer2.prototype.compare = function(other) {
          var theOther = Integer2.fromValue(other);
          if (this.equals(theOther)) {
            return 0;
          }
          var thisNeg = this.isNegative();
          var otherNeg = theOther.isNegative();
          if (thisNeg && !otherNeg) {
            return -1;
          }
          if (!thisNeg && otherNeg) {
            return 1;
          }
          return this.subtract(theOther).isNegative() ? -1 : 1;
        };
        Integer2.prototype.negate = function() {
          if (this.equals(Integer2.MIN_VALUE)) {
            return Integer2.MIN_VALUE;
          }
          return this.not().add(Integer2.ONE);
        };
        Integer2.prototype.add = function(addend) {
          var theAddend = Integer2.fromValue(addend);
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = theAddend.high >>> 16;
          var b32 = theAddend.high & 65535;
          var b16 = theAddend.low >>> 16;
          var b00 = theAddend.low & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = 0;
          c00 += a00 + b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 + b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 + b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 + b48;
          c48 &= 65535;
          return Integer2.fromBits(c16 << 16 | c00, c48 << 16 | c32);
        };
        Integer2.prototype.subtract = function(subtrahend) {
          var theSubtrahend = Integer2.fromValue(subtrahend);
          return this.add(theSubtrahend.negate());
        };
        Integer2.prototype.multiply = function(multiplier) {
          if (this.isZero()) {
            return Integer2.ZERO;
          }
          var theMultiplier = Integer2.fromValue(multiplier);
          if (theMultiplier.isZero()) {
            return Integer2.ZERO;
          }
          if (this.equals(Integer2.MIN_VALUE)) {
            return theMultiplier.isOdd() ? Integer2.MIN_VALUE : Integer2.ZERO;
          }
          if (theMultiplier.equals(Integer2.MIN_VALUE)) {
            return this.isOdd() ? Integer2.MIN_VALUE : Integer2.ZERO;
          }
          if (this.isNegative()) {
            if (theMultiplier.isNegative()) {
              return this.negate().multiply(theMultiplier.negate());
            } else {
              return this.negate().multiply(theMultiplier).negate();
            }
          } else if (theMultiplier.isNegative()) {
            return this.multiply(theMultiplier.negate()).negate();
          }
          if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {
            return Integer2.fromNumber(this.toNumber() * theMultiplier.toNumber());
          }
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = theMultiplier.high >>> 16;
          var b32 = theMultiplier.high & 65535;
          var b16 = theMultiplier.low >>> 16;
          var b00 = theMultiplier.low & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = 0;
          c00 += a00 * b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 * b00;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c16 += a00 * b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 * b00;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a16 * b16;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a00 * b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
          c48 &= 65535;
          return Integer2.fromBits(c16 << 16 | c00, c48 << 16 | c32);
        };
        Integer2.prototype.div = function(divisor) {
          var theDivisor = Integer2.fromValue(divisor);
          if (theDivisor.isZero()) {
            throw (0, error_1.newError)("division by zero");
          }
          if (this.isZero()) {
            return Integer2.ZERO;
          }
          var approx, rem, res;
          if (this.equals(Integer2.MIN_VALUE)) {
            if (theDivisor.equals(Integer2.ONE) || theDivisor.equals(Integer2.NEG_ONE)) {
              return Integer2.MIN_VALUE;
            }
            if (theDivisor.equals(Integer2.MIN_VALUE)) {
              return Integer2.ONE;
            } else {
              var halfThis = this.shiftRight(1);
              approx = halfThis.div(theDivisor).shiftLeft(1);
              if (approx.equals(Integer2.ZERO)) {
                return theDivisor.isNegative() ? Integer2.ONE : Integer2.NEG_ONE;
              } else {
                rem = this.subtract(theDivisor.multiply(approx));
                res = approx.add(rem.div(theDivisor));
                return res;
              }
            }
          } else if (theDivisor.equals(Integer2.MIN_VALUE)) {
            return Integer2.ZERO;
          }
          if (this.isNegative()) {
            if (theDivisor.isNegative()) {
              return this.negate().div(theDivisor.negate());
            }
            return this.negate().div(theDivisor).negate();
          } else if (theDivisor.isNegative()) {
            return this.div(theDivisor.negate()).negate();
          }
          res = Integer2.ZERO;
          rem = this;
          while (rem.greaterThanOrEqual(theDivisor)) {
            approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber()));
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            var approxRes = Integer2.fromNumber(approx);
            var approxRem = approxRes.multiply(theDivisor);
            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
              approx -= delta;
              approxRes = Integer2.fromNumber(approx);
              approxRem = approxRes.multiply(theDivisor);
            }
            if (approxRes.isZero()) {
              approxRes = Integer2.ONE;
            }
            res = res.add(approxRes);
            rem = rem.subtract(approxRem);
          }
          return res;
        };
        Integer2.prototype.modulo = function(divisor) {
          var theDivisor = Integer2.fromValue(divisor);
          return this.subtract(this.div(theDivisor).multiply(theDivisor));
        };
        Integer2.prototype.not = function() {
          return Integer2.fromBits(~this.low, ~this.high);
        };
        Integer2.prototype.and = function(other) {
          var theOther = Integer2.fromValue(other);
          return Integer2.fromBits(this.low & theOther.low, this.high & theOther.high);
        };
        Integer2.prototype.or = function(other) {
          var theOther = Integer2.fromValue(other);
          return Integer2.fromBits(this.low | theOther.low, this.high | theOther.high);
        };
        Integer2.prototype.xor = function(other) {
          var theOther = Integer2.fromValue(other);
          return Integer2.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);
        };
        Integer2.prototype.shiftLeft = function(numBits) {
          var bitsCount = Integer2.toNumber(numBits);
          if ((bitsCount &= 63) === 0) {
            return Integer2.ZERO;
          } else if (bitsCount < 32) {
            return Integer2.fromBits(this.low << bitsCount, this.high << bitsCount | this.low >>> 32 - bitsCount);
          } else {
            return Integer2.fromBits(0, this.low << bitsCount - 32);
          }
        };
        Integer2.prototype.shiftRight = function(numBits) {
          var bitsCount = Integer2.toNumber(numBits);
          var numBitNum = Integer2.toNumber(numBits);
          if ((bitsCount &= 63) === 0) {
            return Integer2.ZERO;
          } else if (numBitNum < 32) {
            return Integer2.fromBits(this.low >>> bitsCount | this.high << 32 - bitsCount, this.high >> bitsCount);
          } else {
            return Integer2.fromBits(this.high >> bitsCount - 32, this.high >= 0 ? 0 : -1);
          }
        };
        Integer2.isInteger = function(obj) {
          return (obj === null || obj === void 0 ? void 0 : obj.__isInteger__) === true;
        };
        Integer2.fromInt = function(value) {
          var cachedObj;
          value = value | 0;
          if (value >= -128 && value < 128) {
            cachedObj = INT_CACHE.get(value);
            if (cachedObj != null) {
              return cachedObj;
            }
          }
          var obj = new Integer2(value, value < 0 ? -1 : 0);
          if (value >= -128 && value < 128) {
            INT_CACHE.set(value, obj);
          }
          return obj;
        };
        Integer2.fromBits = function(lowBits, highBits) {
          return new Integer2(lowBits, highBits);
        };
        Integer2.fromNumber = function(value) {
          if (isNaN(value) || !isFinite(value)) {
            return Integer2.ZERO;
          }
          if (value <= -TWO_PWR_63_DBL) {
            return Integer2.MIN_VALUE;
          }
          if (value + 1 >= TWO_PWR_63_DBL) {
            return Integer2.MAX_VALUE;
          }
          if (value < 0) {
            return Integer2.fromNumber(-value).negate();
          }
          return new Integer2(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);
        };
        Integer2.fromString = function(str, radix, _a) {
          var _b = _a === void 0 ? {} : _a, strictStringValidation = _b.strictStringValidation;
          if (str.length === 0) {
            throw (0, error_1.newError)("number format error: empty string");
          }
          if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") {
            return Integer2.ZERO;
          }
          radix = radix !== null && radix !== void 0 ? radix : 10;
          if (radix < 2 || radix > 36) {
            throw (0, error_1.newError)("radix out of range: " + radix.toString());
          }
          var p;
          if ((p = str.indexOf("-")) > 0) {
            throw (0, error_1.newError)('number format error: interior "-" character: ' + str);
          } else if (p === 0) {
            return Integer2.fromString(str.substring(1), radix).negate();
          }
          var radixToPower = Integer2.fromNumber(Math.pow(radix, 8));
          var result = Integer2.ZERO;
          for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i);
            var valueString = str.substring(i, i + size);
            var value = parseInt(valueString, radix);
            if (strictStringValidation === true && !_isValidNumberFromString(valueString, value, radix)) {
              throw (0, error_1.newError)('number format error: "'.concat(valueString, '" is NaN in radix ').concat(radix, ": ").concat(str));
            }
            if (size < 8) {
              var power = Integer2.fromNumber(Math.pow(radix, size));
              result = result.multiply(power).add(Integer2.fromNumber(value));
            } else {
              result = result.multiply(radixToPower);
              result = result.add(Integer2.fromNumber(value));
            }
          }
          return result;
        };
        Integer2.fromValue = function(val, opts) {
          if (opts === void 0) {
            opts = {};
          }
          if (val instanceof Integer2) {
            return val;
          }
          if (typeof val === "number") {
            if (opts.ceilFloat === true) {
              val = Math.ceil(val);
            }
            return Integer2.fromNumber(val);
          }
          if (typeof val === "string") {
            return Integer2.fromString(val, void 0, opts);
          }
          if (typeof val === "bigint") {
            return Integer2.fromString(val.toString());
          }
          return new Integer2(val.low, val.high);
        };
        Integer2.toNumber = function(val) {
          switch (typeof val) {
            case "number":
              return val;
            case "bigint":
              return Number(val);
            default:
              return Integer2.fromValue(val).toNumber();
          }
        };
        Integer2.toString = function(val, radix) {
          return Integer2.fromValue(val).toString(radix);
        };
        Integer2.inSafeRange = function(val) {
          return Integer2.fromValue(val).inSafeRange();
        };
        Integer2.ZERO = Integer2.fromInt(0);
        Integer2.ONE = Integer2.fromInt(1);
        Integer2.NEG_ONE = Integer2.fromInt(-1);
        Integer2.MAX_VALUE = Integer2.fromBits(4294967295 | 0, 2147483647 | 0);
        Integer2.MIN_VALUE = Integer2.fromBits(0, 2147483648 | 0);
        Integer2.MIN_SAFE_VALUE = Integer2.fromBits(1 | 0, 18446744073707454e3 | 0);
        Integer2.MAX_SAFE_VALUE = Integer2.fromBits(4294967295 | 0, 2097151 | 0);
        Integer2.__isInteger__ = true;
        return Integer2;
      }()
    );
    function _convertNumberToString(num, radix, minSize) {
      var theNumberString = num.toString(radix);
      var paddingLength = Math.max(minSize - theNumberString.length, 0);
      var padding = "0".repeat(paddingLength);
      return "".concat(padding).concat(theNumberString);
    }
    function _isValidNumberFromString(theString, theNumber, radix) {
      return !Number.isNaN(theString) && !Number.isNaN(theNumber) && _convertNumberToString(theNumber, radix, theString.length) === theString.toLowerCase();
    }
    Object.defineProperty(Integer.prototype, "__isInteger__", {
      value: true,
      enumerable: false,
      configurable: false
    });
    var TWO_PWR_16_DBL = 1 << 16;
    var TWO_PWR_24_DBL = 1 << 24;
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    var TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);
    var int = Integer.fromValue;
    exports.int = int;
    var isInt = Integer.isInteger;
    exports.isInt = isInt;
    var inSafeRange = Integer.inSafeRange;
    exports.inSafeRange = inSafeRange;
    var toNumber = Integer.toNumber;
    exports.toNumber = toNumber;
    var toString = Integer.toString;
    exports.toString = toString;
    exports.default = Integer;
  }
});

// node_modules/neo4j-driver-core/lib/internal/util.js
var require_util = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/util.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.equals = exports.validateQueryAndParameters = exports.toNumber = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;
    var integer_1 = __importStar(require_integer());
    var json_1 = require_json();
    var ENCRYPTION_ON = "ENCRYPTION_ON";
    exports.ENCRYPTION_ON = ENCRYPTION_ON;
    var ENCRYPTION_OFF = "ENCRYPTION_OFF";
    exports.ENCRYPTION_OFF = ENCRYPTION_OFF;
    function isEmptyObjectOrNull(obj) {
      if (obj === null) {
        return true;
      }
      if (!isObject(obj)) {
        return false;
      }
      for (var prop in obj) {
        if (obj[prop] !== void 0) {
          return false;
        }
      }
      return true;
    }
    exports.isEmptyObjectOrNull = isEmptyObjectOrNull;
    function isObject(obj) {
      return typeof obj === "object" && !Array.isArray(obj) && obj !== null;
    }
    exports.isObject = isObject;
    function validateQueryAndParameters(query, parameters, opt) {
      var _a, _b;
      var validatedQuery = "";
      var params = parameters !== null && parameters !== void 0 ? parameters : {};
      var skipAsserts = (_a = opt === null || opt === void 0 ? void 0 : opt.skipAsserts) !== null && _a !== void 0 ? _a : false;
      if (typeof query === "string") {
        validatedQuery = query;
      } else if (query instanceof String) {
        validatedQuery = query.toString();
      } else if (typeof query === "object" && query.text != null) {
        validatedQuery = query.text;
        params = (_b = query.parameters) !== null && _b !== void 0 ? _b : {};
      }
      if (!skipAsserts) {
        assertCypherQuery(validatedQuery);
        assertQueryParameters(params);
      }
      return { validatedQuery, params };
    }
    exports.validateQueryAndParameters = validateQueryAndParameters;
    function assertObject(obj, objName) {
      if (!isObject(obj)) {
        throw new TypeError(objName + " expected to be an object but was: " + (0, json_1.stringify)(obj));
      }
      return obj;
    }
    exports.assertObject = assertObject;
    function assertString(obj, objName) {
      if (!isString(obj)) {
        throw new TypeError((0, json_1.stringify)(objName) + " expected to be string but was: " + (0, json_1.stringify)(obj));
      }
      return obj;
    }
    exports.assertString = assertString;
    function assertNumber(obj, objName) {
      if (typeof obj !== "number") {
        throw new TypeError(objName + " expected to be a number but was: " + (0, json_1.stringify)(obj));
      }
      return obj;
    }
    exports.assertNumber = assertNumber;
    function assertNumberOrInteger(obj, objName) {
      if (typeof obj !== "number" && typeof obj !== "bigint" && !(0, integer_1.isInt)(obj)) {
        throw new TypeError(objName + " expected to be either a number or an Integer object but was: " + (0, json_1.stringify)(obj));
      }
      return obj;
    }
    exports.assertNumberOrInteger = assertNumberOrInteger;
    function assertValidDate(obj, objName) {
      if (Object.prototype.toString.call(obj) !== "[object Date]") {
        throw new TypeError(objName + " expected to be a standard JavaScript Date but was: " + (0, json_1.stringify)(obj));
      }
      if (Number.isNaN(obj.getTime())) {
        throw new TypeError(objName + " expected to be valid JavaScript Date but its time was NaN: " + (0, json_1.stringify)(obj));
      }
      return obj;
    }
    exports.assertValidDate = assertValidDate;
    function assertCypherQuery(obj) {
      assertString(obj, "Cypher query");
      if (obj.trim().length === 0) {
        throw new TypeError("Cypher query is expected to be a non-empty string.");
      }
    }
    function assertQueryParameters(obj) {
      if (!isObject(obj)) {
        var constructor = obj.constructor != null ? " " + obj.constructor.name : "";
        throw new TypeError("Query parameters are expected to either be undefined/null or an object, given:".concat(constructor, " ").concat(JSON.stringify(obj)));
      }
    }
    function isString(str) {
      return Object.prototype.toString.call(str) === "[object String]";
    }
    exports.isString = isString;
    function equals(a, b) {
      var e_1, _a;
      if (a === b) {
        return true;
      }
      if (a === null || b === null) {
        return false;
      }
      if (typeof a === "object" && typeof b === "object") {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        if (keysA.length !== keysB.length) {
          return false;
        }
        try {
          for (var keysA_1 = __values(keysA), keysA_1_1 = keysA_1.next(); !keysA_1_1.done; keysA_1_1 = keysA_1.next()) {
            var key = keysA_1_1.value;
            if (!equals(a[key], b[key])) {
              return false;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (keysA_1_1 && !keysA_1_1.done && (_a = keysA_1.return)) _a.call(keysA_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return true;
      }
      return false;
    }
    exports.equals = equals;
    function toNumber(value) {
      if (value instanceof integer_1.default) {
        return value.toNumber();
      } else if (typeof value === "bigint") {
        return (0, integer_1.int)(value).toNumber();
      } else {
        return value;
      }
    }
    exports.toNumber = toNumber;
  }
});

// node_modules/neo4j-driver-core/lib/internal/temporal-util.js
var require_temporal_util = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/temporal-util.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;
    var integer_1 = __importStar(require_integer());
    var error_1 = require_error();
    var util_1 = require_util();
    var ValueRange = (
      /** @class */
      function() {
        function ValueRange2(min, max) {
          this._minNumber = min;
          this._maxNumber = max;
          this._minInteger = (0, integer_1.int)(min);
          this._maxInteger = (0, integer_1.int)(max);
        }
        ValueRange2.prototype.contains = function(value) {
          if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {
            return value.greaterThanOrEqual(this._minInteger) && value.lessThanOrEqual(this._maxInteger);
          } else if (typeof value === "bigint") {
            var intValue = (0, integer_1.int)(value);
            return intValue.greaterThanOrEqual(this._minInteger) && intValue.lessThanOrEqual(this._maxInteger);
          } else {
            return value >= this._minNumber && value <= this._maxNumber;
          }
        };
        ValueRange2.prototype.toString = function() {
          return "[".concat(this._minNumber, ", ").concat(this._maxNumber, "]");
        };
        return ValueRange2;
      }()
    );
    exports.YEAR_RANGE = new ValueRange(-999999999, 999999999);
    exports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);
    exports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);
    exports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);
    exports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);
    exports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);
    exports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);
    exports.MINUTES_PER_HOUR = 60;
    exports.SECONDS_PER_MINUTE = 60;
    exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;
    exports.NANOS_PER_SECOND = 1e9;
    exports.NANOS_PER_MILLISECOND = 1e6;
    exports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;
    exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;
    exports.DAYS_0000_TO_1970 = 719528;
    exports.DAYS_PER_400_YEAR_CYCLE = 146097;
    exports.SECONDS_PER_DAY = 86400;
    function normalizeSecondsForDuration(seconds, nanoseconds) {
      return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));
    }
    exports.normalizeSecondsForDuration = normalizeSecondsForDuration;
    function normalizeNanosecondsForDuration(nanoseconds) {
      return floorMod(nanoseconds, exports.NANOS_PER_SECOND);
    }
    exports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;
    function localTimeToNanoOfDay(hour, minute, second, nanosecond) {
      hour = (0, integer_1.int)(hour);
      minute = (0, integer_1.int)(minute);
      second = (0, integer_1.int)(second);
      nanosecond = (0, integer_1.int)(nanosecond);
      var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);
      totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));
      totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));
      return totalNanos.add(nanosecond);
    }
    exports.localTimeToNanoOfDay = localTimeToNanoOfDay;
    function localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {
      var epochDay = dateToEpochDay(year, month, day);
      var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);
      return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);
    }
    exports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;
    function dateToEpochDay(year, month, day) {
      year = (0, integer_1.int)(year);
      month = (0, integer_1.int)(month);
      day = (0, integer_1.int)(day);
      var epochDay = year.multiply(365);
      if (year.greaterThanOrEqual(0)) {
        epochDay = epochDay.add(year.add(3).div(4).subtract(year.add(99).div(100)).add(year.add(399).div(400)));
      } else {
        epochDay = epochDay.subtract(year.div(-4).subtract(year.div(-100)).add(year.div(-400)));
      }
      epochDay = epochDay.add(month.multiply(367).subtract(362).div(12));
      epochDay = epochDay.add(day.subtract(1));
      if (month.greaterThan(2)) {
        epochDay = epochDay.subtract(1);
        if (!isLeapYear(year)) {
          epochDay = epochDay.subtract(1);
        }
      }
      return epochDay.subtract(exports.DAYS_0000_TO_1970);
    }
    exports.dateToEpochDay = dateToEpochDay;
    function durationToIsoString(months, days, seconds, nanoseconds) {
      var monthsString = formatNumber(months);
      var daysString = formatNumber(days);
      var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);
      return "P".concat(monthsString, "M").concat(daysString, "DT").concat(secondsAndNanosecondsString, "S");
    }
    exports.durationToIsoString = durationToIsoString;
    function timeToIsoString(hour, minute, second, nanosecond) {
      var hourString = formatNumber(hour, 2);
      var minuteString = formatNumber(minute, 2);
      var secondString = formatNumber(second, 2);
      var nanosecondString = formatNanosecond(nanosecond);
      return "".concat(hourString, ":").concat(minuteString, ":").concat(secondString).concat(nanosecondString);
    }
    exports.timeToIsoString = timeToIsoString;
    function timeZoneOffsetToIsoString(offsetSeconds) {
      offsetSeconds = (0, integer_1.int)(offsetSeconds);
      if (offsetSeconds.equals(0)) {
        return "Z";
      }
      var isNegative = offsetSeconds.isNegative();
      if (isNegative) {
        offsetSeconds = offsetSeconds.multiply(-1);
      }
      var signPrefix = isNegative ? "-" : "+";
      var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);
      var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);
      var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);
      var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);
      return seconds != null ? "".concat(signPrefix).concat(hours, ":").concat(minutes, ":").concat(seconds) : "".concat(signPrefix).concat(hours, ":").concat(minutes);
    }
    exports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;
    function dateToIsoString(year, month, day) {
      var yearString = formatYear(year);
      var monthString = formatNumber(month, 2);
      var dayString = formatNumber(day, 2);
      return "".concat(yearString, "-").concat(monthString, "-").concat(dayString);
    }
    exports.dateToIsoString = dateToIsoString;
    function isoStringToStandardDate(isoString) {
      return new Date(isoString);
    }
    exports.isoStringToStandardDate = isoStringToStandardDate;
    function toStandardDate(utc) {
      return new Date(utc);
    }
    exports.toStandardDate = toStandardDate;
    function newDate(date) {
      return new Date(date);
    }
    exports.newDate = newDate;
    function totalNanoseconds(standardDate, nanoseconds) {
      nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;
      var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;
      return add(nanoseconds, nanosFromMillis);
    }
    exports.totalNanoseconds = totalNanoseconds;
    function timeZoneOffsetInSeconds(standardDate) {
      var secondsPortion = standardDate.getSeconds() - standardDate.getUTCSeconds();
      var minutesPortion = standardDate.getMinutes() - standardDate.getUTCMinutes();
      var hoursPortion = standardDate.getHours() - standardDate.getUTCHours();
      var daysPortion = _getDayOffset(standardDate);
      return hoursPortion * exports.SECONDS_PER_HOUR + minutesPortion * exports.SECONDS_PER_MINUTE + secondsPortion + daysPortion * exports.SECONDS_PER_DAY;
    }
    exports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;
    function _getDayOffset(standardDate) {
      if (standardDate.getMonth() === standardDate.getUTCMonth()) {
        return standardDate.getDate() - standardDate.getUTCDate();
      } else if (standardDate.getFullYear() > standardDate.getUTCFullYear() || standardDate.getMonth() > standardDate.getUTCMonth() && standardDate.getFullYear() === standardDate.getUTCFullYear()) {
        return standardDate.getDate() + _daysUntilNextMonth(standardDate.getUTCMonth(), standardDate.getUTCFullYear()) - standardDate.getUTCDate();
      } else {
        return standardDate.getDate() - (standardDate.getUTCDate() + _daysUntilNextMonth(standardDate.getMonth(), standardDate.getFullYear()));
      }
    }
    function _daysUntilNextMonth(month, year) {
      if (month === 1) {
        if (year % 400 === 0 || year % 4 === 0 && year % 100 !== 0) {
          return 29;
        } else {
          return 28;
        }
      } else if ([0, 2, 4, 6, 7, 9, 11].includes(month)) {
        return 31;
      } else {
        return 30;
      }
    }
    function assertValidYear(year) {
      return assertValidTemporalValue(year, exports.YEAR_RANGE, "Year");
    }
    exports.assertValidYear = assertValidYear;
    function assertValidMonth(month) {
      return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, "Month");
    }
    exports.assertValidMonth = assertValidMonth;
    function assertValidDay(day) {
      return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, "Day");
    }
    exports.assertValidDay = assertValidDay;
    function assertValidHour(hour) {
      return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, "Hour");
    }
    exports.assertValidHour = assertValidHour;
    function assertValidMinute(minute) {
      return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, "Minute");
    }
    exports.assertValidMinute = assertValidMinute;
    function assertValidSecond(second) {
      return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, "Second");
    }
    exports.assertValidSecond = assertValidSecond;
    function assertValidNanosecond(nanosecond) {
      return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, "Nanosecond");
    }
    exports.assertValidNanosecond = assertValidNanosecond;
    var timeZoneValidityCache = /* @__PURE__ */ new Map();
    var newInvalidZoneIdError = function(zoneId, fieldName) {
      return (0, error_1.newError)("".concat(fieldName, ' is expected to be a valid ZoneId but was: "').concat(zoneId, '"'));
    };
    function assertValidZoneId(fieldName, zoneId) {
      var cachedResult = timeZoneValidityCache.get(zoneId);
      if (cachedResult === true) {
        return;
      }
      if (cachedResult === false) {
        throw newInvalidZoneIdError(zoneId, fieldName);
      }
      try {
        Intl.DateTimeFormat(void 0, { timeZone: zoneId });
        timeZoneValidityCache.set(zoneId, true);
      } catch (e) {
        timeZoneValidityCache.set(zoneId, false);
        throw newInvalidZoneIdError(zoneId, fieldName);
      }
    }
    exports.assertValidZoneId = assertValidZoneId;
    function assertValidTemporalValue(value, range, name) {
      (0, util_1.assertNumberOrInteger)(value, name);
      if (!range.contains(value)) {
        throw (0, error_1.newError)("".concat(name, " is expected to be in range ").concat(range.toString(), " but was: ").concat(value.toString()));
      }
      return value;
    }
    function localTimeToSecondOfDay(hour, minute, second) {
      hour = (0, integer_1.int)(hour);
      minute = (0, integer_1.int)(minute);
      second = (0, integer_1.int)(second);
      var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);
      totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));
      return totalSeconds.add(second);
    }
    function isLeapYear(year) {
      year = (0, integer_1.int)(year);
      if (!year.modulo(4).equals(0)) {
        return false;
      } else if (!year.modulo(100).equals(0)) {
        return true;
      } else if (!year.modulo(400).equals(0)) {
        return false;
      } else {
        return true;
      }
    }
    function floorDiv(x, y) {
      x = (0, integer_1.int)(x);
      y = (0, integer_1.int)(y);
      var result = x.div(y);
      if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {
        result = result.subtract(1);
      }
      return result;
    }
    exports.floorDiv = floorDiv;
    function floorMod(x, y) {
      x = (0, integer_1.int)(x);
      y = (0, integer_1.int)(y);
      return x.subtract(floorDiv(x, y).multiply(y));
    }
    exports.floorMod = floorMod;
    function formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {
      seconds = (0, integer_1.int)(seconds);
      nanoseconds = (0, integer_1.int)(nanoseconds);
      var secondsString;
      var nanosecondsString;
      var secondsNegative = seconds.isNegative();
      var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);
      if (secondsNegative && nanosecondsGreaterThanZero) {
        if (seconds.equals(-1)) {
          secondsString = "-0";
        } else {
          secondsString = seconds.add(1).toString();
        }
      } else {
        secondsString = seconds.toString();
      }
      if (nanosecondsGreaterThanZero) {
        if (secondsNegative) {
          nanosecondsString = formatNanosecond(nanoseconds.negate().add(2 * exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));
        } else {
          nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));
        }
      }
      return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;
    }
    function formatNanosecond(value) {
      value = (0, integer_1.int)(value);
      return value.equals(0) ? "" : "." + formatNumber(value, 9);
    }
    function formatYear(year) {
      var yearInteger = (0, integer_1.int)(year);
      if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {
        return formatNumber(yearInteger, 6, { usePositiveSign: true });
      }
      return formatNumber(yearInteger, 4);
    }
    function formatNumber(num, stringLength, params) {
      num = (0, integer_1.int)(num);
      var isNegative = num.isNegative();
      if (isNegative) {
        num = num.negate();
      }
      var numString = num.toString();
      if (stringLength != null) {
        while (numString.length < stringLength) {
          numString = "0" + numString;
        }
      }
      if (isNegative) {
        return "-" + numString;
      } else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {
        return "+" + numString;
      }
      return numString;
    }
    function add(x, y) {
      if (x instanceof integer_1.default) {
        return x.add(y);
      } else if (typeof x === "bigint") {
        return x + BigInt(y);
      }
      return x + y;
    }
  }
});

// node_modules/neo4j-driver-core/lib/temporal-types.js
var require_temporal_types = __commonJS({
  "node_modules/neo4j-driver-core/lib/temporal-types.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;
    var util = __importStar(require_temporal_util());
    var util_1 = require_util();
    var error_1 = require_error();
    var integer_1 = __importStar(require_integer());
    var IDENTIFIER_PROPERTY_ATTRIBUTES = {
      value: true,
      enumerable: false,
      configurable: false,
      writable: false
    };
    var DURATION_IDENTIFIER_PROPERTY = "__isDuration__";
    var LOCAL_TIME_IDENTIFIER_PROPERTY = "__isLocalTime__";
    var TIME_IDENTIFIER_PROPERTY = "__isTime__";
    var DATE_IDENTIFIER_PROPERTY = "__isDate__";
    var LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = "__isLocalDateTime__";
    var DATE_TIME_IDENTIFIER_PROPERTY = "__isDateTime__";
    var Duration = (
      /** @class */
      function() {
        function Duration2(months, days, seconds, nanoseconds) {
          this.months = (0, util_1.assertNumberOrInteger)(months, "Months");
          this.days = (0, util_1.assertNumberOrInteger)(days, "Days");
          (0, util_1.assertNumberOrInteger)(seconds, "Seconds");
          (0, util_1.assertNumberOrInteger)(nanoseconds, "Nanoseconds");
          this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);
          this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);
          Object.freeze(this);
        }
        Duration2.prototype.toString = function() {
          return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);
        };
        return Duration2;
      }()
    );
    exports.Duration = Duration;
    Object.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isDuration(obj) {
      return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);
    }
    exports.isDuration = isDuration;
    var LocalTime = (
      /** @class */
      function() {
        function LocalTime2(hour, minute, second, nanosecond) {
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          Object.freeze(this);
        }
        LocalTime2.fromStandardDate = function(standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);
          return new LocalTime2(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default ? totalNanoseconds.toInt() : typeof totalNanoseconds === "bigint" ? (0, integer_1.int)(totalNanoseconds).toInt() : totalNanoseconds);
        };
        LocalTime2.prototype.toString = function() {
          return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);
        };
        return LocalTime2;
      }()
    );
    exports.LocalTime = LocalTime;
    Object.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isLocalTime(obj) {
      return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);
    }
    exports.isLocalTime = isLocalTime;
    var Time = (
      /** @class */
      function() {
        function Time2(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, "Time zone offset in seconds");
          Object.freeze(this);
        }
        Time2.fromStandardDate = function(standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          return new Time2(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));
        };
        Time2.prototype.toString = function() {
          return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);
        };
        return Time2;
      }()
    );
    exports.Time = Time;
    Object.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isTime(obj) {
      return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);
    }
    exports.isTime = isTime;
    var Date2 = (
      /** @class */
      function() {
        function Date3(year, month, day) {
          this.year = util.assertValidYear(year);
          this.month = util.assertValidMonth(month);
          this.day = util.assertValidDay(day);
          Object.freeze(this);
        }
        Date3.fromStandardDate = function(standardDate) {
          verifyStandardDateAndNanos(standardDate);
          return new Date3(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());
        };
        Date3.prototype.toStandardDate = function() {
          return util.isoStringToStandardDate(this.toString());
        };
        Date3.prototype.toString = function() {
          return util.dateToIsoString(this.year, this.month, this.day);
        };
        return Date3;
      }()
    );
    exports.Date = Date2;
    Object.defineProperty(Date2.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isDate(obj) {
      return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);
    }
    exports.isDate = isDate;
    var LocalDateTime = (
      /** @class */
      function() {
        function LocalDateTime2(year, month, day, hour, minute, second, nanosecond) {
          this.year = util.assertValidYear(year);
          this.month = util.assertValidMonth(month);
          this.day = util.assertValidDay(day);
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          Object.freeze(this);
        }
        LocalDateTime2.fromStandardDate = function(standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          return new LocalDateTime2(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));
        };
        LocalDateTime2.prototype.toStandardDate = function() {
          return util.isoStringToStandardDate(this.toString());
        };
        LocalDateTime2.prototype.toString = function() {
          return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
        };
        return LocalDateTime2;
      }()
    );
    exports.LocalDateTime = LocalDateTime;
    Object.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isLocalDateTime(obj) {
      return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);
    }
    exports.isLocalDateTime = isLocalDateTime;
    var DateTime = (
      /** @class */
      function() {
        function DateTime2(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {
          this.year = util.assertValidYear(year);
          this.month = util.assertValidMonth(month);
          this.day = util.assertValidDay(day);
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];
          this.timeZoneOffsetSeconds = offset;
          this.timeZoneId = id !== null && id !== void 0 ? id : void 0;
          Object.freeze(this);
        }
        DateTime2.fromStandardDate = function(standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          return new DateTime2(
            standardDate.getFullYear(),
            standardDate.getMonth() + 1,
            standardDate.getDate(),
            standardDate.getHours(),
            standardDate.getMinutes(),
            standardDate.getSeconds(),
            (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)),
            util.timeZoneOffsetInSeconds(standardDate),
            null
            /* no time zone id */
          );
        };
        DateTime2.prototype.toStandardDate = function() {
          return util.toStandardDate(this._toUTC());
        };
        DateTime2.prototype.toString = function() {
          var _a;
          var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
          var timeOffset = this.timeZoneOffsetSeconds != null ? util.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0) : "";
          var timeZoneStr = this.timeZoneId != null ? "[".concat(this.timeZoneId, "]") : "";
          return localDateTimeStr + timeOffset + timeZoneStr;
        };
        DateTime2.prototype._toUTC = function() {
          var _a;
          if (this.timeZoneOffsetSeconds === void 0) {
            throw new Error("Requires DateTime created with time zone offset");
          }
          var epochSecond = util.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
          var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);
          return (0, integer_1.int)(utcSecond).multiply(1e3).add((0, integer_1.int)(this.nanosecond).div(1e6)).toNumber();
        };
        return DateTime2;
      }()
    );
    exports.DateTime = DateTime;
    Object.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isDateTime(obj) {
      return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);
    }
    exports.isDateTime = isDateTime;
    function hasIdentifierProperty(obj, property) {
      return obj != null && obj[property] === true;
    }
    function localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {
      return util.dateToIsoString(year, month, day) + "T" + util.timeToIsoString(hour, minute, second, nanosecond);
    }
    function verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {
      var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== void 0;
      var idDefined = timeZoneId !== null && timeZoneId !== void 0 && timeZoneId !== "";
      if (!offsetDefined && !idDefined) {
        throw (0, error_1.newError)(
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          "Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: ".concat(timeZoneOffsetSeconds, " and id: ").concat(timeZoneId)
        );
      }
      var result = [void 0, void 0];
      if (offsetDefined) {
        (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, "Time zone offset in seconds");
        result[0] = timeZoneOffsetSeconds;
      }
      if (idDefined) {
        (0, util_1.assertString)(timeZoneId, "Time zone ID");
        util.assertValidZoneId("Time zone ID", timeZoneId);
        result[1] = timeZoneId;
      }
      return result;
    }
    function verifyStandardDateAndNanos(standardDate, nanosecond) {
      (0, util_1.assertValidDate)(standardDate, "Standard date");
      if (nanosecond !== null && nanosecond !== void 0) {
        (0, util_1.assertNumberOrInteger)(nanosecond, "Nanosecond");
      }
    }
  }
});

// node_modules/neo4j-driver-core/lib/graph-types.js
var require_graph_types = __commonJS({
  "node_modules/neo4j-driver-core/lib/graph-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPathSegment = exports.PathSegment = exports.isPath = exports.Path = exports.isUnboundRelationship = exports.UnboundRelationship = exports.isRelationship = exports.Relationship = exports.isNode = exports.Node = void 0;
    var json_1 = require_json();
    var IDENTIFIER_PROPERTY_ATTRIBUTES = {
      value: true,
      enumerable: false,
      configurable: false,
      writable: false
    };
    var NODE_IDENTIFIER_PROPERTY = "__isNode__";
    var RELATIONSHIP_IDENTIFIER_PROPERTY = "__isRelationship__";
    var UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY = "__isUnboundRelationship__";
    var PATH_IDENTIFIER_PROPERTY = "__isPath__";
    var PATH_SEGMENT_IDENTIFIER_PROPERTY = "__isPathSegment__";
    function hasIdentifierProperty(obj, property) {
      return obj != null && obj[property] === true;
    }
    var Node = (
      /** @class */
      function() {
        function Node2(identity, labels, properties, elementId) {
          this.identity = identity;
          this.labels = labels;
          this.properties = properties;
          this.elementId = _valueOrGetDefault(elementId, function() {
            return identity.toString();
          });
        }
        Node2.prototype.toString = function() {
          var s = "(" + this.elementId;
          for (var i = 0; i < this.labels.length; i++) {
            s += ":" + this.labels[i];
          }
          var keys = Object.keys(this.properties);
          if (keys.length > 0) {
            s += " {";
            for (var i = 0; i < keys.length; i++) {
              if (i > 0)
                s += ",";
              s += keys[i] + ":" + (0, json_1.stringify)(this.properties[keys[i]]);
            }
            s += "}";
          }
          s += ")";
          return s;
        };
        return Node2;
      }()
    );
    exports.Node = Node;
    Object.defineProperty(Node.prototype, NODE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isNode(obj) {
      return hasIdentifierProperty(obj, NODE_IDENTIFIER_PROPERTY);
    }
    exports.isNode = isNode;
    var Relationship = (
      /** @class */
      function() {
        function Relationship2(identity, start, end, type, properties, elementId, startNodeElementId, endNodeElementId) {
          this.identity = identity;
          this.start = start;
          this.end = end;
          this.type = type;
          this.properties = properties;
          this.elementId = _valueOrGetDefault(elementId, function() {
            return identity.toString();
          });
          this.startNodeElementId = _valueOrGetDefault(startNodeElementId, function() {
            return start.toString();
          });
          this.endNodeElementId = _valueOrGetDefault(endNodeElementId, function() {
            return end.toString();
          });
        }
        Relationship2.prototype.toString = function() {
          var s = "(" + this.startNodeElementId + ")-[:" + this.type;
          var keys = Object.keys(this.properties);
          if (keys.length > 0) {
            s += " {";
            for (var i = 0; i < keys.length; i++) {
              if (i > 0)
                s += ",";
              s += keys[i] + ":" + (0, json_1.stringify)(this.properties[keys[i]]);
            }
            s += "}";
          }
          s += "]->(" + this.endNodeElementId + ")";
          return s;
        };
        return Relationship2;
      }()
    );
    exports.Relationship = Relationship;
    Object.defineProperty(Relationship.prototype, RELATIONSHIP_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isRelationship(obj) {
      return hasIdentifierProperty(obj, RELATIONSHIP_IDENTIFIER_PROPERTY);
    }
    exports.isRelationship = isRelationship;
    var UnboundRelationship = (
      /** @class */
      function() {
        function UnboundRelationship2(identity, type, properties, elementId) {
          this.identity = identity;
          this.type = type;
          this.properties = properties;
          this.elementId = _valueOrGetDefault(elementId, function() {
            return identity.toString();
          });
        }
        UnboundRelationship2.prototype.bind = function(start, end) {
          return new Relationship(this.identity, start, end, this.type, this.properties, this.elementId);
        };
        UnboundRelationship2.prototype.bindTo = function(start, end) {
          return new Relationship(this.identity, start.identity, end.identity, this.type, this.properties, this.elementId, start.elementId, end.elementId);
        };
        UnboundRelationship2.prototype.toString = function() {
          var s = "-[:" + this.type;
          var keys = Object.keys(this.properties);
          if (keys.length > 0) {
            s += " {";
            for (var i = 0; i < keys.length; i++) {
              if (i > 0)
                s += ",";
              s += keys[i] + ":" + (0, json_1.stringify)(this.properties[keys[i]]);
            }
            s += "}";
          }
          s += "]->";
          return s;
        };
        return UnboundRelationship2;
      }()
    );
    exports.UnboundRelationship = UnboundRelationship;
    Object.defineProperty(UnboundRelationship.prototype, UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isUnboundRelationship(obj) {
      return hasIdentifierProperty(obj, UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY);
    }
    exports.isUnboundRelationship = isUnboundRelationship;
    var PathSegment = (
      /** @class */
      /* @__PURE__ */ function() {
        function PathSegment2(start, rel, end) {
          this.start = start;
          this.relationship = rel;
          this.end = end;
        }
        return PathSegment2;
      }()
    );
    exports.PathSegment = PathSegment;
    Object.defineProperty(PathSegment.prototype, PATH_SEGMENT_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isPathSegment(obj) {
      return hasIdentifierProperty(obj, PATH_SEGMENT_IDENTIFIER_PROPERTY);
    }
    exports.isPathSegment = isPathSegment;
    var Path = (
      /** @class */
      /* @__PURE__ */ function() {
        function Path2(start, end, segments) {
          this.start = start;
          this.end = end;
          this.segments = segments;
          this.length = segments.length;
        }
        return Path2;
      }()
    );
    exports.Path = Path;
    Object.defineProperty(Path.prototype, PATH_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
    function isPath(obj) {
      return hasIdentifierProperty(obj, PATH_IDENTIFIER_PROPERTY);
    }
    exports.isPath = isPath;
    function _valueOrGetDefault(value, getDefault) {
      return value === void 0 || value === null ? getDefault() : value;
    }
  }
});

// node_modules/neo4j-driver-core/lib/record.js
var require_record = __commonJS({
  "node_modules/neo4j-driver-core/lib/record.js"(exports) {
    "use strict";
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var error_1 = require_error();
    function generateFieldLookup(keys) {
      var lookup = {};
      keys.forEach(function(name, idx) {
        lookup[name] = idx;
      });
      return lookup;
    }
    var Record = (
      /** @class */
      function() {
        function Record2(keys, fields, fieldLookup) {
          this.keys = keys;
          this.length = keys.length;
          this._fields = fields;
          this._fieldLookup = fieldLookup !== null && fieldLookup !== void 0 ? fieldLookup : generateFieldLookup(keys);
        }
        Record2.prototype.forEach = function(visitor) {
          var e_1, _a;
          try {
            for (var _b = __values(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
              visitor(value, key, this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        };
        Record2.prototype.map = function(visitor) {
          var e_2, _a;
          var resultArray = [];
          try {
            for (var _b = __values(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
              resultArray.push(visitor(value, key, this));
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
          return resultArray;
        };
        Record2.prototype.entries = function() {
          var i;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                i = 0;
                _a.label = 1;
              case 1:
                if (!(i < this.keys.length)) return [3, 4];
                return [4, [this.keys[i], this._fields[i]]];
              case 2:
                _a.sent();
                _a.label = 3;
              case 3:
                i++;
                return [3, 1];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        };
        Record2.prototype.values = function() {
          var i;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                i = 0;
                _a.label = 1;
              case 1:
                if (!(i < this.keys.length)) return [3, 4];
                return [4, this._fields[i]];
              case 2:
                _a.sent();
                _a.label = 3;
              case 3:
                i++;
                return [3, 1];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        };
        Record2.prototype[Symbol.iterator] = function() {
          var i;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                i = 0;
                _a.label = 1;
              case 1:
                if (!(i < this.keys.length)) return [3, 4];
                return [4, this._fields[i]];
              case 2:
                _a.sent();
                _a.label = 3;
              case 3:
                i++;
                return [3, 1];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        };
        Record2.prototype.toObject = function() {
          var e_3, _a;
          var obj = {};
          try {
            for (var _b = __values(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
              obj[key] = value;
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          return obj;
        };
        Record2.prototype.get = function(key) {
          var index;
          if (!(typeof key === "number")) {
            index = this._fieldLookup[key];
            if (index === void 0) {
              throw (0, error_1.newError)("This record has no field with key '".concat(key.toString(), "', available keys are: [") + this.keys.toString() + "].");
            }
          } else {
            index = key;
          }
          if (index > this._fields.length - 1 || index < 0) {
            throw (0, error_1.newError)("This record has no field with index '" + index.toString() + "'. Remember that indexes start at `0`, and make sure your query returns records in the shape you meant it to.");
          }
          return this._fields[index];
        };
        Record2.prototype.has = function(key) {
          if (typeof key === "number") {
            return key >= 0 && key < this._fields.length;
          }
          return this._fieldLookup[key] !== void 0;
        };
        return Record2;
      }()
    );
    exports.default = Record;
  }
});

// node_modules/neo4j-driver-core/lib/spatial-types.js
var require_spatial_types = __commonJS({
  "node_modules/neo4j-driver-core/lib/spatial-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPoint = exports.Point = void 0;
    var util_1 = require_util();
    var POINT_IDENTIFIER_PROPERTY = "__isPoint__";
    var Point = (
      /** @class */
      function() {
        function Point2(srid, x, y, z) {
          this.srid = (0, util_1.assertNumberOrInteger)(srid, "SRID");
          this.x = (0, util_1.assertNumber)(x, "X coordinate");
          this.y = (0, util_1.assertNumber)(y, "Y coordinate");
          this.z = z === null || z === void 0 ? z : (0, util_1.assertNumber)(z, "Z coordinate");
          Object.freeze(this);
        }
        Point2.prototype.toString = function() {
          return this.z != null && !isNaN(this.z) ? "Point{srid=".concat(formatAsFloat(this.srid), ", x=").concat(formatAsFloat(this.x), ", y=").concat(formatAsFloat(this.y), ", z=").concat(formatAsFloat(this.z), "}") : "Point{srid=".concat(formatAsFloat(this.srid), ", x=").concat(formatAsFloat(this.x), ", y=").concat(formatAsFloat(this.y), "}");
        };
        return Point2;
      }()
    );
    exports.Point = Point;
    function formatAsFloat(number) {
      return Number.isInteger(number) ? number.toString() + ".0" : number.toString();
    }
    Object.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {
      value: true,
      enumerable: false,
      configurable: false,
      writable: false
    });
    function isPoint(obj) {
      var anyObj = obj;
      return obj != null && anyObj[POINT_IDENTIFIER_PROPERTY] === true;
    }
    exports.isPoint = isPoint;
  }
});

// node_modules/neo4j-driver-core/lib/internal/observers.js
var require_observers = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/observers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FailedObserver = exports.CompletedObserver = void 0;
    var CompletedObserver = (
      /** @class */
      function() {
        function CompletedObserver2() {
        }
        CompletedObserver2.prototype.subscribe = function(observer) {
          apply(observer, observer.onKeys, []);
          apply(observer, observer.onCompleted, {});
        };
        CompletedObserver2.prototype.cancel = function() {
        };
        CompletedObserver2.prototype.pause = function() {
        };
        CompletedObserver2.prototype.resume = function() {
        };
        CompletedObserver2.prototype.prepareToHandleSingleResponse = function() {
        };
        CompletedObserver2.prototype.markCompleted = function() {
        };
        CompletedObserver2.prototype.onError = function(error) {
          throw new Error("CompletedObserver not supposed to call onError", { cause: error });
        };
        return CompletedObserver2;
      }()
    );
    exports.CompletedObserver = CompletedObserver;
    var FailedObserver = (
      /** @class */
      function() {
        function FailedObserver2(_a) {
          var error = _a.error, onError = _a.onError;
          this._error = error;
          this._beforeError = onError;
          this._observers = [];
          this.onError(error);
        }
        FailedObserver2.prototype.subscribe = function(observer) {
          apply(observer, observer.onError, this._error);
          this._observers.push(observer);
        };
        FailedObserver2.prototype.onError = function(error) {
          apply(this, this._beforeError, error);
          this._observers.forEach(function(o) {
            return apply(o, o.onError, error);
          });
        };
        FailedObserver2.prototype.cancel = function() {
        };
        FailedObserver2.prototype.pause = function() {
        };
        FailedObserver2.prototype.resume = function() {
        };
        FailedObserver2.prototype.markCompleted = function() {
        };
        FailedObserver2.prototype.prepareToHandleSingleResponse = function() {
        };
        return FailedObserver2;
      }()
    );
    exports.FailedObserver = FailedObserver;
    function apply(thisArg, func, param) {
      if (func != null) {
        func.bind(thisArg)(param);
      }
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/bookmarks.js
var require_bookmarks = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/bookmarks.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bookmarks = void 0;
    var util = __importStar(require_util());
    var BOOKMARKS_KEY = "bookmarks";
    var Bookmarks = (
      /** @class */
      function() {
        function Bookmarks2(values) {
          this._values = asStringArray(values);
        }
        Bookmarks2.empty = function() {
          return EMPTY_BOOKMARK;
        };
        Bookmarks2.prototype.isEmpty = function() {
          return this._values.length === 0;
        };
        Bookmarks2.prototype.values = function() {
          return this._values;
        };
        Bookmarks2.prototype[Symbol.iterator] = function() {
          return this._values[Symbol.iterator]();
        };
        Bookmarks2.prototype.asBeginTransactionParameters = function() {
          var _a;
          if (this.isEmpty()) {
            return {};
          }
          return _a = {}, _a[BOOKMARKS_KEY] = this._values, _a;
        };
        return Bookmarks2;
      }()
    );
    exports.Bookmarks = Bookmarks;
    var EMPTY_BOOKMARK = new Bookmarks(null);
    function asStringArray(value) {
      if (value == null || value === "") {
        return [];
      }
      if (util.isString(value)) {
        return [value];
      }
      if (Array.isArray(value)) {
        var result = /* @__PURE__ */ new Set();
        var flattenedValue = flattenArray(value);
        for (var i = 0; i < flattenedValue.length; i++) {
          var element = flattenedValue[i];
          if (element !== void 0 && element !== null) {
            if (!util.isString(element)) {
              throw new TypeError(
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                "Bookmark value should be a string, given: '".concat(element, "'")
              );
            }
            result.add(element);
          }
        }
        return __spreadArray([], __read(result), false);
      }
      throw new TypeError(
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        "Bookmarks should either be a string or a string array, given: '".concat(value, "'")
      );
    }
    function flattenArray(values) {
      return values.reduce(function(dest, value) {
        return Array.isArray(value) ? dest.concat(flattenArray(value)) : dest.concat(value);
      }, []);
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/constants.js
var require_constants = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TELEMETRY_APIS = exports.BOLT_PROTOCOL_V5_8 = exports.BOLT_PROTOCOL_V5_7 = exports.BOLT_PROTOCOL_V5_6 = exports.BOLT_PROTOCOL_V5_5 = exports.BOLT_PROTOCOL_V5_4 = exports.BOLT_PROTOCOL_V5_3 = exports.BOLT_PROTOCOL_V5_2 = exports.BOLT_PROTOCOL_V5_1 = exports.BOLT_PROTOCOL_V5_0 = exports.BOLT_PROTOCOL_V4_4 = exports.BOLT_PROTOCOL_V4_3 = exports.BOLT_PROTOCOL_V4_2 = exports.BOLT_PROTOCOL_V4_1 = exports.BOLT_PROTOCOL_V4_0 = exports.BOLT_PROTOCOL_V3 = exports.BOLT_PROTOCOL_V2 = exports.BOLT_PROTOCOL_V1 = exports.DEFAULT_POOL_MAX_SIZE = exports.DEFAULT_POOL_ACQUISITION_TIMEOUT = exports.DEFAULT_CONNECTION_TIMEOUT_MILLIS = exports.ACCESS_MODE_WRITE = exports.ACCESS_MODE_READ = exports.FETCH_ALL = void 0;
    var FETCH_ALL = -1;
    exports.FETCH_ALL = FETCH_ALL;
    var DEFAULT_POOL_ACQUISITION_TIMEOUT = 60 * 1e3;
    exports.DEFAULT_POOL_ACQUISITION_TIMEOUT = DEFAULT_POOL_ACQUISITION_TIMEOUT;
    var DEFAULT_POOL_MAX_SIZE = 100;
    exports.DEFAULT_POOL_MAX_SIZE = DEFAULT_POOL_MAX_SIZE;
    var DEFAULT_CONNECTION_TIMEOUT_MILLIS = 3e4;
    exports.DEFAULT_CONNECTION_TIMEOUT_MILLIS = DEFAULT_CONNECTION_TIMEOUT_MILLIS;
    var ACCESS_MODE_READ = "READ";
    exports.ACCESS_MODE_READ = ACCESS_MODE_READ;
    var ACCESS_MODE_WRITE = "WRITE";
    exports.ACCESS_MODE_WRITE = ACCESS_MODE_WRITE;
    var BOLT_PROTOCOL_V1 = 1;
    exports.BOLT_PROTOCOL_V1 = BOLT_PROTOCOL_V1;
    var BOLT_PROTOCOL_V2 = 2;
    exports.BOLT_PROTOCOL_V2 = BOLT_PROTOCOL_V2;
    var BOLT_PROTOCOL_V3 = 3;
    exports.BOLT_PROTOCOL_V3 = BOLT_PROTOCOL_V3;
    var BOLT_PROTOCOL_V4_0 = 4;
    exports.BOLT_PROTOCOL_V4_0 = BOLT_PROTOCOL_V4_0;
    var BOLT_PROTOCOL_V4_1 = 4.1;
    exports.BOLT_PROTOCOL_V4_1 = BOLT_PROTOCOL_V4_1;
    var BOLT_PROTOCOL_V4_2 = 4.2;
    exports.BOLT_PROTOCOL_V4_2 = BOLT_PROTOCOL_V4_2;
    var BOLT_PROTOCOL_V4_3 = 4.3;
    exports.BOLT_PROTOCOL_V4_3 = BOLT_PROTOCOL_V4_3;
    var BOLT_PROTOCOL_V4_4 = 4.4;
    exports.BOLT_PROTOCOL_V4_4 = BOLT_PROTOCOL_V4_4;
    var BOLT_PROTOCOL_V5_0 = 5;
    exports.BOLT_PROTOCOL_V5_0 = BOLT_PROTOCOL_V5_0;
    var BOLT_PROTOCOL_V5_1 = 5.1;
    exports.BOLT_PROTOCOL_V5_1 = BOLT_PROTOCOL_V5_1;
    var BOLT_PROTOCOL_V5_2 = 5.2;
    exports.BOLT_PROTOCOL_V5_2 = BOLT_PROTOCOL_V5_2;
    var BOLT_PROTOCOL_V5_3 = 5.3;
    exports.BOLT_PROTOCOL_V5_3 = BOLT_PROTOCOL_V5_3;
    var BOLT_PROTOCOL_V5_4 = 5.4;
    exports.BOLT_PROTOCOL_V5_4 = BOLT_PROTOCOL_V5_4;
    var BOLT_PROTOCOL_V5_5 = 5.5;
    exports.BOLT_PROTOCOL_V5_5 = BOLT_PROTOCOL_V5_5;
    var BOLT_PROTOCOL_V5_6 = 5.6;
    exports.BOLT_PROTOCOL_V5_6 = BOLT_PROTOCOL_V5_6;
    var BOLT_PROTOCOL_V5_7 = 5.7;
    exports.BOLT_PROTOCOL_V5_7 = BOLT_PROTOCOL_V5_7;
    var BOLT_PROTOCOL_V5_8 = 5.8;
    exports.BOLT_PROTOCOL_V5_8 = BOLT_PROTOCOL_V5_8;
    var TELEMETRY_APIS = {
      MANAGED_TRANSACTION: 0,
      UNMANAGED_TRANSACTION: 1,
      AUTO_COMMIT_TRANSACTION: 2,
      EXECUTE_QUERY: 3
    };
    exports.TELEMETRY_APIS = TELEMETRY_APIS;
  }
});

// node_modules/neo4j-driver-core/lib/internal/logger.js
var require_logger = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/logger.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var error_1 = require_error();
    var ERROR = "error";
    var WARN = "warn";
    var INFO = "info";
    var DEBUG = "debug";
    var DEFAULT_LEVEL = INFO;
    var levels = (_a = {}, _a[ERROR] = 0, _a[WARN] = 1, _a[INFO] = 2, _a[DEBUG] = 3, _a);
    var Logger = (
      /** @class */
      function() {
        function Logger2(level, loggerFunction) {
          this._level = level;
          this._loggerFunction = loggerFunction;
        }
        Logger2.create = function(driverConfig) {
          if ((driverConfig === null || driverConfig === void 0 ? void 0 : driverConfig.logging) != null) {
            var loggingConfig = driverConfig.logging;
            var level = extractConfiguredLevel(loggingConfig);
            var loggerFunction = extractConfiguredLogger(loggingConfig);
            return new Logger2(level, loggerFunction);
          }
          return this.noOp();
        };
        Logger2.noOp = function() {
          return noOpLogger;
        };
        Logger2.prototype.isErrorEnabled = function() {
          return isLevelEnabled(this._level, ERROR);
        };
        Logger2.prototype.error = function(message) {
          if (this.isErrorEnabled()) {
            this._loggerFunction(ERROR, message);
          }
        };
        Logger2.prototype.isWarnEnabled = function() {
          return isLevelEnabled(this._level, WARN);
        };
        Logger2.prototype.warn = function(message) {
          if (this.isWarnEnabled()) {
            this._loggerFunction(WARN, message);
          }
        };
        Logger2.prototype.isInfoEnabled = function() {
          return isLevelEnabled(this._level, INFO);
        };
        Logger2.prototype.info = function(message) {
          if (this.isInfoEnabled()) {
            this._loggerFunction(INFO, message);
          }
        };
        Logger2.prototype.isDebugEnabled = function() {
          return isLevelEnabled(this._level, DEBUG);
        };
        Logger2.prototype.debug = function(message) {
          if (this.isDebugEnabled()) {
            this._loggerFunction(DEBUG, message);
          }
        };
        return Logger2;
      }()
    );
    exports.Logger = Logger;
    var NoOpLogger = (
      /** @class */
      function(_super) {
        __extends(NoOpLogger2, _super);
        function NoOpLogger2() {
          return _super.call(this, INFO, function(level, message) {
          }) || this;
        }
        NoOpLogger2.prototype.isErrorEnabled = function() {
          return false;
        };
        NoOpLogger2.prototype.error = function(message) {
        };
        NoOpLogger2.prototype.isWarnEnabled = function() {
          return false;
        };
        NoOpLogger2.prototype.warn = function(message) {
        };
        NoOpLogger2.prototype.isInfoEnabled = function() {
          return false;
        };
        NoOpLogger2.prototype.info = function(message) {
        };
        NoOpLogger2.prototype.isDebugEnabled = function() {
          return false;
        };
        NoOpLogger2.prototype.debug = function(message) {
        };
        return NoOpLogger2;
      }(Logger)
    );
    var noOpLogger = new NoOpLogger();
    function isLevelEnabled(configuredLevel, targetLevel) {
      return levels[configuredLevel] >= levels[targetLevel];
    }
    function extractConfiguredLevel(loggingConfig) {
      if ((loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.level) != null) {
        var configuredLevel = loggingConfig.level;
        var value = levels[configuredLevel];
        if (value == null && value !== 0) {
          throw (0, error_1.newError)("Illegal logging level: ".concat(configuredLevel, ". Supported levels are: ").concat(Object.keys(levels).toString()));
        }
        return configuredLevel;
      }
      return DEFAULT_LEVEL;
    }
    function extractConfiguredLogger(loggingConfig) {
      var _a2, _b;
      if ((loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.logger) != null) {
        var configuredLogger = loggingConfig.logger;
        if (configuredLogger != null && typeof configuredLogger === "function") {
          return configuredLogger;
        }
      }
      throw (0, error_1.newError)("Illegal logger function: ".concat((_b = (_a2 = loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.logger) === null || _a2 === void 0 ? void 0 : _a2.toString()) !== null && _b !== void 0 ? _b : "undefined"));
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/connection-holder.js
var require_connection_holder = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/connection-holder.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;
    var error_1 = require_error();
    var util_1 = require_util();
    var constants_1 = require_constants();
    var bookmarks_1 = require_bookmarks();
    var logger_1 = require_logger();
    var ConnectionHolder = (
      /** @class */
      function() {
        function ConnectionHolder2(_a) {
          var mode = _a.mode, _b = _a.database, database = _b === void 0 ? "" : _b, bookmarks = _a.bookmarks, connectionProvider = _a.connectionProvider, impersonatedUser = _a.impersonatedUser, onDatabaseNameResolved = _a.onDatabaseNameResolved, getConnectionAcquistionBookmarks = _a.getConnectionAcquistionBookmarks, auth = _a.auth, log = _a.log;
          this._mode = mode !== null && mode !== void 0 ? mode : constants_1.ACCESS_MODE_WRITE;
          this._closed = false;
          this._database = database != null ? (0, util_1.assertString)(database, "database") : "";
          this._bookmarks = bookmarks !== null && bookmarks !== void 0 ? bookmarks : bookmarks_1.Bookmarks.empty();
          this._connectionProvider = connectionProvider;
          this._impersonatedUser = impersonatedUser;
          this._referenceCount = 0;
          this._connectionPromise = Promise.resolve(null);
          this._onDatabaseNameResolved = onDatabaseNameResolved;
          this._auth = auth;
          this._log = log;
          this._logError = this._logError.bind(this);
          this._getConnectionAcquistionBookmarks = getConnectionAcquistionBookmarks !== null && getConnectionAcquistionBookmarks !== void 0 ? getConnectionAcquistionBookmarks : function() {
            return Promise.resolve(bookmarks_1.Bookmarks.empty());
          };
        }
        ConnectionHolder2.prototype.mode = function() {
          return this._mode;
        };
        ConnectionHolder2.prototype.database = function() {
          return this._database;
        };
        ConnectionHolder2.prototype.setDatabase = function(database) {
          this._database = database;
        };
        ConnectionHolder2.prototype.bookmarks = function() {
          return this._bookmarks;
        };
        ConnectionHolder2.prototype.connectionProvider = function() {
          return this._connectionProvider;
        };
        ConnectionHolder2.prototype.referenceCount = function() {
          return this._referenceCount;
        };
        ConnectionHolder2.prototype.initializeConnection = function(homeDatabase) {
          if (this._referenceCount === 0 && this._connectionProvider != null) {
            this._connectionPromise = this._createConnectionPromise(this._connectionProvider, homeDatabase);
          } else {
            this._referenceCount++;
            return false;
          }
          this._referenceCount++;
          return true;
        };
        ConnectionHolder2.prototype._createConnectionPromise = function(connectionProvider, homeDatabase) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, _b;
            var _c;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  _b = (_a = connectionProvider).acquireConnection;
                  _c = {
                    accessMode: this._mode,
                    database: this._database
                  };
                  return [4, this._getBookmarks()];
                case 1:
                  return [4, _b.apply(_a, [(_c.bookmarks = _d.sent(), _c.impersonatedUser = this._impersonatedUser, _c.onDatabaseNameResolved = this._onDatabaseNameResolved, _c.auth = this._auth, _c.homeDb = homeDatabase, _c)])];
                case 2:
                  return [2, _d.sent()];
              }
            });
          });
        };
        ConnectionHolder2.prototype._getBookmarks = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._getConnectionAcquistionBookmarks()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        ConnectionHolder2.prototype.getConnection = function() {
          return this._connectionPromise;
        };
        ConnectionHolder2.prototype.releaseConnection = function() {
          if (this._referenceCount === 0) {
            return this._connectionPromise;
          }
          this._referenceCount--;
          if (this._referenceCount === 0) {
            return this._releaseConnection();
          }
          return this._connectionPromise;
        };
        ConnectionHolder2.prototype.close = function(hasTx) {
          this._closed = true;
          if (this._referenceCount === 0) {
            return this._connectionPromise;
          }
          this._referenceCount = 0;
          return this._releaseConnection(hasTx);
        };
        ConnectionHolder2.prototype.log = function() {
          return this._log;
        };
        ConnectionHolder2.prototype._releaseConnection = function(hasTx) {
          this._connectionPromise = this._connectionPromise.then(function(connection) {
            if (connection != null) {
              if (connection.isOpen() && (connection.hasOngoingObservableRequests() || hasTx === true)) {
                return connection.resetAndFlush().catch(ignoreError).then(function() {
                  return connection.release().then(function() {
                    return null;
                  });
                });
              }
              return connection.release().then(function() {
                return null;
              });
            } else {
              return Promise.resolve(null);
            }
          }).catch(this._logError);
          return this._connectionPromise;
        };
        ConnectionHolder2.prototype._logError = function(error) {
          if (this._log.isWarnEnabled()) {
            this._log.warn("ConnectionHolder got an error while releasing the connection. Error ".concat(error, ". Stacktrace: ").concat(error.stack));
          }
          return null;
        };
        return ConnectionHolder2;
      }()
    );
    exports.ConnectionHolder = ConnectionHolder;
    var ReadOnlyConnectionHolder = (
      /** @class */
      function(_super) {
        __extends(ReadOnlyConnectionHolder2, _super);
        function ReadOnlyConnectionHolder2(connectionHolder) {
          var _this = _super.call(this, {
            mode: connectionHolder.mode(),
            database: connectionHolder.database(),
            bookmarks: connectionHolder.bookmarks(),
            // @ts-expect-error
            getConnectionAcquistionBookmarks: connectionHolder._getConnectionAcquistionBookmarks,
            connectionProvider: connectionHolder.connectionProvider(),
            log: connectionHolder.log()
          }) || this;
          _this._connectionHolder = connectionHolder;
          return _this;
        }
        ReadOnlyConnectionHolder2.prototype.initializeConnection = function() {
          if (this._connectionHolder.referenceCount() === 0) {
            return false;
          }
          return true;
        };
        ReadOnlyConnectionHolder2.prototype.getConnection = function() {
          return this._connectionHolder.getConnection();
        };
        ReadOnlyConnectionHolder2.prototype.releaseConnection = function() {
          return this._connectionHolder.getConnection().catch(function() {
            return Promise.resolve(null);
          });
        };
        ReadOnlyConnectionHolder2.prototype.close = function() {
          return this._connectionHolder.getConnection().catch(function() {
            return Promise.resolve(null);
          });
        };
        return ReadOnlyConnectionHolder2;
      }(ConnectionHolder)
    );
    exports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;
    exports.default = ReadOnlyConnectionHolder;
    var EmptyConnectionHolder = (
      /** @class */
      function(_super) {
        __extends(EmptyConnectionHolder2, _super);
        function EmptyConnectionHolder2() {
          return _super.call(this, {
            // Empty logger
            log: logger_1.Logger.create({})
          }) || this;
        }
        EmptyConnectionHolder2.prototype.mode = function() {
          return void 0;
        };
        EmptyConnectionHolder2.prototype.database = function() {
          return void 0;
        };
        EmptyConnectionHolder2.prototype.initializeConnection = function() {
          return true;
        };
        EmptyConnectionHolder2.prototype.getConnection = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, Promise.reject((0, error_1.newError)("This connection holder does not serve connections"))];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        EmptyConnectionHolder2.prototype.releaseConnection = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, Promise.resolve(null)];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        EmptyConnectionHolder2.prototype.close = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, Promise.resolve(null)];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        return EmptyConnectionHolder2;
      }(ConnectionHolder)
    );
    var EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();
    exports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;
    function ignoreError(error) {
      return null;
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/tx-config.js
var require_tx_config = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/tx-config.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TxConfig = void 0;
    var util = __importStar(require_util());
    var error_1 = require_error();
    var integer_1 = require_integer();
    var TxConfig = (
      /** @class */
      function() {
        function TxConfig2(config, log) {
          assertValidConfig(config);
          this.timeout = extractTimeout(config, log);
          this.metadata = extractMetadata(config);
        }
        TxConfig2.empty = function() {
          return EMPTY_CONFIG;
        };
        TxConfig2.prototype.isEmpty = function() {
          return Object.values(this).every(function(value) {
            return value == null;
          });
        };
        return TxConfig2;
      }()
    );
    exports.TxConfig = TxConfig;
    var EMPTY_CONFIG = new TxConfig({});
    function extractTimeout(config, log) {
      if (util.isObject(config) && config.timeout != null) {
        util.assertNumberOrInteger(config.timeout, "Transaction timeout");
        if (isTimeoutFloat(config) && (log === null || log === void 0 ? void 0 : log.isInfoEnabled()) === true) {
          log === null || log === void 0 ? void 0 : log.info("Transaction timeout expected to be an integer, got: ".concat(config.timeout, ". The value will be rounded up."));
        }
        var timeout = (0, integer_1.int)(config.timeout, { ceilFloat: true });
        if (timeout.isNegative()) {
          throw (0, error_1.newError)("Transaction timeout should not be negative");
        }
        return timeout;
      }
      return null;
    }
    function isTimeoutFloat(config) {
      return typeof config.timeout === "number" && !Number.isInteger(config.timeout);
    }
    function extractMetadata(config) {
      if (util.isObject(config) && config.metadata != null) {
        var metadata = config.metadata;
        util.assertObject(metadata, "config.metadata");
        if (Object.keys(metadata).length !== 0) {
          return metadata;
        }
      }
      return null;
    }
    function assertValidConfig(config) {
      if (config != null) {
        util.assertObject(config, "Transaction config");
      }
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/transaction-executor.js
var require_transaction_executor = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/transaction-executor.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionExecutor = void 0;
    var error_1 = require_error();
    var constants_1 = require_constants();
    var DEFAULT_MAX_RETRY_TIME_MS = 30 * 1e3;
    var DEFAULT_INITIAL_RETRY_DELAY_MS = 1e3;
    var DEFAULT_RETRY_DELAY_MULTIPLIER = 2;
    var DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;
    function setTimeoutWrapper(callback, ms) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      return setTimeout.apply(void 0, __spreadArray([callback, ms], __read(args), false));
    }
    function clearTimeoutWrapper(timeoutId) {
      return clearTimeout(timeoutId);
    }
    var TransactionExecutor = (
      /** @class */
      function() {
        function TransactionExecutor2(maxRetryTimeMs, initialRetryDelayMs, multiplier, jitterFactor, dependencies) {
          if (dependencies === void 0) {
            dependencies = {
              setTimeout: setTimeoutWrapper,
              clearTimeout: clearTimeoutWrapper
            };
          }
          this._maxRetryTimeMs = _valueOrDefault(maxRetryTimeMs, DEFAULT_MAX_RETRY_TIME_MS);
          this._initialRetryDelayMs = _valueOrDefault(initialRetryDelayMs, DEFAULT_INITIAL_RETRY_DELAY_MS);
          this._multiplier = _valueOrDefault(multiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);
          this._jitterFactor = _valueOrDefault(jitterFactor, DEFAULT_RETRY_DELAY_JITTER_FACTOR);
          this._setTimeout = dependencies.setTimeout;
          this._clearTimeout = dependencies.clearTimeout;
          this._inFlightTimeoutIds = [];
          this.pipelineBegin = false;
          this.telemetryApi = constants_1.TELEMETRY_APIS.MANAGED_TRANSACTION;
          this._verifyAfterConstruction();
        }
        TransactionExecutor2.prototype.execute = function(transactionCreator, transactionWork, transactionWrapper) {
          var _this = this;
          var context = {
            apiTransactionConfig: {
              api: this.telemetryApi,
              onTelemetrySuccess: function() {
                context.apiTransactionConfig = void 0;
              }
            }
          };
          return new Promise(function(resolve, reject) {
            _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject, transactionWrapper, context).catch(reject);
          }).catch(function(error) {
            var retryStartTimeMs = Date.now();
            var retryDelayMs = _this._initialRetryDelayMs;
            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTimeMs, retryDelayMs, transactionWrapper, context);
          });
        };
        TransactionExecutor2.prototype.close = function() {
          var _this = this;
          this._inFlightTimeoutIds.forEach(function(timeoutId) {
            return _this._clearTimeout(timeoutId);
          });
          this._inFlightTimeoutIds = [];
        };
        TransactionExecutor2.prototype._retryTransactionPromise = function(transactionCreator, transactionWork, error, retryStartTime, retryDelayMs, transactionWrapper, executionContext) {
          var _this = this;
          var elapsedTimeMs = Date.now() - retryStartTime;
          if (elapsedTimeMs > this._maxRetryTimeMs || !(0, error_1.isRetriableError)(error)) {
            return Promise.reject(error);
          }
          return new Promise(function(resolve, reject) {
            var nextRetryTime = _this._computeDelayWithJitter(retryDelayMs);
            var timeoutId = _this._setTimeout(function() {
              _this._inFlightTimeoutIds = _this._inFlightTimeoutIds.filter(function(id) {
                return id !== timeoutId;
              });
              _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject, transactionWrapper, executionContext).catch(reject);
            }, nextRetryTime);
            _this._inFlightTimeoutIds.push(timeoutId);
          }).catch(function(error2) {
            var nextRetryDelayMs = retryDelayMs * _this._multiplier;
            return _this._retryTransactionPromise(transactionCreator, transactionWork, error2, retryStartTime, nextRetryDelayMs, transactionWrapper, executionContext);
          });
        };
        TransactionExecutor2.prototype._executeTransactionInsidePromise = function(transactionCreator, transactionWork, resolve, reject, transactionWrapper, executionContext) {
          return __awaiter(this, void 0, void 0, function() {
            var tx, txPromise, _a, error_2, wrap, wrappedTx, resultPromise;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _b.trys.push([0, 4, , 5]);
                  txPromise = transactionCreator((executionContext === null || executionContext === void 0 ? void 0 : executionContext.apiTransactionConfig) != null ? __assign({}, executionContext === null || executionContext === void 0 ? void 0 : executionContext.apiTransactionConfig) : void 0);
                  if (!this.pipelineBegin) return [3, 1];
                  _a = txPromise;
                  return [3, 3];
                case 1:
                  return [4, txPromise];
                case 2:
                  _a = _b.sent();
                  _b.label = 3;
                case 3:
                  tx = _a;
                  return [3, 5];
                case 4:
                  error_2 = _b.sent();
                  reject(error_2);
                  return [
                    2
                    /*return*/
                  ];
                case 5:
                  wrap = transactionWrapper !== null && transactionWrapper !== void 0 ? transactionWrapper : function(tx2) {
                    return tx2;
                  };
                  wrappedTx = wrap(tx);
                  resultPromise = this._safeExecuteTransactionWork(wrappedTx, transactionWork);
                  resultPromise.then(function(result) {
                    return _this._handleTransactionWorkSuccess(result, tx, resolve, reject);
                  }).catch(function(error) {
                    return _this._handleTransactionWorkFailure(error, tx, reject);
                  });
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        TransactionExecutor2.prototype._safeExecuteTransactionWork = function(tx, transactionWork) {
          try {
            var result = transactionWork(tx);
            return Promise.resolve(result);
          } catch (error) {
            return Promise.reject(error);
          }
        };
        TransactionExecutor2.prototype._handleTransactionWorkSuccess = function(result, tx, resolve, reject) {
          if (tx.isOpen()) {
            tx.commit().then(function() {
              resolve(result);
            }).catch(function(error) {
              reject(error);
            });
          } else {
            resolve(result);
          }
        };
        TransactionExecutor2.prototype._handleTransactionWorkFailure = function(error, tx, reject) {
          if (tx.isOpen()) {
            tx.rollback().catch(function(ignore) {
            }).then(function() {
              return reject(error);
            }).catch(reject);
          } else {
            reject(error);
          }
        };
        TransactionExecutor2.prototype._computeDelayWithJitter = function(delayMs) {
          var jitter = delayMs * this._jitterFactor;
          var min = delayMs - jitter;
          var max = delayMs + jitter;
          return Math.random() * (max - min) + min;
        };
        TransactionExecutor2.prototype._verifyAfterConstruction = function() {
          if (this._maxRetryTimeMs < 0) {
            throw (0, error_1.newError)("Max retry time should be >= 0: " + this._maxRetryTimeMs.toString());
          }
          if (this._initialRetryDelayMs < 0) {
            throw (0, error_1.newError)("Initial retry delay should >= 0: " + this._initialRetryDelayMs.toString());
          }
          if (this._multiplier < 1) {
            throw (0, error_1.newError)("Multiplier should be >= 1.0: " + this._multiplier.toString());
          }
          if (this._jitterFactor < 0 || this._jitterFactor > 1) {
            throw (0, error_1.newError)("Jitter factor should be in [0.0, 1.0]: " + this._jitterFactor.toFixed());
          }
        };
        return TransactionExecutor2;
      }()
    );
    exports.TransactionExecutor = TransactionExecutor;
    function _valueOrDefault(value, defaultValue) {
      if (value != null) {
        return value;
      }
      return defaultValue;
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/url-util.js
var require_url_util = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/url-util.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Url = exports.formatIPv6Address = exports.formatIPv4Address = exports.defaultPortForScheme = exports.parseDatabaseUrl = void 0;
    var util_1 = require_util();
    var DEFAULT_BOLT_PORT = 7687;
    var DEFAULT_HTTP_PORT = 7474;
    var DEFAULT_HTTPS_PORT = 7473;
    var Url = (
      /** @class */
      /* @__PURE__ */ function() {
        function Url2(scheme, host, port, hostAndPort, query) {
          this.scheme = scheme;
          this.host = host;
          this.port = port;
          this.hostAndPort = hostAndPort;
          this.query = query;
        }
        return Url2;
      }()
    );
    exports.Url = Url;
    function parseDatabaseUrl(url) {
      var _a;
      (0, util_1.assertString)(url, "URL");
      var sanitized = sanitizeUrl(url);
      var parsedUrl = uriJsParse(sanitized.url);
      var scheme = sanitized.schemeMissing ? null : extractScheme(parsedUrl.scheme);
      var host = extractHost(parsedUrl.host);
      var formattedHost = formatHost(host);
      var port = extractPort(parsedUrl.port, scheme);
      var hostAndPort = "".concat(formattedHost, ":").concat(port);
      var query = extractQuery(
        // @ts-expect-error
        (_a = parsedUrl.query) !== null && _a !== void 0 ? _a : extractResourceQueryString(parsedUrl.resourceName),
        url
      );
      return new Url(scheme, host, port, hostAndPort, query);
    }
    exports.parseDatabaseUrl = parseDatabaseUrl;
    function extractResourceQueryString(resource) {
      if (typeof resource !== "string") {
        return null;
      }
      var _a = __read(resource.split("?"), 2), query = _a[1];
      return query;
    }
    function sanitizeUrl(url) {
      url = url.trim();
      if (!url.includes("://")) {
        return { schemeMissing: true, url: "none://".concat(url) };
      }
      return { schemeMissing: false, url };
    }
    function extractScheme(scheme) {
      if (scheme != null) {
        scheme = scheme.trim();
        if (scheme.charAt(scheme.length - 1) === ":") {
          scheme = scheme.substring(0, scheme.length - 1);
        }
        return scheme;
      }
      return null;
    }
    function extractHost(host, url) {
      if (host == null) {
        throw new Error("Unable to extract host from null or undefined URL");
      }
      return host.trim();
    }
    function extractPort(portString, scheme) {
      var port = typeof portString === "string" ? parseInt(portString, 10) : portString;
      return port != null && !isNaN(port) ? port : defaultPortForScheme(scheme);
    }
    function extractQuery(queryString, url) {
      var query = queryString != null ? trimAndSanitizeQuery(queryString) : null;
      var context = {};
      if (query != null) {
        query.split("&").forEach(function(pair) {
          var keyValue = pair.split("=");
          if (keyValue.length !== 2) {
            throw new Error("Invalid parameters: '".concat(keyValue.toString(), "' in URL '").concat(url, "'."));
          }
          var key = trimAndVerifyQueryElement(keyValue[0], "key", url);
          var value = trimAndVerifyQueryElement(keyValue[1], "value", url);
          if (context[key] !== void 0) {
            throw new Error("Duplicated query parameters with key '".concat(key, "' in URL '").concat(url, "'"));
          }
          context[key] = value;
        });
      }
      return context;
    }
    function trimAndSanitizeQuery(query) {
      query = (query !== null && query !== void 0 ? query : "").trim();
      if ((query === null || query === void 0 ? void 0 : query.charAt(0)) === "?") {
        query = query.substring(1, query.length);
      }
      return query;
    }
    function trimAndVerifyQueryElement(element, name, url) {
      element = (element !== null && element !== void 0 ? element : "").trim();
      if (element === "") {
        throw new Error("Illegal empty ".concat(name, " in URL query '").concat(url, "'"));
      }
      return element;
    }
    function escapeIPv6Address(address) {
      var startsWithSquareBracket = address.charAt(0) === "[";
      var endsWithSquareBracket = address.charAt(address.length - 1) === "]";
      if (!startsWithSquareBracket && !endsWithSquareBracket) {
        return "[".concat(address, "]");
      } else if (startsWithSquareBracket && endsWithSquareBracket) {
        return address;
      } else {
        throw new Error("Illegal IPv6 address ".concat(address));
      }
    }
    function formatHost(host) {
      if (host === "" || host == null) {
        throw new Error("Illegal host ".concat(host));
      }
      var isIPv6Address = host.includes(":");
      return isIPv6Address ? escapeIPv6Address(host) : host;
    }
    function formatIPv4Address(address, port) {
      return "".concat(address, ":").concat(port);
    }
    exports.formatIPv4Address = formatIPv4Address;
    function formatIPv6Address(address, port) {
      var escapedAddress = escapeIPv6Address(address);
      return "".concat(escapedAddress, ":").concat(port);
    }
    exports.formatIPv6Address = formatIPv6Address;
    function defaultPortForScheme(scheme) {
      if (scheme === "http") {
        return DEFAULT_HTTP_PORT;
      } else if (scheme === "https") {
        return DEFAULT_HTTPS_PORT;
      } else {
        return DEFAULT_BOLT_PORT;
      }
    }
    exports.defaultPortForScheme = defaultPortForScheme;
    function uriJsParse(value) {
      function partition(s, delimiter) {
        var i = s.indexOf(delimiter);
        if (i >= 0)
          return [s.substring(0, i), s[i], s.substring(i + 1)];
        else
          return [s, "", ""];
      }
      function rpartition(s, delimiter) {
        var i = s.lastIndexOf(delimiter);
        if (i >= 0)
          return [s.substring(0, i), s[i], s.substring(i + 1)];
        else
          return ["", "", s];
      }
      function between(s, ldelimiter, rdelimiter) {
        var lpartition = partition(s, ldelimiter);
        var rpartition2 = partition(lpartition[2], rdelimiter);
        return [rpartition2[0], rpartition2[2]];
      }
      function parseAuthority(value2) {
        var parsed2 = {};
        var parts2;
        parts2 = rpartition(value2, "@");
        if (parts2[1] === "@") {
          parsed2.userInfo = decodeURIComponent(parts2[0]);
          value2 = parts2[2];
        }
        var _a = __read(between(value2, "[", "]"), 2), ipv6Host = _a[0], rest = _a[1];
        if (ipv6Host !== "") {
          parsed2.host = ipv6Host;
          parts2 = partition(rest, ":");
        } else {
          parts2 = partition(value2, ":");
          parsed2.host = parts2[0];
        }
        if (parts2[1] === ":") {
          parsed2.port = parts2[2];
        }
        return parsed2;
      }
      var parsed = {};
      var parts;
      parts = partition(value, ":");
      if (parts[1] === ":") {
        parsed.scheme = decodeURIComponent(parts[0]);
        value = parts[2];
      }
      parts = partition(value, "#");
      if (parts[1] === "#") {
        parsed.fragment = decodeURIComponent(parts[2]);
        value = parts[0];
      }
      parts = partition(value, "?");
      if (parts[1] === "?") {
        parsed.query = parts[2];
        value = parts[0];
      }
      if (value.startsWith("//")) {
        parts = partition(value.substr(2), "/");
        parsed = __assign(__assign({}, parsed), parseAuthority(parts[0]));
        parsed.path = parts[1] + parts[2];
      } else {
        parsed.path = value;
      }
      return parsed;
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/server-address.js
var require_server_address = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/server-address.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServerAddress = void 0;
    var util_1 = require_util();
    var urlUtil = __importStar(require_url_util());
    var ServerAddress = (
      /** @class */
      function() {
        function ServerAddress2(host, resolved, port, hostPort) {
          this._host = (0, util_1.assertString)(host, "host");
          this._resolved = resolved != null ? (0, util_1.assertString)(resolved, "resolved") : null;
          this._port = (0, util_1.assertNumber)(port, "port");
          this._hostPort = hostPort;
          this._stringValue = resolved != null ? "".concat(hostPort, "(").concat(resolved, ")") : "".concat(hostPort);
        }
        ServerAddress2.prototype.host = function() {
          return this._host;
        };
        ServerAddress2.prototype.resolvedHost = function() {
          return this._resolved != null ? this._resolved : this._host;
        };
        ServerAddress2.prototype.port = function() {
          return this._port;
        };
        ServerAddress2.prototype.resolveWith = function(resolved) {
          return new ServerAddress2(this._host, resolved, this._port, this._hostPort);
        };
        ServerAddress2.prototype.asHostPort = function() {
          return this._hostPort;
        };
        ServerAddress2.prototype.asKey = function() {
          return this._hostPort;
        };
        ServerAddress2.prototype.toString = function() {
          return this._stringValue;
        };
        ServerAddress2.fromUrl = function(url) {
          var urlParsed = urlUtil.parseDatabaseUrl(url);
          return new ServerAddress2(urlParsed.host, null, urlParsed.port, urlParsed.hostAndPort);
        };
        return ServerAddress2;
      }()
    );
    exports.ServerAddress = ServerAddress;
  }
});

// node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js
var require_base_host_name_resolver = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseHostNameResolver = (
      /** @class */
      function() {
        function BaseHostNameResolver2() {
        }
        BaseHostNameResolver2.prototype.resolve = function() {
          throw new Error("Abstract function");
        };
        BaseHostNameResolver2.prototype._resolveToItself = function(address) {
          return Promise.resolve([address]);
        };
        return BaseHostNameResolver2;
      }()
    );
    exports.default = BaseHostNameResolver;
  }
});

// node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js
var require_configured_custom_resolver = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var server_address_1 = require_server_address();
    function resolveToSelf(address) {
      return Promise.resolve([address]);
    }
    var ConfiguredCustomResolver = (
      /** @class */
      function() {
        function ConfiguredCustomResolver2(resolverFunction) {
          this._resolverFunction = resolverFunction !== null && resolverFunction !== void 0 ? resolverFunction : resolveToSelf;
        }
        ConfiguredCustomResolver2.prototype.resolve = function(seedRouter) {
          var _this = this;
          return new Promise(function(resolve) {
            return resolve(_this._resolverFunction(seedRouter.asHostPort()));
          }).then(function(resolved) {
            if (!Array.isArray(resolved)) {
              throw new TypeError("Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses." + // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
              "Each address is '<host>:<port>'. Got: ".concat(resolved));
            }
            return resolved.map(function(r) {
              return server_address_1.ServerAddress.fromUrl(r);
            });
          });
        };
        return ConfiguredCustomResolver2;
      }()
    );
    exports.default = ConfiguredCustomResolver;
  }
});

// node_modules/neo4j-driver-core/lib/internal/resolver/index.js
var require_resolver = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/resolver/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfiguredCustomResolver = exports.BaseHostNameResolver = void 0;
    var base_host_name_resolver_1 = __importDefault(require_base_host_name_resolver());
    exports.BaseHostNameResolver = base_host_name_resolver_1.default;
    var configured_custom_resolver_1 = __importDefault(require_configured_custom_resolver());
    exports.ConfiguredCustomResolver = configured_custom_resolver_1.default;
  }
});

// node_modules/neo4j-driver-core/lib/internal/bolt-agent/browser/bolt-agent.js
var require_bolt_agent = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/bolt-agent/browser/bolt-agent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromVersion = void 0;
    function fromVersion(version, getSystemInfo) {
      if (getSystemInfo === void 0) {
        getSystemInfo = function() {
          return {
            get userAgent() {
              var navigator;
              return navigator === null || navigator === void 0 ? void 0 : navigator.userAgent;
            }
          };
        };
      }
      var systemInfo = getSystemInfo();
      var platform = systemInfo.userAgent != null ? systemInfo.userAgent.split("(")[1].split(")")[0] : void 0;
      var languageDetails = systemInfo.userAgent || void 0;
      return {
        product: "neo4j-javascript/".concat(version),
        platform,
        languageDetails
      };
    }
    exports.fromVersion = fromVersion;
  }
});

// node_modules/neo4j-driver-core/lib/internal/bolt-agent/browser/index.js
var require_browser = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/bolt-agent/browser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_bolt_agent(), exports);
  }
});

// node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js
var require_pool_config = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_ACQUISITION_TIMEOUT = exports.DEFAULT_MAX_SIZE = void 0;
    var DEFAULT_MAX_SIZE = 100;
    exports.DEFAULT_MAX_SIZE = DEFAULT_MAX_SIZE;
    var DEFAULT_ACQUISITION_TIMEOUT = 60 * 1e3;
    exports.DEFAULT_ACQUISITION_TIMEOUT = DEFAULT_ACQUISITION_TIMEOUT;
    var PoolConfig = (
      /** @class */
      function() {
        function PoolConfig2(maxSize, acquisitionTimeout) {
          this.maxSize = valueOrDefault(maxSize, DEFAULT_MAX_SIZE);
          this.acquisitionTimeout = valueOrDefault(acquisitionTimeout, DEFAULT_ACQUISITION_TIMEOUT);
        }
        PoolConfig2.defaultConfig = function() {
          return new PoolConfig2(DEFAULT_MAX_SIZE, DEFAULT_ACQUISITION_TIMEOUT);
        };
        PoolConfig2.fromDriverConfig = function(config) {
          var maxSize = isConfigured(config.maxConnectionPoolSize) ? config.maxConnectionPoolSize : DEFAULT_MAX_SIZE;
          var acquisitionTimeout = isConfigured(config.connectionAcquisitionTimeout) ? config.connectionAcquisitionTimeout : DEFAULT_ACQUISITION_TIMEOUT;
          return new PoolConfig2(maxSize, acquisitionTimeout);
        };
        return PoolConfig2;
      }()
    );
    exports.default = PoolConfig;
    function valueOrDefault(value, defaultValue) {
      return isConfigured(value) ? value : defaultValue;
    }
    function isConfigured(value) {
      return value === 0 || value != null;
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/pool/pool.js
var require_pool = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/pool/pool.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var pool_config_1 = __importDefault(require_pool_config());
    var error_1 = require_error();
    var logger_1 = require_logger();
    var Pool = (
      /** @class */
      function() {
        function Pool2(_a) {
          var _b = _a.create, create = _b === void 0 ? function(acquisitionContext, address, release) {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, Promise.reject(new Error("Not implemented"))];
                  case 1:
                    return [2, _a2.sent()];
                }
              });
            });
          } : _b, _c = _a.destroy, destroy = _c === void 0 ? function(conn) {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, Promise.resolve()];
                  case 1:
                    return [2, _a2.sent()];
                }
              });
            });
          } : _c, _d = _a.validateOnAcquire, validateOnAcquire = _d === void 0 ? function(acquisitionContext, conn) {
            return true;
          } : _d, _e = _a.validateOnRelease, validateOnRelease = _e === void 0 ? function(conn) {
            return true;
          } : _e, _f = _a.installIdleObserver, installIdleObserver = _f === void 0 ? function(conn, observer) {
          } : _f, _g = _a.removeIdleObserver, removeIdleObserver = _g === void 0 ? function(conn) {
          } : _g, _h = _a.config, config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h, _j = _a.log, log = _j === void 0 ? logger_1.Logger.noOp() : _j;
          var _this = this;
          this._create = create;
          this._destroy = destroy;
          this._validateOnAcquire = validateOnAcquire;
          this._validateOnRelease = validateOnRelease;
          this._installIdleObserver = installIdleObserver;
          this._removeIdleObserver = removeIdleObserver;
          this._maxSize = config.maxSize;
          this._acquisitionTimeout = config.acquisitionTimeout;
          this._pools = {};
          this._pendingCreates = {};
          this._acquireRequests = {};
          this._activeResourceCounts = {};
          this._release = this._release.bind(this);
          this._log = log;
          this._closed = false;
        }
        Pool2.prototype.acquire = function(acquisitionContext, address, config) {
          return __awaiter(this, void 0, void 0, function() {
            var key, allRequests, requests;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  key = address.asKey();
                  allRequests = this._acquireRequests;
                  requests = allRequests[key];
                  if (requests == null) {
                    allRequests[key] = [];
                  }
                  return [4, new Promise(function(resolve, reject) {
                    var timeoutId = setTimeout(function() {
                      var pendingRequests = allRequests[key];
                      if (pendingRequests != null) {
                        allRequests[key] = pendingRequests.filter(function(item) {
                          return item !== request;
                        });
                      }
                      if (request.isCompleted()) {
                      } else {
                        var activeCount = _this.activeResourceCount(address);
                        var idleCount = _this.has(address) ? _this._pools[key].length : 0;
                        request.reject((0, error_1.newError)("Connection acquisition timed out in ".concat(_this._acquisitionTimeout, " ms. Pool status: Active conn count = ").concat(activeCount, ", Idle conn count = ").concat(idleCount, ".")));
                      }
                    }, _this._acquisitionTimeout);
                    if (typeof timeoutId === "object") {
                      timeoutId.unref();
                    }
                    var request = new PendingRequest(key, acquisitionContext, config, resolve, reject, timeoutId, _this._log);
                    allRequests[key].push(request);
                    _this._processPendingAcquireRequests(address);
                  })];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Pool2.prototype.purge = function(address) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._purgeKey(address.asKey())];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Pool2.prototype.apply = function(address, resourceConsumer) {
          var key = address.asKey();
          if (key in this._pools) {
            this._pools[key].apply(resourceConsumer);
          }
        };
        Pool2.prototype.close = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._closed = true;
                  return [4, Promise.all(Object.keys(this._pools).map(function(key) {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this._purgeKey(key)];
                          case 1:
                            return [2, _a2.sent()];
                        }
                      });
                    });
                  })).then()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Pool2.prototype.keepAll = function(addresses) {
          return __awaiter(this, void 0, void 0, function() {
            var keysToKeep, keysPresent, keysToPurge;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  keysToKeep = addresses.map(function(a) {
                    return a.asKey();
                  });
                  keysPresent = Object.keys(this._pools);
                  keysToPurge = keysPresent.filter(function(k) {
                    return !keysToKeep.includes(k);
                  });
                  return [4, Promise.all(keysToPurge.map(function(key) {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this._purgeKey(key)];
                          case 1:
                            return [2, _a2.sent()];
                        }
                      });
                    });
                  })).then()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Pool2.prototype.has = function(address) {
          return address.asKey() in this._pools;
        };
        Pool2.prototype.activeResourceCount = function(address) {
          var _a;
          return (_a = this._activeResourceCounts[address.asKey()]) !== null && _a !== void 0 ? _a : 0;
        };
        Pool2.prototype._getOrInitializePoolFor = function(key) {
          var pool = this._pools[key];
          if (pool == null) {
            pool = new SingleAddressPool();
            this._pools[key] = pool;
            this._pendingCreates[key] = 0;
          }
          return pool;
        };
        Pool2.prototype._acquire = function(acquisitionContext, address, requireNew) {
          return __awaiter(this, void 0, void 0, function() {
            var key, pool, resource_1, valid, e_1, numConnections, resource, numConnections, resource_2;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (this._closed) {
                    throw (0, error_1.newError)("Pool is closed, it is no more able to serve requests.");
                  }
                  key = address.asKey();
                  pool = this._getOrInitializePoolFor(key);
                  if (!!requireNew) return [3, 10];
                  _a.label = 1;
                case 1:
                  if (!(pool.length > 0)) return [3, 10];
                  resource_1 = pool.pop();
                  if (resource_1 == null) {
                    return [3, 1];
                  }
                  resourceAcquired(key, this._activeResourceCounts);
                  if (this._removeIdleObserver != null) {
                    this._removeIdleObserver(resource_1);
                  }
                  valid = false;
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 6]);
                  return [4, this._validateOnAcquire(acquisitionContext, resource_1)];
                case 3:
                  valid = _a.sent();
                  return [3, 6];
                case 4:
                  e_1 = _a.sent();
                  resourceReleased(key, this._activeResourceCounts);
                  pool.removeInUse(resource_1);
                  return [4, this._destroy(resource_1)];
                case 5:
                  _a.sent();
                  throw e_1;
                case 6:
                  if (!valid) return [3, 7];
                  if (this._log.isDebugEnabled()) {
                    this._log.debug("".concat(resource_1, " acquired from the pool ").concat(key));
                  }
                  return [2, { resource: resource_1, pool }];
                case 7:
                  resourceReleased(key, this._activeResourceCounts);
                  pool.removeInUse(resource_1);
                  return [4, this._destroy(resource_1)];
                case 8:
                  _a.sent();
                  _a.label = 9;
                case 9:
                  return [3, 1];
                case 10:
                  if (this._maxSize > 0) {
                    numConnections = this.activeResourceCount(address) + this._pendingCreates[key];
                    if (numConnections >= this._maxSize) {
                      return [2, { resource: null, pool }];
                    }
                  }
                  this._pendingCreates[key] = this._pendingCreates[key] + 1;
                  _a.label = 11;
                case 11:
                  _a.trys.push([11, , 15, 16]);
                  numConnections = this.activeResourceCount(address) + pool.length;
                  if (!(numConnections >= this._maxSize && requireNew)) return [3, 13];
                  resource_2 = pool.pop();
                  if (!(resource_2 != null)) return [3, 13];
                  if (this._removeIdleObserver != null) {
                    this._removeIdleObserver(resource_2);
                  }
                  pool.removeInUse(resource_2);
                  return [4, this._destroy(resource_2)];
                case 12:
                  _a.sent();
                  _a.label = 13;
                case 13:
                  return [4, this._create(acquisitionContext, address, function(address2, resource2) {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this._release(address2, resource2, pool)];
                          case 1:
                            return [2, _a2.sent()];
                        }
                      });
                    });
                  })];
                case 14:
                  resource = _a.sent();
                  pool.pushInUse(resource);
                  resourceAcquired(key, this._activeResourceCounts);
                  if (this._log.isDebugEnabled()) {
                    this._log.debug("".concat(resource, " created for the pool ").concat(key));
                  }
                  return [3, 16];
                case 15:
                  this._pendingCreates[key] = this._pendingCreates[key] - 1;
                  return [
                    7
                    /*endfinally*/
                  ];
                case 16:
                  return [2, { resource, pool }];
              }
            });
          });
        };
        Pool2.prototype._release = function(address, resource, pool) {
          return __awaiter(this, void 0, void 0, function() {
            var key;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  key = address.asKey();
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, , 9, 10]);
                  if (!pool.isActive()) return [3, 6];
                  return [4, this._validateOnRelease(resource)];
                case 2:
                  if (!!_a.sent()) return [3, 4];
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(
                      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                      "".concat(resource, " destroyed and can't be released to the pool ").concat(key, " because it is not functional")
                    );
                  }
                  pool.removeInUse(resource);
                  return [4, this._destroy(resource)];
                case 3:
                  _a.sent();
                  return [3, 5];
                case 4:
                  if (this._installIdleObserver != null) {
                    this._installIdleObserver(resource, {
                      onError: function(error) {
                        _this._log.debug(
                          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                          "Idle connection ".concat(resource, " destroyed because of error: ").concat(error)
                        );
                        var pool2 = _this._pools[key];
                        if (pool2 != null) {
                          _this._pools[key] = pool2.filter(function(r) {
                            return r !== resource;
                          });
                          pool2.removeInUse(resource);
                        }
                        _this._destroy(resource).catch(function() {
                        });
                      }
                    });
                  }
                  pool.push(resource);
                  if (this._log.isDebugEnabled()) {
                    this._log.debug("".concat(resource, " released to the pool ").concat(key));
                  }
                  _a.label = 5;
                case 5:
                  return [3, 8];
                case 6:
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(
                      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                      "".concat(resource, " destroyed and can't be released to the pool ").concat(key, " because pool has been purged")
                    );
                  }
                  pool.removeInUse(resource);
                  return [4, this._destroy(resource)];
                case 7:
                  _a.sent();
                  _a.label = 8;
                case 8:
                  return [3, 10];
                case 9:
                  resourceReleased(key, this._activeResourceCounts);
                  this._processPendingAcquireRequests(address);
                  return [
                    7
                    /*endfinally*/
                  ];
                case 10:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Pool2.prototype._purgeKey = function(key) {
          return __awaiter(this, void 0, void 0, function() {
            var pool, destructionList, resource;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  pool = this._pools[key];
                  destructionList = [];
                  if (!(pool != null)) return [3, 2];
                  while (pool.length > 0) {
                    resource = pool.pop();
                    if (resource == null) {
                      continue;
                    }
                    if (this._removeIdleObserver != null) {
                      this._removeIdleObserver(resource);
                    }
                    destructionList.push(this._destroy(resource));
                  }
                  pool.close();
                  delete this._pools[key];
                  return [4, Promise.all(destructionList)];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Pool2.prototype._processPendingAcquireRequests = function(address) {
          var _this = this;
          var key = address.asKey();
          var requests = this._acquireRequests[key];
          if (requests != null) {
            var pendingRequest_1 = requests.shift();
            if (pendingRequest_1 != null) {
              this._acquire(pendingRequest_1.context, address, pendingRequest_1.requireNew).catch(function(error) {
                pendingRequest_1.reject(error);
                return { resource: null, pool: null };
              }).then(function(_a) {
                var resource = _a.resource, pool = _a.pool;
                if (resource != null && pool != null) {
                  if (pendingRequest_1.isCompleted()) {
                    _this._release(address, resource, pool).catch(function(error) {
                      if (_this._log.isDebugEnabled()) {
                        _this._log.debug("".concat(resource, " could not be release back to the pool. Cause: ").concat(error));
                      }
                    });
                  } else {
                    pendingRequest_1.resolve(resource);
                  }
                } else {
                  if (!pendingRequest_1.isCompleted()) {
                    if (_this._acquireRequests[key] == null) {
                      _this._acquireRequests[key] = [];
                    }
                    _this._acquireRequests[key].unshift(pendingRequest_1);
                  }
                }
              }).catch(function(error) {
                return pendingRequest_1.reject(error);
              });
            } else {
              delete this._acquireRequests[key];
            }
          }
        };
        return Pool2;
      }()
    );
    function resourceAcquired(key, activeResourceCounts) {
      var _a;
      var currentCount = (_a = activeResourceCounts[key]) !== null && _a !== void 0 ? _a : 0;
      activeResourceCounts[key] = currentCount + 1;
    }
    function resourceReleased(key, activeResourceCounts) {
      var _a;
      var currentCount = (_a = activeResourceCounts[key]) !== null && _a !== void 0 ? _a : 0;
      var nextCount = currentCount - 1;
      if (nextCount > 0) {
        activeResourceCounts[key] = nextCount;
      } else {
        delete activeResourceCounts[key];
      }
    }
    var PendingRequest = (
      /** @class */
      function() {
        function PendingRequest2(key, context, config, resolve, reject, timeoutId, log) {
          this._key = key;
          this._context = context;
          this._resolve = resolve;
          this._reject = reject;
          this._timeoutId = timeoutId;
          this._log = log;
          this._completed = false;
          this._config = config !== null && config !== void 0 ? config : {};
        }
        Object.defineProperty(PendingRequest2.prototype, "context", {
          get: function() {
            return this._context;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(PendingRequest2.prototype, "requireNew", {
          get: function() {
            var _a;
            return (_a = this._config.requireNew) !== null && _a !== void 0 ? _a : false;
          },
          enumerable: false,
          configurable: true
        });
        PendingRequest2.prototype.isCompleted = function() {
          return this._completed;
        };
        PendingRequest2.prototype.resolve = function(resource) {
          if (this._completed) {
            return;
          }
          this._completed = true;
          clearTimeout(this._timeoutId);
          if (this._log.isDebugEnabled()) {
            this._log.debug("".concat(resource, " acquired from the pool ").concat(this._key));
          }
          this._resolve(resource);
        };
        PendingRequest2.prototype.reject = function(error) {
          if (this._completed) {
            return;
          }
          this._completed = true;
          clearTimeout(this._timeoutId);
          this._reject(error);
        };
        return PendingRequest2;
      }()
    );
    var SingleAddressPool = (
      /** @class */
      function() {
        function SingleAddressPool2() {
          this._active = true;
          this._elements = [];
          this._elementsInUse = /* @__PURE__ */ new Set();
        }
        SingleAddressPool2.prototype.isActive = function() {
          return this._active;
        };
        SingleAddressPool2.prototype.close = function() {
          this._active = false;
          this._elements = [];
          this._elementsInUse = /* @__PURE__ */ new Set();
        };
        SingleAddressPool2.prototype.filter = function(predicate) {
          this._elements = this._elements.filter(predicate);
          return this;
        };
        SingleAddressPool2.prototype.apply = function(resourceConsumer) {
          this._elements.forEach(resourceConsumer);
          this._elementsInUse.forEach(resourceConsumer);
        };
        Object.defineProperty(SingleAddressPool2.prototype, "length", {
          get: function() {
            return this._elements.length;
          },
          enumerable: false,
          configurable: true
        });
        SingleAddressPool2.prototype.pop = function() {
          var element = this._elements.pop();
          if (element != null) {
            this._elementsInUse.add(element);
          }
          return element;
        };
        SingleAddressPool2.prototype.push = function(element) {
          this._elementsInUse.delete(element);
          return this._elements.push(element);
        };
        SingleAddressPool2.prototype.pushInUse = function(element) {
          this._elementsInUse.add(element);
        };
        SingleAddressPool2.prototype.removeInUse = function(element) {
          this._elementsInUse.delete(element);
        };
        return SingleAddressPool2;
      }()
    );
    exports.default = Pool;
  }
});

// node_modules/neo4j-driver-core/lib/internal/pool/index.js
var require_pool2 = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/pool/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_MAX_SIZE = exports.DEFAULT_ACQUISITION_TIMEOUT = exports.PoolConfig = exports.Pool = void 0;
    var pool_config_1 = __importStar(require_pool_config());
    exports.PoolConfig = pool_config_1.default;
    Object.defineProperty(exports, "DEFAULT_ACQUISITION_TIMEOUT", { enumerable: true, get: function() {
      return pool_config_1.DEFAULT_ACQUISITION_TIMEOUT;
    } });
    Object.defineProperty(exports, "DEFAULT_MAX_SIZE", { enumerable: true, get: function() {
      return pool_config_1.DEFAULT_MAX_SIZE;
    } });
    var pool_1 = __importDefault(require_pool());
    exports.Pool = pool_1.default;
    exports.default = pool_1.default;
  }
});

// node_modules/neo4j-driver-core/lib/internal/index.js
var require_internal = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pool = exports.boltAgent = exports.objectUtil = exports.resolver = exports.serverAddress = exports.urlUtil = exports.logger = exports.transactionExecutor = exports.txConfig = exports.connectionHolder = exports.constants = exports.bookmarks = exports.observer = exports.temporalUtil = exports.util = void 0;
    var util = __importStar(require_util());
    exports.util = util;
    var temporalUtil = __importStar(require_temporal_util());
    exports.temporalUtil = temporalUtil;
    var observer = __importStar(require_observers());
    exports.observer = observer;
    var bookmarks = __importStar(require_bookmarks());
    exports.bookmarks = bookmarks;
    var constants = __importStar(require_constants());
    exports.constants = constants;
    var connectionHolder = __importStar(require_connection_holder());
    exports.connectionHolder = connectionHolder;
    var txConfig = __importStar(require_tx_config());
    exports.txConfig = txConfig;
    var transactionExecutor = __importStar(require_transaction_executor());
    exports.transactionExecutor = transactionExecutor;
    var logger = __importStar(require_logger());
    exports.logger = logger;
    var urlUtil = __importStar(require_url_util());
    exports.urlUtil = urlUtil;
    var serverAddress = __importStar(require_server_address());
    exports.serverAddress = serverAddress;
    var resolver = __importStar(require_resolver());
    exports.resolver = resolver;
    var objectUtil = __importStar(require_object_util());
    exports.objectUtil = objectUtil;
    var boltAgent = __importStar(require_browser());
    exports.boltAgent = boltAgent;
    var pool = __importStar(require_pool2());
    exports.pool = pool;
  }
});

// node_modules/neo4j-driver-core/lib/notification.js
var require_notification = __commonJS({
  "node_modules/neo4j-driver-core/lib/notification.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildNotificationsFromMetadata = exports.buildGqlStatusObjectFromMetadata = exports.polyfillNotification = exports.polyfillGqlStatusObject = exports.GqlStatusObject = exports.Notification = exports.notificationClassification = exports.notificationCategory = exports.notificationSeverityLevel = void 0;
    var json = __importStar(require_json());
    var internal_1 = require_internal();
    var gql_constants_1 = require_gql_constants();
    var unknownGqlStatus = {
      WARNING: {
        gql_status: "01N42",
        status_description: "warn: unknown warning"
      },
      NO_DATA: {
        gql_status: "02N42",
        status_description: "note: no data - unknown subcondition"
      },
      INFORMATION: {
        gql_status: "03N42",
        status_description: "info: unknown notification"
      },
      ERROR: {
        gql_status: "50N42",
        status_description: "error: general processing exception - unexpected error"
      }
    };
    var notificationSeverityLevel = {
      WARNING: "WARNING",
      INFORMATION: "INFORMATION",
      UNKNOWN: "UNKNOWN"
    };
    exports.notificationSeverityLevel = notificationSeverityLevel;
    Object.freeze(notificationSeverityLevel);
    var severityLevels = Object.values(notificationSeverityLevel);
    var notificationCategory = {
      HINT: "HINT",
      UNRECOGNIZED: "UNRECOGNIZED",
      UNSUPPORTED: "UNSUPPORTED",
      PERFORMANCE: "PERFORMANCE",
      DEPRECATION: "DEPRECATION",
      TOPOLOGY: "TOPOLOGY",
      SECURITY: "SECURITY",
      GENERIC: "GENERIC",
      SCHEMA: "SCHEMA",
      UNKNOWN: "UNKNOWN"
    };
    exports.notificationCategory = notificationCategory;
    Object.freeze(notificationCategory);
    var categories = Object.values(notificationCategory);
    var notificationClassification = notificationCategory;
    exports.notificationClassification = notificationClassification;
    var Notification = (
      /** @class */
      /* @__PURE__ */ function() {
        function Notification2(notification) {
          this.code = notification.code;
          this.title = notification.title;
          this.description = notification.description;
          this.severity = notification.severity;
          this.position = _constructPosition(notification.position);
          this.severityLevel = _asEnumerableSeverity(notification.severity);
          this.rawSeverityLevel = notification.severity;
          this.category = _asEnumerableClassification(notification.category);
          this.rawCategory = notification.category;
        }
        return Notification2;
      }()
    );
    exports.Notification = Notification;
    var GqlStatusObject = (
      /** @class */
      function() {
        function GqlStatusObject2(rawGqlStatusObject) {
          var _a;
          this.gqlStatus = rawGqlStatusObject.gql_status;
          this.statusDescription = rawGqlStatusObject.status_description;
          this.diagnosticRecord = (_a = rawGqlStatusObject.diagnostic_record) !== null && _a !== void 0 ? _a : {};
          this.position = this.diagnosticRecord._position != null ? _constructPosition(this.diagnosticRecord._position) : void 0;
          this.severity = _asEnumerableSeverity(this.diagnosticRecord._severity);
          this.rawSeverity = this.diagnosticRecord._severity;
          this.classification = _asEnumerableClassification(this.diagnosticRecord._classification);
          this.rawClassification = this.diagnosticRecord._classification;
          this.isNotification = rawGqlStatusObject.neo4j_code != null;
          Object.freeze(this);
        }
        Object.defineProperty(GqlStatusObject2.prototype, "diagnosticRecordAsJsonString", {
          /**
           * The json string representation of the diagnostic record.
           * The goal of this method is provide a serialized object for human inspection.
           *
           * @type {string}
           * @public
           */
          get: function() {
            return json.stringify(this.diagnosticRecord, { useCustomToString: true });
          },
          enumerable: false,
          configurable: true
        });
        return GqlStatusObject2;
      }()
    );
    exports.GqlStatusObject = GqlStatusObject;
    function polyfillNotification(status) {
      var _a, _b, _c;
      if (status.neo4j_code == null) {
        return void 0;
      }
      return new Notification({
        code: status.neo4j_code,
        title: status.title,
        description: status.description,
        severity: (_a = status.diagnostic_record) === null || _a === void 0 ? void 0 : _a._severity,
        category: (_b = status.diagnostic_record) === null || _b === void 0 ? void 0 : _b._classification,
        position: (_c = status.diagnostic_record) === null || _c === void 0 ? void 0 : _c._position
      });
    }
    exports.polyfillNotification = polyfillNotification;
    function polyfillGqlStatusObject(notification) {
      var _a;
      var defaultStatus = notification.severity === notificationSeverityLevel.WARNING ? unknownGqlStatus.WARNING : unknownGqlStatus.INFORMATION;
      var polyfilledRawObj = {
        gql_status: defaultStatus.gql_status,
        status_description: (_a = notification.description) !== null && _a !== void 0 ? _a : defaultStatus.status_description,
        neo4j_code: notification.code,
        title: notification.title,
        diagnostic_record: __assign({}, gql_constants_1.rawPolyfilledDiagnosticRecord)
      };
      if (notification.severity != null) {
        polyfilledRawObj.diagnostic_record._severity = notification.severity;
      }
      if (notification.category != null) {
        polyfilledRawObj.diagnostic_record._classification = notification.category;
      }
      if (notification.position != null) {
        polyfilledRawObj.diagnostic_record._position = notification.position;
      }
      return new GqlStatusObject(polyfilledRawObj);
    }
    exports.polyfillGqlStatusObject = polyfillGqlStatusObject;
    var staticGqlStatusObjects = {
      SUCCESS: new GqlStatusObject({
        gql_status: "00000",
        status_description: "note: successful completion",
        diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord
      }),
      NO_DATA: new GqlStatusObject({
        gql_status: "02000",
        status_description: "note: no data",
        diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord
      }),
      NO_DATA_UNKNOWN_SUBCONDITION: new GqlStatusObject(__assign(__assign({}, unknownGqlStatus.NO_DATA), { diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord })),
      OMITTED_RESULT: new GqlStatusObject({
        gql_status: "00001",
        status_description: "note: successful completion - omitted result",
        diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord
      })
    };
    Object.freeze(staticGqlStatusObjects);
    function buildGqlStatusObjectFromMetadata(metadata) {
      var _a, _b;
      function getGqlStatusObjectFromStreamSummary(summary) {
        if ((summary === null || summary === void 0 ? void 0 : summary.have_records_streamed) === true) {
          return staticGqlStatusObjects.SUCCESS;
        }
        if ((summary === null || summary === void 0 ? void 0 : summary.has_keys) === false) {
          return staticGqlStatusObjects.OMITTED_RESULT;
        }
        if ((summary === null || summary === void 0 ? void 0 : summary.pulled) === true) {
          return staticGqlStatusObjects.NO_DATA;
        }
        return staticGqlStatusObjects.NO_DATA_UNKNOWN_SUBCONDITION;
      }
      if (metadata.statuses != null) {
        return metadata.statuses.map(function(status) {
          return new GqlStatusObject(status);
        });
      }
      var clientGenerated = getGqlStatusObjectFromStreamSummary(metadata.stream_summary);
      var polyfilledObjects = __spreadArray([clientGenerated], __read((_b = (_a = metadata.notifications) === null || _a === void 0 ? void 0 : _a.map(polyfillGqlStatusObject)) !== null && _b !== void 0 ? _b : []), false);
      return polyfilledObjects.sort(function(a, b) {
        return calculateWeight(a) - calculateWeight(b);
      });
    }
    exports.buildGqlStatusObjectFromMetadata = buildGqlStatusObjectFromMetadata;
    var gqlStatusWeightByClass = Object.freeze({
      "02": 0,
      "01": 1,
      "00": 2
    });
    function calculateWeight(gqlStatusObject) {
      var _a, _b;
      var gqlClass = (_a = gqlStatusObject.gqlStatus) === null || _a === void 0 ? void 0 : _a.slice(0, 2);
      return (_b = gqlStatusWeightByClass[gqlClass]) !== null && _b !== void 0 ? _b : 9999;
    }
    function buildNotificationsFromMetadata(metadata) {
      if (metadata.notifications != null) {
        return metadata.notifications.map(function(n) {
          return new Notification(n);
        });
      }
      if (metadata.statuses != null) {
        return metadata.statuses.map(polyfillNotification).filter(function(n) {
          return n != null;
        });
      }
      return [];
    }
    exports.buildNotificationsFromMetadata = buildNotificationsFromMetadata;
    function _constructPosition(pos) {
      if (pos == null) {
        return {};
      }
      return {
        offset: internal_1.util.toNumber(pos.offset),
        line: internal_1.util.toNumber(pos.line),
        column: internal_1.util.toNumber(pos.column)
      };
    }
    function _asEnumerableSeverity(severity) {
      return severityLevels.includes(severity) ? severity : notificationSeverityLevel.UNKNOWN;
    }
    function _asEnumerableClassification(classification) {
      return categories.includes(classification) ? classification : notificationClassification.UNKNOWN;
    }
    exports.default = Notification;
  }
});

// node_modules/neo4j-driver-core/lib/result-summary.js
var require_result_summary = __commonJS({
  "node_modules/neo4j-driver-core/lib/result-summary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.ServerInfo = exports.queryType = void 0;
    var internal_1 = require_internal();
    var notification_1 = require_notification();
    var ResultSummary = (
      /** @class */
      function() {
        function ResultSummary2(query, parameters, metadata, protocolVersion) {
          var _a, _b, _c;
          this.query = { text: query, parameters };
          this.queryType = metadata.type;
          this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {});
          this.updateStatistics = this.counters;
          this.plan = metadata.plan != null || metadata.profile != null ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile) : false;
          this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;
          this.notifications = (0, notification_1.buildNotificationsFromMetadata)(metadata);
          this.gqlStatusObjects = (0, notification_1.buildGqlStatusObjectFromMetadata)(metadata);
          this.server = new ServerInfo(metadata.server, protocolVersion);
          this.resultConsumedAfter = metadata.result_consumed_after;
          this.resultAvailableAfter = metadata.result_available_after;
          this.database = { name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null };
        }
        ResultSummary2.prototype.hasPlan = function() {
          return this.plan instanceof Plan;
        };
        ResultSummary2.prototype.hasProfile = function() {
          return this.profile instanceof ProfiledPlan;
        };
        return ResultSummary2;
      }()
    );
    var Plan = (
      /** @class */
      /* @__PURE__ */ function() {
        function Plan2(plan) {
          this.operatorType = plan.operatorType;
          this.identifiers = plan.identifiers;
          this.arguments = plan.args;
          this.children = plan.children != null ? plan.children.map(function(child) {
            return new Plan2(child);
          }) : [];
        }
        return Plan2;
      }()
    );
    exports.Plan = Plan;
    var ProfiledPlan = (
      /** @class */
      function() {
        function ProfiledPlan2(profile) {
          this.operatorType = profile.operatorType;
          this.identifiers = profile.identifiers;
          this.arguments = profile.args;
          this.dbHits = valueOrDefault("dbHits", profile);
          this.rows = valueOrDefault("rows", profile);
          this.pageCacheMisses = valueOrDefault("pageCacheMisses", profile);
          this.pageCacheHits = valueOrDefault("pageCacheHits", profile);
          this.pageCacheHitRatio = valueOrDefault("pageCacheHitRatio", profile);
          this.time = valueOrDefault("time", profile);
          this.children = profile.children != null ? profile.children.map(function(child) {
            return new ProfiledPlan2(child);
          }) : [];
        }
        ProfiledPlan2.prototype.hasPageCacheStats = function() {
          return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;
        };
        return ProfiledPlan2;
      }()
    );
    exports.ProfiledPlan = ProfiledPlan;
    var Stats = (
      /** @class */
      /* @__PURE__ */ function() {
        function Stats2() {
          this.nodesCreated = 0;
          this.nodesDeleted = 0;
          this.relationshipsCreated = 0;
          this.relationshipsDeleted = 0;
          this.propertiesSet = 0;
          this.labelsAdded = 0;
          this.labelsRemoved = 0;
          this.indexesAdded = 0;
          this.indexesRemoved = 0;
          this.constraintsAdded = 0;
          this.constraintsRemoved = 0;
        }
        return Stats2;
      }()
    );
    exports.Stats = Stats;
    var QueryStatistics = (
      /** @class */
      function() {
        function QueryStatistics2(statistics) {
          var _this = this;
          this._stats = {
            nodesCreated: 0,
            nodesDeleted: 0,
            relationshipsCreated: 0,
            relationshipsDeleted: 0,
            propertiesSet: 0,
            labelsAdded: 0,
            labelsRemoved: 0,
            indexesAdded: 0,
            indexesRemoved: 0,
            constraintsAdded: 0,
            constraintsRemoved: 0
          };
          this._systemUpdates = 0;
          Object.keys(statistics).forEach(function(index) {
            var camelCaseIndex = index.replace(/(-\w)/g, function(m) {
              return m[1].toUpperCase();
            });
            if (camelCaseIndex in _this._stats) {
              _this._stats[camelCaseIndex] = internal_1.util.toNumber(statistics[index]);
            } else if (camelCaseIndex === "systemUpdates") {
              _this._systemUpdates = internal_1.util.toNumber(statistics[index]);
            } else if (camelCaseIndex === "containsSystemUpdates") {
              _this._containsSystemUpdates = statistics[index];
            } else if (camelCaseIndex === "containsUpdates") {
              _this._containsUpdates = statistics[index];
            }
          });
          this._stats = Object.freeze(this._stats);
        }
        QueryStatistics2.prototype.containsUpdates = function() {
          var _this = this;
          return this._containsUpdates !== void 0 ? this._containsUpdates : Object.keys(this._stats).reduce(function(last, current) {
            return last + _this._stats[current];
          }, 0) > 0;
        };
        QueryStatistics2.prototype.updates = function() {
          return this._stats;
        };
        QueryStatistics2.prototype.containsSystemUpdates = function() {
          return this._containsSystemUpdates !== void 0 ? this._containsSystemUpdates : this._systemUpdates > 0;
        };
        QueryStatistics2.prototype.systemUpdates = function() {
          return this._systemUpdates;
        };
        return QueryStatistics2;
      }()
    );
    exports.QueryStatistics = QueryStatistics;
    var ServerInfo = (
      /** @class */
      /* @__PURE__ */ function() {
        function ServerInfo2(serverMeta, protocolVersion) {
          if (serverMeta != null) {
            this.address = serverMeta.address;
            this.agent = serverMeta.version;
          }
          this.protocolVersion = protocolVersion;
        }
        return ServerInfo2;
      }()
    );
    exports.ServerInfo = ServerInfo;
    function valueOrDefault(key, values, defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = 0;
      }
      if (values !== false && key in values) {
        var value = values[key];
        return internal_1.util.toNumber(value);
      } else {
        return defaultValue;
      }
    }
    var queryType = {
      READ_ONLY: "r",
      READ_WRITE: "rw",
      WRITE_ONLY: "w",
      SCHEMA_WRITE: "s"
    };
    exports.queryType = queryType;
    exports.default = ResultSummary;
  }
});

// node_modules/neo4j-driver-core/lib/notification-filter.js
var require_notification_filter = __commonJS({
  "node_modules/neo4j-driver-core/lib/notification-filter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.notificationFilterDisabledClassification = exports.notificationFilterDisabledCategory = exports.notificationFilterMinimumSeverityLevel = void 0;
    var notificationFilterMinimumSeverityLevel = {
      OFF: "OFF",
      WARNING: "WARNING",
      INFORMATION: "INFORMATION"
    };
    exports.notificationFilterMinimumSeverityLevel = notificationFilterMinimumSeverityLevel;
    Object.freeze(notificationFilterMinimumSeverityLevel);
    var notificationFilterDisabledCategory = {
      HINT: "HINT",
      UNRECOGNIZED: "UNRECOGNIZED",
      UNSUPPORTED: "UNSUPPORTED",
      PERFORMANCE: "PERFORMANCE",
      TOPOLOGY: "TOPOLOGY",
      SECURITY: "SECURITY",
      DEPRECATION: "DEPRECATION",
      GENERIC: "GENERIC",
      SCHEMA: "SCHEMA"
    };
    exports.notificationFilterDisabledCategory = notificationFilterDisabledCategory;
    Object.freeze(notificationFilterDisabledCategory);
    var notificationFilterDisabledClassification = notificationFilterDisabledCategory;
    exports.notificationFilterDisabledClassification = notificationFilterDisabledClassification;
    var NotificationFilter = (
      /** @class */
      /* @__PURE__ */ function() {
        function NotificationFilter2() {
          this.minimumSeverityLevel = void 0;
          this.disabledCategories = void 0;
          this.disabledClassifications = void 0;
          throw new Error("Not implemented");
        }
        return NotificationFilter2;
      }()
    );
    exports.default = NotificationFilter;
  }
});

// node_modules/neo4j-driver-core/lib/result.js
var require_result = __commonJS({
  "node_modules/neo4j-driver-core/lib/result.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    var result_summary_1 = __importDefault(require_result_summary());
    var internal_1 = require_internal();
    var error_1 = require_error();
    var EMPTY_CONNECTION_HOLDER = internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;
    var DEFAULT_ON_ERROR = function(error) {
      console.log("Uncaught error when processing result: " + error);
    };
    var DEFAULT_ON_COMPLETED = function(summary) {
    };
    var DEFAULT_ON_KEYS = function(keys) {
    };
    var Result = (
      /** @class */
      function() {
        function Result2(streamObserverPromise, query, parameters, connectionHolder, watermarks) {
          if (watermarks === void 0) {
            watermarks = { high: Number.MAX_VALUE, low: Number.MAX_VALUE };
          }
          this[_a] = "Result";
          this._stack = captureStacktrace();
          this._streamObserverPromise = streamObserverPromise;
          this._p = null;
          this._query = query;
          this._parameters = parameters !== null && parameters !== void 0 ? parameters : {};
          this._connectionHolder = connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : EMPTY_CONNECTION_HOLDER;
          this._keys = null;
          this._summary = null;
          this._error = null;
          this._watermarks = watermarks;
        }
        Result2.prototype.keys = function() {
          var _this = this;
          if (this._keys !== null) {
            return Promise.resolve(this._keys);
          } else if (this._error !== null) {
            return Promise.reject(this._error);
          }
          return new Promise(function(resolve, reject) {
            _this._streamObserverPromise.then(function(observer) {
              return observer.subscribe(_this._decorateObserver({
                onKeys: function(keys) {
                  return resolve(keys);
                },
                onError: function(err) {
                  return reject(err);
                }
              }));
            }).catch(reject);
          });
        };
        Result2.prototype.summary = function() {
          var _this = this;
          if (this._summary !== null) {
            return Promise.resolve(this._summary);
          } else if (this._error !== null) {
            return Promise.reject(this._error);
          }
          return new Promise(function(resolve, reject) {
            _this._streamObserverPromise.then(function(o) {
              o.cancel();
              o.subscribe(_this._decorateObserver({
                // This type casting is needed since we are defining the number type of
                // summary in Result template
                onCompleted: function(summary) {
                  return resolve(summary);
                },
                onError: function(err) {
                  return reject(err);
                }
              }));
            }).catch(reject);
          });
        };
        Result2.prototype._getOrCreatePromise = function() {
          var _this = this;
          if (this._p == null) {
            this._p = new Promise(function(resolve, reject) {
              var records = [];
              var observer = {
                onNext: function(record) {
                  records.push(record);
                },
                onCompleted: function(summary) {
                  resolve({ records, summary });
                },
                onError: function(error) {
                  reject(error);
                }
              };
              _this.subscribe(observer);
            });
          }
          return this._p;
        };
        Result2.prototype[Symbol.asyncIterator] = function() {
          var _this = this;
          if (!this.isOpen()) {
            var error_2 = (0, error_1.newError)("Result is already consumed");
            return {
              next: function() {
                return Promise.reject(error_2);
              },
              peek: function() {
                return Promise.reject(error_2);
              }
            };
          }
          var state = { paused: true, firstRun: true, finished: false };
          var controlFlow = function() {
            var _b, _c;
            if (state.streaming == null) {
              return;
            }
            var size = (_c = (_b = state.queuedObserver) === null || _b === void 0 ? void 0 : _b.size) !== null && _c !== void 0 ? _c : 0;
            var queueSizeIsOverHighOrEqualWatermark = size >= _this._watermarks.high;
            var queueSizeIsBellowOrEqualLowWatermark = size <= _this._watermarks.low;
            if (queueSizeIsOverHighOrEqualWatermark && !state.paused) {
              state.paused = true;
              state.streaming.pause();
            } else if (queueSizeIsBellowOrEqualLowWatermark && state.paused || state.firstRun && !queueSizeIsOverHighOrEqualWatermark) {
              state.firstRun = false;
              state.paused = false;
              state.streaming.resume();
            }
          };
          var initializeObserver = function() {
            return __awaiter(_this, void 0, void 0, function() {
              var _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    if (!(state.queuedObserver === void 0)) return [3, 2];
                    state.queuedObserver = this._createQueuedResultObserver(controlFlow);
                    _b = state;
                    return [4, this._subscribe(state.queuedObserver, true).catch(function() {
                      return void 0;
                    })];
                  case 1:
                    _b.streaming = _c.sent();
                    controlFlow();
                    _c.label = 2;
                  case 2:
                    return [2, state.queuedObserver];
                }
              });
            });
          };
          var assertSummary = function(summary) {
            if (summary === void 0) {
              throw (0, error_1.newError)("InvalidState: Result stream finished without Summary", error_1.PROTOCOL_ERROR);
            }
            return true;
          };
          return {
            next: function() {
              return __awaiter(_this, void 0, void 0, function() {
                var queuedObserver, next;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      if (state.finished) {
                        if (assertSummary(state.summary)) {
                          return [2, { done: true, value: state.summary }];
                        }
                      }
                      return [4, initializeObserver()];
                    case 1:
                      queuedObserver = _b.sent();
                      return [4, queuedObserver.dequeue()];
                    case 2:
                      next = _b.sent();
                      if (next.done === true) {
                        state.finished = next.done;
                        state.summary = next.value;
                      }
                      return [2, next];
                  }
                });
              });
            },
            return: function(value) {
              return __awaiter(_this, void 0, void 0, function() {
                var queuedObserver, last;
                var _b;
                return __generator(this, function(_c) {
                  switch (_c.label) {
                    case 0:
                      if (state.finished) {
                        if (assertSummary(state.summary)) {
                          return [2, { done: true, value: value !== null && value !== void 0 ? value : state.summary }];
                        }
                      }
                      (_b = state.streaming) === null || _b === void 0 ? void 0 : _b.cancel();
                      return [4, initializeObserver()];
                    case 1:
                      queuedObserver = _c.sent();
                      return [4, queuedObserver.dequeueUntilDone()];
                    case 2:
                      last = _c.sent();
                      state.finished = true;
                      last.value = value !== null && value !== void 0 ? value : last.value;
                      state.summary = last.value;
                      return [2, last];
                  }
                });
              });
            },
            peek: function() {
              return __awaiter(_this, void 0, void 0, function() {
                var queuedObserver;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      if (state.finished) {
                        if (assertSummary(state.summary)) {
                          return [2, { done: true, value: state.summary }];
                        }
                      }
                      return [4, initializeObserver()];
                    case 1:
                      queuedObserver = _b.sent();
                      return [4, queuedObserver.head()];
                    case 2:
                      return [2, _b.sent()];
                  }
                });
              });
            }
          };
        };
        Result2.prototype.then = function(onFulfilled, onRejected) {
          return this._getOrCreatePromise().then(onFulfilled, onRejected);
        };
        Result2.prototype.catch = function(onRejected) {
          return this._getOrCreatePromise().catch(onRejected);
        };
        Result2.prototype.finally = function(onfinally) {
          return this._getOrCreatePromise().finally(onfinally);
        };
        Result2.prototype.subscribe = function(observer) {
          this._subscribe(observer).catch(function() {
          });
        };
        Result2.prototype.isOpen = function() {
          return this._summary === null && this._error === null;
        };
        Result2.prototype._subscribe = function(observer, paused) {
          if (paused === void 0) {
            paused = false;
          }
          var _observer = this._decorateObserver(observer);
          return this._streamObserverPromise.then(function(o) {
            if (paused) {
              o.pause();
            }
            o.subscribe(_observer);
            return o;
          }).catch(function(error) {
            if (_observer.onError != null) {
              _observer.onError(error);
            }
            return Promise.reject(error);
          });
        };
        Result2.prototype._decorateObserver = function(observer) {
          var _this = this;
          var _b, _c, _d;
          var onCompletedOriginal = (_b = observer.onCompleted) !== null && _b !== void 0 ? _b : DEFAULT_ON_COMPLETED;
          var onErrorOriginal = (_c = observer.onError) !== null && _c !== void 0 ? _c : DEFAULT_ON_ERROR;
          var onKeysOriginal = (_d = observer.onKeys) !== null && _d !== void 0 ? _d : DEFAULT_ON_KEYS;
          var onCompletedWrapper = function(metadata) {
            _this._releaseConnectionAndGetSummary(metadata).then(function(summary) {
              if (_this._summary !== null) {
                return onCompletedOriginal.call(observer, _this._summary);
              }
              _this._summary = summary;
              return onCompletedOriginal.call(observer, summary);
            }).catch(onErrorOriginal);
          };
          var onErrorWrapper = function(error) {
            _this._connectionHolder.releaseConnection().then(function() {
              replaceStacktrace(error, _this._stack);
              _this._error = error;
              onErrorOriginal.call(observer, error);
            }).catch(onErrorOriginal);
          };
          var onKeysWrapper = function(keys) {
            _this._keys = keys;
            return onKeysOriginal.call(observer, keys);
          };
          return {
            onNext: observer.onNext != null ? observer.onNext.bind(observer) : void 0,
            onKeys: onKeysWrapper,
            onCompleted: onCompletedWrapper,
            onError: onErrorWrapper
          };
        };
        Result2.prototype._cancel = function() {
          if (this._summary === null && this._error === null) {
            this._streamObserverPromise.then(function(o) {
              return o.cancel();
            }).catch(function() {
            });
          }
        };
        Result2.prototype._releaseConnectionAndGetSummary = function(metadata) {
          var _b = internal_1.util.validateQueryAndParameters(this._query, this._parameters, {
            skipAsserts: true
          }), query = _b.validatedQuery, parameters = _b.params;
          var connectionHolder = this._connectionHolder;
          return connectionHolder.getConnection().then(
            // onFulfilled:
            function(connection) {
              return connectionHolder.releaseConnection().then(function() {
                return connection === null || connection === void 0 ? void 0 : connection.getProtocolVersion();
              });
            },
            // onRejected:
            function(_) {
              return void 0;
            }
          ).then(function(protocolVersion) {
            return new result_summary_1.default(query, parameters, metadata, protocolVersion);
          });
        };
        Result2.prototype._createQueuedResultObserver = function(onQueueSizeChanged) {
          var _this = this;
          function createResolvablePromise() {
            var resolvablePromise = {};
            resolvablePromise.promise = new Promise(function(resolve, reject) {
              resolvablePromise.resolve = resolve;
              resolvablePromise.reject = reject;
            });
            return resolvablePromise;
          }
          function isError(elementOrError) {
            return elementOrError instanceof Error;
          }
          function dequeue() {
            var _b;
            return __awaiter(this, void 0, void 0, function() {
              var element;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    if (buffer.length > 0) {
                      element = (_b = buffer.shift()) !== null && _b !== void 0 ? _b : (0, error_1.newError)("Unexpected empty buffer", error_1.PROTOCOL_ERROR);
                      onQueueSizeChanged();
                      if (isError(element)) {
                        throw element;
                      }
                      return [2, element];
                    }
                    promiseHolder.resolvable = createResolvablePromise();
                    return [4, promiseHolder.resolvable.promise];
                  case 1:
                    return [2, _c.sent()];
                }
              });
            });
          }
          var buffer = [];
          var promiseHolder = { resolvable: null };
          var observer = {
            onNext: function(record) {
              observer._push({ done: false, value: record });
            },
            onCompleted: function(summary) {
              observer._push({ done: true, value: summary });
            },
            onError: function(error) {
              observer._push(error);
            },
            _push: function(element) {
              if (promiseHolder.resolvable !== null) {
                var resolvable = promiseHolder.resolvable;
                promiseHolder.resolvable = null;
                if (isError(element)) {
                  resolvable.reject(element);
                } else {
                  resolvable.resolve(element);
                }
              } else {
                buffer.push(element);
                onQueueSizeChanged();
              }
            },
            dequeue,
            dequeueUntilDone: function() {
              return __awaiter(_this, void 0, void 0, function() {
                var element;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      if (false) return [3, 2];
                      return [4, dequeue()];
                    case 1:
                      element = _b.sent();
                      if (element.done === true) {
                        return [2, element];
                      }
                      return [3, 0];
                    case 2:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            },
            head: function() {
              return __awaiter(_this, void 0, void 0, function() {
                var element, element, error_3;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      if (buffer.length > 0) {
                        element = buffer[0];
                        if (isError(element)) {
                          throw element;
                        }
                        return [2, element];
                      }
                      promiseHolder.resolvable = createResolvablePromise();
                      _b.label = 1;
                    case 1:
                      _b.trys.push([1, 3, 4, 5]);
                      return [4, promiseHolder.resolvable.promise];
                    case 2:
                      element = _b.sent();
                      buffer.unshift(element);
                      return [2, element];
                    case 3:
                      error_3 = _b.sent();
                      buffer.unshift(error_3);
                      throw error_3;
                    case 4:
                      onQueueSizeChanged();
                      return [
                        7
                        /*endfinally*/
                      ];
                    case 5:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            },
            get size() {
              return buffer.length;
            }
          };
          return observer;
        };
        return Result2;
      }()
    );
    _a = Symbol.toStringTag;
    function captureStacktrace() {
      var error = new Error("");
      if (error.stack != null) {
        return error.stack.replace(/^Error(\n\r)*/, "");
      }
      return null;
    }
    function replaceStacktrace(error, newStack) {
      if (newStack != null) {
        error.stack = error.toString() + "\n" + newStack;
      }
    }
    exports.default = Result;
  }
});

// node_modules/neo4j-driver-core/lib/result-eager.js
var require_result_eager = __commonJS({
  "node_modules/neo4j-driver-core/lib/result-eager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EagerResult = (
      /** @class */
      /* @__PURE__ */ function() {
        function EagerResult2(keys, records, summary) {
          this.keys = keys;
          this.records = records;
          this.summary = summary;
        }
        return EagerResult2;
      }()
    );
    exports.default = EagerResult;
  }
});

// node_modules/neo4j-driver-core/lib/connection-provider.js
var require_connection_provider = __commonJS({
  "node_modules/neo4j-driver-core/lib/connection-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Releasable = void 0;
    var Releasable = (
      /** @class */
      function() {
        function Releasable2() {
        }
        Releasable2.prototype.release = function() {
          throw new Error("Not implemented");
        };
        return Releasable2;
      }()
    );
    exports.Releasable = Releasable;
    var ConnectionProvider = (
      /** @class */
      function() {
        function ConnectionProvider2() {
        }
        ConnectionProvider2.prototype.acquireConnection = function(param) {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.supportsMultiDb = function() {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.supportsTransactionConfig = function() {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.supportsUserImpersonation = function() {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.supportsSessionAuth = function() {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.SSREnabled = function() {
          return false;
        };
        ConnectionProvider2.prototype.verifyConnectivityAndGetServerInfo = function(param) {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.verifyAuthentication = function(param) {
          throw Error("Not implemented");
        };
        ConnectionProvider2.prototype.getNegotiatedProtocolVersion = function() {
          throw Error("Not Implemented");
        };
        ConnectionProvider2.prototype.close = function() {
          throw Error("Not implemented");
        };
        return ConnectionProvider2;
      }()
    );
    exports.default = ConnectionProvider;
  }
});

// node_modules/neo4j-driver-core/lib/connection.js
var require_connection = __commonJS({
  "node_modules/neo4j-driver-core/lib/connection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Connection = (
      /** @class */
      function() {
        function Connection2() {
        }
        Connection2.prototype.beginTransaction = function(config) {
          throw new Error("Not implemented");
        };
        Connection2.prototype.run = function(query, parameters, config) {
          throw new Error("Not implemented");
        };
        Connection2.prototype.commitTransaction = function(config) {
          throw new Error("Not implemented");
        };
        Connection2.prototype.rollbackTransaction = function(config) {
          throw new Error("Not implemented");
        };
        Connection2.prototype.resetAndFlush = function() {
          throw new Error("Not implemented");
        };
        Connection2.prototype.isOpen = function() {
          throw new Error("Not implemented");
        };
        Connection2.prototype.getProtocolVersion = function() {
          throw new Error("Not implemented");
        };
        Connection2.prototype.hasOngoingObservableRequests = function() {
          throw new Error("Not implemented");
        };
        return Connection2;
      }()
    );
    exports.default = Connection;
  }
});

// node_modules/neo4j-driver-core/lib/transaction.js
var require_transaction = __commonJS({
  "node_modules/neo4j-driver-core/lib/transaction.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var connection_holder_1 = require_connection_holder();
    var bookmarks_1 = require_bookmarks();
    var tx_config_1 = require_tx_config();
    var observers_1 = require_observers();
    var error_1 = require_error();
    var result_1 = __importDefault(require_result());
    var Transaction = (
      /** @class */
      function() {
        function Transaction2(_a) {
          var connectionHolder = _a.connectionHolder, onClose = _a.onClose, onBookmarks = _a.onBookmarks, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, notificationFilter = _a.notificationFilter, apiTelemetryConfig = _a.apiTelemetryConfig;
          var _this = this;
          this._connectionHolder = connectionHolder;
          this._reactive = reactive;
          this._state = _states.ACTIVE;
          this._onClose = onClose;
          this._onBookmarks = onBookmarks;
          this._onConnection = onConnection;
          this._onError = this._onErrorCallback.bind(this);
          this._fetchSize = fetchSize;
          this._onComplete = this._onCompleteCallback.bind(this);
          this._results = [];
          this._impersonatedUser = impersonatedUser;
          this._lowRecordWatermak = lowRecordWatermark;
          this._highRecordWatermark = highRecordWatermark;
          this._bookmarks = bookmarks_1.Bookmarks.empty();
          this._notificationFilter = notificationFilter;
          this._apiTelemetryConfig = apiTelemetryConfig;
          this._acceptActive = function() {
          };
          this._activePromise = new Promise(function(resolve, reject) {
            _this._acceptActive = resolve;
          });
        }
        Transaction2.prototype._begin = function(getBookmarks, txConfig, events) {
          var _this = this;
          this._connectionHolder.getConnection().then(function(connection) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a;
              var _this2 = this;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    this._onConnection();
                    if (!(connection != null)) return [3, 2];
                    _a = this;
                    return [4, getBookmarks()];
                  case 1:
                    _a._bookmarks = _b.sent();
                    return [2, connection.beginTransaction({
                      bookmarks: this._bookmarks,
                      txConfig,
                      mode: this._connectionHolder.mode(),
                      database: this._connectionHolder.database(),
                      impersonatedUser: this._impersonatedUser,
                      notificationFilter: this._notificationFilter,
                      apiTelemetryConfig: this._apiTelemetryConfig,
                      beforeError: function(error) {
                        if (events != null) {
                          events.onError(error);
                        }
                        _this2._onError(error).catch(function() {
                        });
                      },
                      afterComplete: function(metadata) {
                        if (events != null) {
                          events.onComplete(metadata);
                        }
                        if (metadata.db !== void 0 && (events === null || events === void 0 ? void 0 : events.onDB) != null) {
                          events.onDB(metadata.db);
                        }
                        _this2._onComplete(metadata);
                      }
                    })];
                  case 2:
                    throw (0, error_1.newError)("No connection available");
                }
              });
            });
          }).catch(function(error) {
            if (events != null) {
              events.onError(error);
            }
            _this._onError(error).catch(function() {
            });
          }).finally(function() {
            return _this._acceptActive();
          });
        };
        Transaction2.prototype.run = function(query, parameters) {
          var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;
          var result = this._state.run(validatedQuery, params, {
            connectionHolder: this._connectionHolder,
            onError: this._onError,
            onComplete: this._onComplete,
            onConnection: this._onConnection,
            reactive: this._reactive,
            fetchSize: this._fetchSize,
            highRecordWatermark: this._highRecordWatermark,
            lowRecordWatermark: this._lowRecordWatermak,
            preparationJob: this._activePromise
          });
          this._results.push(result);
          return result;
        };
        Transaction2.prototype.commit = function() {
          var _this = this;
          var committed = this._state.commit({
            connectionHolder: this._connectionHolder,
            onError: this._onError,
            onComplete: function(meta) {
              return _this._onCompleteCallback(meta, _this._bookmarks);
            },
            onConnection: this._onConnection,
            pendingResults: this._results,
            preparationJob: this._activePromise
          });
          this._state = committed.state;
          this._onClose();
          return new Promise(function(resolve, reject) {
            committed.result.subscribe({
              onCompleted: function() {
                return resolve();
              },
              onError: function(error) {
                return reject(error);
              }
            });
          });
        };
        Transaction2.prototype.rollback = function() {
          var rolledback = this._state.rollback({
            connectionHolder: this._connectionHolder,
            onError: this._onError,
            onComplete: this._onComplete,
            onConnection: this._onConnection,
            pendingResults: this._results,
            preparationJob: this._activePromise
          });
          this._state = rolledback.state;
          this._onClose();
          return new Promise(function(resolve, reject) {
            rolledback.result.subscribe({
              onCompleted: function() {
                return resolve();
              },
              onError: function(error) {
                return reject(error);
              }
            });
          });
        };
        Transaction2.prototype.isOpen = function() {
          return this._state === _states.ACTIVE;
        };
        Transaction2.prototype.close = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.isOpen()) return [3, 2];
                  return [4, this.rollback()];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Transaction2.prototype[Symbol.asyncDispose] = function() {
          return this.close();
        };
        Transaction2.prototype._onErrorCallback = function(error) {
          if (this._state === _states.FAILED) {
            return Promise.resolve(null);
          }
          this._state = _states.FAILED;
          this._onClose();
          this._results.forEach(function(result) {
            if (result.isOpen()) {
              result._streamObserverPromise.then(function(resultStreamObserver) {
                return resultStreamObserver.onError(error);
              }).catch(function(_) {
              });
            }
          });
          return this._connectionHolder.releaseConnection();
        };
        Transaction2.prototype._onCompleteCallback = function(meta, previousBookmarks) {
          this._onBookmarks(new bookmarks_1.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);
        };
        return Transaction2;
      }()
    );
    var _states = {
      // The transaction is running with no explicit success or failure marked
      ACTIVE: {
        commit: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;
          return {
            result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),
            state: _states.SUCCEEDED
          };
        },
        rollback: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;
          return {
            result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),
            state: _states.ROLLED_BACK
          };
        },
        run: function(query, parameters, _a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, preparationJob = _a.preparationJob;
          var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();
          var observerPromise = connectionHolder.getConnection().then(function(conn) {
            return requirements.then(function() {
              return conn;
            });
          }).then(function(conn) {
            onConnection();
            if (conn != null) {
              return conn.run(query, parameters, {
                bookmarks: bookmarks_1.Bookmarks.empty(),
                txConfig: tx_config_1.TxConfig.empty(),
                beforeError: onError,
                afterComplete: onComplete,
                reactive,
                fetchSize,
                highRecordWatermark,
                lowRecordWatermark
              });
            } else {
              throw (0, error_1.newError)("No connection available");
            }
          }).catch(function(error) {
            return new observers_1.FailedObserver({ error, onError });
          });
          return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);
        }
      },
      // An error has occurred, transaction can no longer be used and no more messages will
      // be sent for this transaction.
      FAILED: {
        commit: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return {
            result: newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)("Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination."),
                onError
              }),
              "COMMIT",
              {},
              connectionHolder,
              0,
              // high watermark
              0
              // low watermark
            ),
            state: _states.FAILED
          };
        },
        rollback: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return {
            result: newCompletedResult(
              new observers_1.CompletedObserver(),
              "ROLLBACK",
              {},
              connectionHolder,
              0,
              // high watermark
              0
              // low watermark
            ),
            state: _states.FAILED
          };
        },
        run: function(query, parameters, _a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return newCompletedResult(
            new observers_1.FailedObserver({
              error: (0, error_1.newError)("Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination."),
              onError
            }),
            query,
            parameters,
            connectionHolder,
            0,
            // high watermark
            0
            // low watermark
          );
        }
      },
      // This transaction has successfully committed
      SUCCEEDED: {
        commit: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return {
            result: newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)("Cannot commit this transaction, because it has already been committed."),
                onError
              }),
              "COMMIT",
              {},
              connection_holder_1.EMPTY_CONNECTION_HOLDER,
              0,
              // high watermark
              0
              // low watermark
            ),
            state: _states.SUCCEEDED,
            connectionHolder
          };
        },
        rollback: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return {
            result: newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)("Cannot rollback this transaction, because it has already been committed."),
                onError
              }),
              "ROLLBACK",
              {},
              connection_holder_1.EMPTY_CONNECTION_HOLDER,
              0,
              // high watermark
              0
              // low watermark
            ),
            state: _states.SUCCEEDED,
            connectionHolder
          };
        },
        run: function(query, parameters, _a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return newCompletedResult(
            new observers_1.FailedObserver({
              error: (0, error_1.newError)("Cannot run query in this transaction, because it has already been committed."),
              onError
            }),
            query,
            parameters,
            connectionHolder,
            0,
            // high watermark
            0
            // low watermark
          );
        }
      },
      // This transaction has been rolled back
      ROLLED_BACK: {
        commit: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return {
            result: newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)("Cannot commit this transaction, because it has already been rolled back."),
                onError
              }),
              "COMMIT",
              {},
              connectionHolder,
              0,
              // high watermark
              0
              // low watermark
            ),
            state: _states.ROLLED_BACK
          };
        },
        rollback: function(_a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return {
            result: newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)("Cannot rollback this transaction, because it has already been rolled back.")
              }),
              "ROLLBACK",
              {},
              connectionHolder,
              0,
              // high watermark
              0
              // low watermark
            ),
            state: _states.ROLLED_BACK
          };
        },
        run: function(query, parameters, _a) {
          var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;
          return newCompletedResult(
            new observers_1.FailedObserver({
              error: (0, error_1.newError)("Cannot run query in this transaction, because it has already been rolled back."),
              onError
            }),
            query,
            parameters,
            connectionHolder,
            0,
            // high watermark
            0
            // low watermark
          );
        }
      }
    };
    function finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {
      var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();
      var observerPromise = connectionHolder.getConnection().then(function(conn) {
        return requirements.then(function() {
          return conn;
        });
      }).then(function(connection) {
        onConnection();
        pendingResults.forEach(function(r) {
          return r._cancel();
        });
        return Promise.all(pendingResults.map(function(result) {
          return result.summary();
        })).then(function(results) {
          if (connection != null) {
            if (commit) {
              return connection.commitTransaction({
                beforeError: onError,
                afterComplete: onComplete
              });
            } else {
              return connection.rollbackTransaction({
                beforeError: onError,
                afterComplete: onComplete
              });
            }
          } else {
            throw (0, error_1.newError)("No connection available");
          }
        });
      }).catch(function(error) {
        return new observers_1.FailedObserver({ error, onError });
      });
      return new result_1.default(observerPromise, commit ? "COMMIT" : "ROLLBACK", {}, connectionHolder, {
        high: Number.MAX_VALUE,
        low: Number.MAX_VALUE
      });
    }
    function newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {
      if (connectionHolder === void 0) {
        connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER;
      }
      return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1.EMPTY_CONNECTION_HOLDER), {
        low: lowRecordWatermark,
        high: highRecordWatermark
      });
    }
    exports.default = Transaction;
  }
});

// node_modules/neo4j-driver-core/lib/transaction-managed.js
var require_transaction_managed = __commonJS({
  "node_modules/neo4j-driver-core/lib/transaction-managed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ManagedTransaction = (
      /** @class */
      function() {
        function ManagedTransaction2(_a) {
          var run = _a.run;
          this._run = run;
        }
        ManagedTransaction2.fromTransaction = function(tx) {
          return new ManagedTransaction2({
            run: tx.run.bind(tx)
          });
        };
        ManagedTransaction2.prototype.run = function(query, parameters) {
          return this._run(query, parameters);
        };
        return ManagedTransaction2;
      }()
    );
    exports.default = ManagedTransaction;
  }
});

// node_modules/neo4j-driver-core/lib/transaction-promise.js
var require_transaction_promise = __commonJS({
  "node_modules/neo4j-driver-core/lib/transaction-promise.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    var transaction_1 = __importDefault(require_transaction());
    var TransactionPromise = (
      /** @class */
      function(_super) {
        __extends(TransactionPromise2, _super);
        function TransactionPromise2(_b) {
          var connectionHolder = _b.connectionHolder, onClose = _b.onClose, onBookmarks = _b.onBookmarks, onConnection = _b.onConnection, reactive = _b.reactive, fetchSize = _b.fetchSize, impersonatedUser = _b.impersonatedUser, highRecordWatermark = _b.highRecordWatermark, lowRecordWatermark = _b.lowRecordWatermark, notificationFilter = _b.notificationFilter, apiTelemetryConfig = _b.apiTelemetryConfig, onDbCallback = _b.onDbCallback;
          var _this = _super.call(this, {
            connectionHolder,
            onClose,
            onBookmarks,
            onConnection,
            reactive,
            fetchSize,
            impersonatedUser,
            highRecordWatermark,
            lowRecordWatermark,
            notificationFilter,
            apiTelemetryConfig
          }) || this;
          _this[_a] = "TransactionPromise";
          _this._onDbCallback = onDbCallback;
          return _this;
        }
        TransactionPromise2.prototype.then = function(onfulfilled, onrejected) {
          return this._getOrCreateBeginPromise().then(onfulfilled, onrejected);
        };
        TransactionPromise2.prototype.catch = function(onrejected) {
          return this._getOrCreateBeginPromise().catch(onrejected);
        };
        TransactionPromise2.prototype.finally = function(onfinally) {
          return this._getOrCreateBeginPromise().finally(onfinally);
        };
        TransactionPromise2.prototype._getOrCreateBeginPromise = function() {
          var _this = this;
          if (this._beginPromise == null) {
            this._beginPromise = new Promise(function(resolve, reject) {
              _this._resolve = resolve;
              _this._reject = reject;
              if (_this._beginError != null) {
                reject(_this._beginError);
              }
              if (_this._beginMetadata != null) {
                resolve(_this._toTransaction());
              }
            });
          }
          return this._beginPromise;
        };
        TransactionPromise2.prototype._toTransaction = function() {
          return __assign(__assign({}, this), { run: _super.prototype.run.bind(this), commit: _super.prototype.commit.bind(this), rollback: _super.prototype.rollback.bind(this), close: _super.prototype.close.bind(this), isOpen: _super.prototype.isOpen.bind(this), _begin: this._begin.bind(this) });
        };
        TransactionPromise2.prototype._begin = function(bookmarks, txConfig) {
          return _super.prototype._begin.call(this, bookmarks, txConfig, {
            onError: this._onBeginError.bind(this),
            onComplete: this._onBeginMetadata.bind(this),
            onDB: this._onDbCallback
          });
        };
        TransactionPromise2.prototype._onBeginError = function(error) {
          this._beginError = error;
          if (this._reject != null) {
            this._reject(error);
          }
        };
        TransactionPromise2.prototype._onBeginMetadata = function(metadata) {
          this._beginMetadata = metadata !== null && metadata !== void 0 ? metadata : {};
          if (this._resolve != null) {
            this._resolve(this._toTransaction());
          }
        };
        return TransactionPromise2;
      }(transaction_1.default)
    );
    _a = Symbol.toStringTag;
    exports.default = TransactionPromise;
  }
});

// node_modules/neo4j-driver-core/lib/internal/auth-util.js
var require_auth_util = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/auth-util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cacheKey = void 0;
    var json_1 = require_json();
    function cacheKey(auth, impersonatedUser) {
      var _a;
      if (impersonatedUser != null) {
        return "basic:" + impersonatedUser;
      }
      if (auth === void 0) {
        return "DEFAULT";
      }
      if (auth.scheme === "basic") {
        return "basic:" + ((_a = auth.principal) !== null && _a !== void 0 ? _a : "");
      }
      if (auth.scheme === "kerberos") {
        return "kerberos:" + auth.credentials;
      }
      if (auth.scheme === "bearer") {
        return "bearer:" + auth.credentials;
      }
      if (auth.scheme === "none") {
        return "none";
      }
      return (0, json_1.stringify)(auth, { sortedElements: true });
    }
    exports.cacheKey = cacheKey;
  }
});

// node_modules/neo4j-driver-core/lib/session.js
var require_session = __commonJS({
  "node_modules/neo4j-driver-core/lib/session.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var observers_1 = require_observers();
    var util_1 = require_util();
    var constants_1 = require_constants();
    var error_1 = require_error();
    var result_1 = __importDefault(require_result());
    var connection_holder_1 = require_connection_holder();
    var transaction_executor_1 = require_transaction_executor();
    var bookmarks_1 = require_bookmarks();
    var tx_config_1 = require_tx_config();
    var transaction_promise_1 = __importDefault(require_transaction_promise());
    var transaction_managed_1 = __importDefault(require_transaction_managed());
    var auth_util_1 = require_auth_util();
    var Session = (
      /** @class */
      function() {
        function Session2(_a) {
          var mode = _a.mode, connectionProvider = _a.connectionProvider, bookmarks = _a.bookmarks, database = _a.database, config = _a.config, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, bookmarkManager = _a.bookmarkManager, notificationFilter = _a.notificationFilter, auth = _a.auth, log = _a.log, homeDatabaseCallback = _a.homeDatabaseCallback;
          var _b;
          this._mode = mode;
          this._database = database;
          this._reactive = reactive;
          this._fetchSize = fetchSize;
          this._homeDatabaseCallback = homeDatabaseCallback;
          this._auth = auth;
          this._getConnectionAcquistionBookmarks = this._getConnectionAcquistionBookmarks.bind(this);
          this._readConnectionHolder = new connection_holder_1.ConnectionHolder({
            mode: constants_1.ACCESS_MODE_READ,
            auth,
            database,
            bookmarks,
            connectionProvider,
            impersonatedUser,
            onDatabaseNameResolved: this._onDatabaseNameResolved.bind(this),
            getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks,
            log
          });
          this._writeConnectionHolder = new connection_holder_1.ConnectionHolder({
            mode: constants_1.ACCESS_MODE_WRITE,
            auth,
            database,
            bookmarks,
            connectionProvider,
            impersonatedUser,
            onDatabaseNameResolved: this._onDatabaseNameResolved.bind(this),
            getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks,
            log
          });
          this._open = true;
          this._hasTx = false;
          this._impersonatedUser = impersonatedUser;
          this._lastBookmarks = bookmarks !== null && bookmarks !== void 0 ? bookmarks : bookmarks_1.Bookmarks.empty();
          this._configuredBookmarks = this._lastBookmarks;
          this._transactionExecutor = _createTransactionExecutor(config);
          this._databaseNameResolved = this._database !== "";
          var calculatedWatermaks = this._calculateWatermaks();
          this._lowRecordWatermark = calculatedWatermaks.low;
          this._highRecordWatermark = calculatedWatermaks.high;
          this._results = [];
          this._bookmarkManager = bookmarkManager;
          this._notificationFilter = notificationFilter;
          this._log = log;
          this._databaseGuess = config === null || config === void 0 ? void 0 : config.cachedHomeDatabase;
          this._isRoutingSession = (_b = config === null || config === void 0 ? void 0 : config.routingDriver) !== null && _b !== void 0 ? _b : false;
        }
        Session2.prototype.run = function(query, parameters, transactionConfig) {
          var _this = this;
          var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;
          var autoCommitTxConfig = transactionConfig != null ? new tx_config_1.TxConfig(transactionConfig, this._log) : tx_config_1.TxConfig.empty();
          var result = this._run(validatedQuery, params, function(connection) {
            return __awaiter(_this, void 0, void 0, function() {
              var bookmarks;
              var _this2 = this;
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, this._bookmarks()];
                  case 1:
                    bookmarks = _a2.sent();
                    this._assertSessionIsOpen();
                    return [2, connection.run(validatedQuery, params, {
                      bookmarks,
                      txConfig: autoCommitTxConfig,
                      mode: this._mode,
                      database: this._database,
                      apiTelemetryConfig: {
                        api: constants_1.TELEMETRY_APIS.AUTO_COMMIT_TRANSACTION
                      },
                      impersonatedUser: this._impersonatedUser,
                      afterComplete: function(meta) {
                        return _this2._onCompleteCallback(meta, bookmarks);
                      },
                      reactive: this._reactive,
                      fetchSize: this._fetchSize,
                      lowRecordWatermark: this._lowRecordWatermark,
                      highRecordWatermark: this._highRecordWatermark,
                      notificationFilter: this._notificationFilter,
                      onDb: this._onDatabaseNameResolved.bind(this)
                    })];
                }
              });
            });
          });
          this._results.push(result);
          return result;
        };
        Session2.prototype._run = function(query, parameters, customRunner) {
          var _a = this._acquireAndConsumeConnection(customRunner), connectionHolder = _a.connectionHolder, resultPromise = _a.resultPromise;
          var observerPromise = resultPromise.catch(function(error) {
            return Promise.resolve(new observers_1.FailedObserver({ error }));
          });
          var watermarks = { high: this._highRecordWatermark, low: this._lowRecordWatermark };
          return new result_1.default(observerPromise, query, parameters, connectionHolder, watermarks);
        };
        Session2.prototype._acquireConnection = function(connectionConsumer) {
          var _this = this;
          var _a = this._acquireAndConsumeConnection(connectionConsumer), connectionHolder = _a.connectionHolder, resultPromise = _a.resultPromise;
          return resultPromise.then(function(result) {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, connectionHolder.releaseConnection()];
                  case 1:
                    _a2.sent();
                    return [2, result];
                }
              });
            });
          });
        };
        Session2.prototype._acquireAndConsumeConnection = function(connectionConsumer) {
          var resultPromise;
          var connectionHolder = this._connectionHolderWithMode(this._mode);
          if (!this._open) {
            resultPromise = Promise.reject((0, error_1.newError)("Cannot run query in a closed session."));
          } else if (!this._hasTx && connectionHolder.initializeConnection(this._databaseGuess)) {
            resultPromise = connectionHolder.getConnection().then(function(connection) {
              return connectionConsumer(connection);
            });
          } else {
            resultPromise = Promise.reject((0, error_1.newError)("Queries cannot be run directly on a session with an open transaction; either run from within the transaction or use a different session."));
          }
          return { connectionHolder, resultPromise };
        };
        Session2.prototype.beginTransaction = function(transactionConfig) {
          var arg = transactionConfig;
          var txConfig = tx_config_1.TxConfig.empty();
          if (arg != null) {
            txConfig = new tx_config_1.TxConfig(arg, this._log);
          }
          return this._beginTransaction(this._mode, txConfig, { api: constants_1.TELEMETRY_APIS.UNMANAGED_TRANSACTION });
        };
        Session2.prototype._beginTransaction = function(accessMode, txConfig, apiTelemetryConfig) {
          var _this = this;
          if (!this._open) {
            throw (0, error_1.newError)("Cannot begin a transaction on a closed session.");
          }
          if (this._hasTx) {
            throw (0, error_1.newError)("You cannot begin a transaction on a session with an open transaction; either run from within the transaction or use a different session.");
          }
          var mode = Session2._validateSessionMode(accessMode);
          var connectionHolder = this._connectionHolderWithMode(mode);
          connectionHolder.initializeConnection(this._databaseGuess);
          this._hasTx = true;
          var tx = new transaction_promise_1.default({
            connectionHolder,
            impersonatedUser: this._impersonatedUser,
            onClose: this._transactionClosed.bind(this),
            onBookmarks: function(newBm, oldBm, db) {
              return _this._updateBookmarks(newBm, oldBm, db);
            },
            onConnection: this._assertSessionIsOpen.bind(this),
            reactive: this._reactive,
            fetchSize: this._fetchSize,
            lowRecordWatermark: this._lowRecordWatermark,
            highRecordWatermark: this._highRecordWatermark,
            notificationFilter: this._notificationFilter,
            apiTelemetryConfig,
            onDbCallback: this._onDatabaseNameResolved.bind(this)
          });
          tx._begin(function() {
            return _this._bookmarks();
          }, txConfig);
          return tx;
        };
        Session2.prototype._assertSessionIsOpen = function() {
          if (!this._open) {
            throw (0, error_1.newError)("You cannot run more transactions on a closed session.");
          }
        };
        Session2.prototype._transactionClosed = function() {
          this._hasTx = false;
        };
        Session2.prototype.lastBookmark = function() {
          return this.lastBookmarks();
        };
        Session2.prototype.lastBookmarks = function() {
          return this._lastBookmarks.values();
        };
        Session2.prototype._bookmarks = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var bookmarks;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, (_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.getBookmarks()];
                case 1:
                  bookmarks = _b.sent();
                  if (bookmarks === void 0) {
                    return [2, this._lastBookmarks];
                  }
                  return [2, new bookmarks_1.Bookmarks(__spreadArray(__spreadArray([], __read(bookmarks), false), __read(this._configuredBookmarks), false))];
              }
            });
          });
        };
        Session2.prototype.readTransaction = function(transactionWork, transactionConfig) {
          var config = new tx_config_1.TxConfig(transactionConfig, this._log);
          return this._runTransaction(constants_1.ACCESS_MODE_READ, config, transactionWork);
        };
        Session2.prototype.writeTransaction = function(transactionWork, transactionConfig) {
          var config = new tx_config_1.TxConfig(transactionConfig, this._log);
          return this._runTransaction(constants_1.ACCESS_MODE_WRITE, config, transactionWork);
        };
        Session2.prototype._runTransaction = function(accessMode, transactionConfig, transactionWork) {
          var _this = this;
          return this._transactionExecutor.execute(function(apiTelemetryConfig) {
            return _this._beginTransaction(accessMode, transactionConfig, apiTelemetryConfig);
          }, transactionWork);
        };
        Session2.prototype.executeRead = function(transactionWork, transactionConfig) {
          var config = new tx_config_1.TxConfig(transactionConfig, this._log);
          return this._executeInTransaction(constants_1.ACCESS_MODE_READ, config, transactionWork);
        };
        Session2.prototype.executeWrite = function(transactionWork, transactionConfig) {
          var config = new tx_config_1.TxConfig(transactionConfig, this._log);
          return this._executeInTransaction(constants_1.ACCESS_MODE_WRITE, config, transactionWork);
        };
        Session2.prototype._executeInTransaction = function(accessMode, transactionConfig, transactionWork) {
          var _this = this;
          return this._transactionExecutor.execute(function(apiTelemetryConfig) {
            return _this._beginTransaction(accessMode, transactionConfig, apiTelemetryConfig);
          }, transactionWork, transaction_managed_1.default.fromTransaction);
        };
        Session2.prototype._onDatabaseNameResolved = function(database) {
          if (this._isRoutingSession) {
            this._databaseGuess = database;
            if (!this._databaseNameResolved) {
              var normalizedDatabase = database !== null && database !== void 0 ? database : "";
              this._database = normalizedDatabase;
              this._readConnectionHolder.setDatabase(normalizedDatabase);
              this._writeConnectionHolder.setDatabase(normalizedDatabase);
              this._databaseNameResolved = true;
              if (this._homeDatabaseCallback != null) {
                this._homeDatabaseCallback((0, auth_util_1.cacheKey)(this._auth, this._impersonatedUser), database);
              }
            }
          }
        };
        Session2.prototype._getConnectionAcquistionBookmarks = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var bookmarks;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, (_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.getBookmarks()];
                case 1:
                  bookmarks = _b.sent();
                  if (bookmarks === void 0) {
                    return [2, this._lastBookmarks];
                  }
                  return [2, new bookmarks_1.Bookmarks(__spreadArray(__spreadArray([], __read(this._configuredBookmarks), false), __read(bookmarks), false))];
              }
            });
          });
        };
        Session2.prototype._updateBookmarks = function(newBookmarks, previousBookmarks, database) {
          var _a, _b, _c;
          if (newBookmarks != null && !newBookmarks.isEmpty()) {
            (_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.updateBookmarks((_b = previousBookmarks === null || previousBookmarks === void 0 ? void 0 : previousBookmarks.values()) !== null && _b !== void 0 ? _b : [], (_c = newBookmarks === null || newBookmarks === void 0 ? void 0 : newBookmarks.values()) !== null && _c !== void 0 ? _c : []).catch(function() {
            });
            this._lastBookmarks = newBookmarks;
            this._configuredBookmarks = bookmarks_1.Bookmarks.empty();
          }
        };
        Session2.prototype.close = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this._open) return [3, 3];
                  this._open = false;
                  this._results.forEach(function(result) {
                    return result._cancel();
                  });
                  this._transactionExecutor.close();
                  return [4, this._readConnectionHolder.close(this._hasTx)];
                case 1:
                  _a.sent();
                  return [4, this._writeConnectionHolder.close(this._hasTx)];
                case 2:
                  _a.sent();
                  _a.label = 3;
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Session2.prototype[Symbol.asyncDispose] = function() {
          return this.close();
        };
        Session2.prototype._connectionHolderWithMode = function(mode) {
          if (mode === constants_1.ACCESS_MODE_READ) {
            return this._readConnectionHolder;
          } else if (mode === constants_1.ACCESS_MODE_WRITE) {
            return this._writeConnectionHolder;
          } else {
            throw (0, error_1.newError)("Unknown access mode: " + mode);
          }
        };
        Session2.prototype._onCompleteCallback = function(meta, previousBookmarks) {
          this._updateBookmarks(new bookmarks_1.Bookmarks(meta.bookmark), previousBookmarks, meta.db);
        };
        Session2.prototype._calculateWatermaks = function() {
          if (this._fetchSize === constants_1.FETCH_ALL) {
            return {
              low: Number.MAX_VALUE,
              high: Number.MAX_VALUE
              // we shall never reach this number to disable auto pull
            };
          }
          return {
            low: 0.3 * this._fetchSize,
            high: 0.7 * this._fetchSize
          };
        };
        Session2.prototype._configureTransactionExecutor = function(pipelined, telemetryApi) {
          this._transactionExecutor.pipelineBegin = pipelined;
          this._transactionExecutor.telemetryApi = telemetryApi;
        };
        Session2._validateSessionMode = function(rawMode) {
          var mode = rawMode !== null && rawMode !== void 0 ? rawMode : constants_1.ACCESS_MODE_WRITE;
          if (mode !== constants_1.ACCESS_MODE_READ && mode !== constants_1.ACCESS_MODE_WRITE) {
            throw (0, error_1.newError)("Illegal session mode " + mode);
          }
          return mode;
        };
        return Session2;
      }()
    );
    function _createTransactionExecutor(config) {
      var _a;
      var maxRetryTimeMs = (_a = config === null || config === void 0 ? void 0 : config.maxTransactionRetryTime) !== null && _a !== void 0 ? _a : null;
      return new transaction_executor_1.TransactionExecutor(maxRetryTimeMs);
    }
    exports.default = Session;
  }
});

// node_modules/neo4j-driver-core/lib/bookmark-manager.js
var require_bookmark_manager = __commonJS({
  "node_modules/neo4j-driver-core/lib/bookmark-manager.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bookmarkManager = void 0;
    var BookmarkManager = (
      /** @class */
      function() {
        function BookmarkManager2() {
          throw new Error("Not implemented");
        }
        BookmarkManager2.prototype.updateBookmarks = function(previousBookmarks, newBookmarks) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              throw new Error("Not implemented");
            });
          });
        };
        BookmarkManager2.prototype.getBookmarks = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              throw new Error("Not implemented");
            });
          });
        };
        return BookmarkManager2;
      }()
    );
    exports.default = BookmarkManager;
    function bookmarkManager(config) {
      if (config === void 0) {
        config = {};
      }
      var initialBookmarks = new Set(config.initialBookmarks);
      return new Neo4jBookmarkManager(initialBookmarks, config.bookmarksSupplier, config.bookmarksConsumer);
    }
    exports.bookmarkManager = bookmarkManager;
    var Neo4jBookmarkManager = (
      /** @class */
      function() {
        function Neo4jBookmarkManager2(_bookmarks, _bookmarksSupplier, _bookmarksConsumer) {
          this._bookmarks = _bookmarks;
          this._bookmarksSupplier = _bookmarksSupplier;
          this._bookmarksConsumer = _bookmarksConsumer;
        }
        Neo4jBookmarkManager2.prototype.updateBookmarks = function(previousBookmarks, newBookmarks) {
          return __awaiter(this, void 0, void 0, function() {
            var bookmarks, previousBookmarks_1, previousBookmarks_1_1, bm, newBookmarks_1, newBookmarks_1_1, bm;
            var e_1, _a, e_2, _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  bookmarks = this._bookmarks;
                  try {
                    for (previousBookmarks_1 = __values(previousBookmarks), previousBookmarks_1_1 = previousBookmarks_1.next(); !previousBookmarks_1_1.done; previousBookmarks_1_1 = previousBookmarks_1.next()) {
                      bm = previousBookmarks_1_1.value;
                      bookmarks.delete(bm);
                    }
                  } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                  } finally {
                    try {
                      if (previousBookmarks_1_1 && !previousBookmarks_1_1.done && (_a = previousBookmarks_1.return)) _a.call(previousBookmarks_1);
                    } finally {
                      if (e_1) throw e_1.error;
                    }
                  }
                  try {
                    for (newBookmarks_1 = __values(newBookmarks), newBookmarks_1_1 = newBookmarks_1.next(); !newBookmarks_1_1.done; newBookmarks_1_1 = newBookmarks_1.next()) {
                      bm = newBookmarks_1_1.value;
                      bookmarks.add(bm);
                    }
                  } catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                  } finally {
                    try {
                      if (newBookmarks_1_1 && !newBookmarks_1_1.done && (_b = newBookmarks_1.return)) _b.call(newBookmarks_1);
                    } finally {
                      if (e_2) throw e_2.error;
                    }
                  }
                  if (!(typeof this._bookmarksConsumer === "function")) return [3, 2];
                  return [4, this._bookmarksConsumer(__spreadArray([], __read(bookmarks), false))];
                case 1:
                  _c.sent();
                  _c.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Neo4jBookmarkManager2.prototype.getBookmarks = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var bookmarks, suppliedBookmarks, suppliedBookmarks_1, suppliedBookmarks_1_1, bm;
            var e_3, _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  bookmarks = new Set(this._bookmarks);
                  if (!(typeof this._bookmarksSupplier === "function")) return [3, 2];
                  return [4, this._bookmarksSupplier()];
                case 1:
                  suppliedBookmarks = (_a = _c.sent()) !== null && _a !== void 0 ? _a : [];
                  try {
                    for (suppliedBookmarks_1 = __values(suppliedBookmarks), suppliedBookmarks_1_1 = suppliedBookmarks_1.next(); !suppliedBookmarks_1_1.done; suppliedBookmarks_1_1 = suppliedBookmarks_1.next()) {
                      bm = suppliedBookmarks_1_1.value;
                      bookmarks.add(bm);
                    }
                  } catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                  } finally {
                    try {
                      if (suppliedBookmarks_1_1 && !suppliedBookmarks_1_1.done && (_b = suppliedBookmarks_1.return)) _b.call(suppliedBookmarks_1);
                    } finally {
                      if (e_3) throw e_3.error;
                    }
                  }
                  _c.label = 2;
                case 2:
                  return [2, __spreadArray([], __read(bookmarks), false)];
              }
            });
          });
        };
        return Neo4jBookmarkManager2;
      }()
    );
  }
});

// node_modules/neo4j-driver-core/lib/result-transformers.js
var require_result_transformers = __commonJS({
  "node_modules/neo4j-driver-core/lib/result-transformers.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var result_eager_1 = __importDefault(require_result_eager());
    var error_1 = require_error();
    var ResultTransformers = (
      /** @class */
      function() {
        function ResultTransformers2() {
        }
        ResultTransformers2.prototype.eagerResultTransformer = function() {
          return createEagerResultFromResult;
        };
        ResultTransformers2.prototype.eager = function() {
          return createEagerResultFromResult;
        };
        ResultTransformers2.prototype.mappedResultTransformer = function(config) {
          return createMappedResultTransformer(config);
        };
        ResultTransformers2.prototype.mapped = function(config) {
          return createMappedResultTransformer(config);
        };
        ResultTransformers2.prototype.first = function() {
          return first;
        };
        ResultTransformers2.prototype.summary = function() {
          return summary;
        };
        return ResultTransformers2;
      }()
    );
    var resultTransformers = new ResultTransformers();
    Object.freeze(resultTransformers);
    exports.default = resultTransformers;
    function createEagerResultFromResult(result) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, summary2, records, keys;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, result];
            case 1:
              _a = _b.sent(), summary2 = _a.summary, records = _a.records;
              return [4, result.keys()];
            case 2:
              keys = _b.sent();
              return [2, new result_eager_1.default(keys, records, summary2)];
          }
        });
      });
    }
    function createMappedResultTransformer(config) {
      var _this = this;
      if (config == null || config.collect == null && config.map == null) {
        throw (0, error_1.newError)("Requires a map or/and a collect functions.");
      }
      return function(result) {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, new Promise(function(resolve, reject) {
                  var state = { records: [], keys: [] };
                  result.subscribe({
                    onKeys: function(keys) {
                      state.keys = keys;
                    },
                    onNext: function(record) {
                      if (config.map != null) {
                        var mappedRecord = config.map(record);
                        if (mappedRecord !== void 0) {
                          state.records.push(mappedRecord);
                        }
                      } else {
                        state.records.push(record);
                      }
                    },
                    onCompleted: function(summary2) {
                      if (config.collect != null) {
                        resolve(config.collect(state.records, summary2, state.keys));
                      } else {
                        var obj = { records: state.records, summary: summary2, keys: state.keys };
                        resolve(obj);
                      }
                    },
                    onError: function(error) {
                      reject(error);
                    }
                  });
                })];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };
    }
    function first(result) {
      return __awaiter(this, void 0, void 0, function() {
        var it, _a, value, done;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              it = result[Symbol.asyncIterator]();
              return [4, it.next()];
            case 1:
              _a = _b.sent(), value = _a.value, done = _a.done;
              _b.label = 2;
            case 2:
              _b.trys.push([2, , 3, 6]);
              if (done === true) {
                return [2, void 0];
              }
              return [2, value];
            case 3:
              if (!(it.return != null)) return [3, 5];
              return [4, it.return()];
            case 4:
              _b.sent();
              _b.label = 5;
            case 5:
              return [
                7
                /*endfinally*/
              ];
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    function summary(result) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, result.summary()];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/query-executor.js
var require_query_executor = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/query-executor.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var QueryExecutor = (
      /** @class */
      function() {
        function QueryExecutor2(_createSession) {
          this._createSession = _createSession;
        }
        QueryExecutor2.prototype.execute = function(config, query, parameters) {
          return __awaiter(this, void 0, void 0, function() {
            var session, listenerHandle, executeInTransaction;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  session = this._createSession({
                    database: config.database,
                    bookmarkManager: config.bookmarkManager,
                    impersonatedUser: config.impersonatedUser,
                    auth: config.auth
                  });
                  listenerHandle = installEventListenerWhenPossible(
                    // Solving linter and types definitions issue
                    config.signal,
                    "abort",
                    function() {
                      return __awaiter(_this, void 0, void 0, function() {
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, session.close()];
                            case 1:
                              return [2, _a2.sent()];
                          }
                        });
                      });
                    }
                  );
                  session._configureTransactionExecutor(true, constants_1.TELEMETRY_APIS.EXECUTE_QUERY);
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, , 3, 5]);
                  executeInTransaction = config.routing === "READ" ? session.executeRead.bind(session) : session.executeWrite.bind(session);
                  return [4, executeInTransaction(function(tx) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var result;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            result = tx.run(query, parameters);
                            return [4, config.resultTransformer(result)];
                          case 1:
                            return [2, _a2.sent()];
                        }
                      });
                    });
                  }, config.transactionConfig)];
                case 2:
                  return [2, _a.sent()];
                case 3:
                  listenerHandle.uninstall();
                  return [4, session.close()];
                case 4:
                  _a.sent();
                  return [
                    7
                    /*endfinally*/
                  ];
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return QueryExecutor2;
      }()
    );
    exports.default = QueryExecutor;
    function installEventListenerWhenPossible(target, event, listener) {
      if (typeof (target === null || target === void 0 ? void 0 : target.addEventListener) === "function") {
        target.addEventListener(event, listener);
      }
      return {
        uninstall: function() {
          if (typeof (target === null || target === void 0 ? void 0 : target.removeEventListener) === "function") {
            target.removeEventListener(event, listener);
          }
        }
      };
    }
  }
});

// node_modules/neo4j-driver-core/lib/internal/homedb-cache.js
var require_homedb_cache = __commonJS({
  "node_modules/neo4j-driver-core/lib/internal/homedb-cache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HomeDatabaseCache = (
      /** @class */
      function() {
        function HomeDatabaseCache2(maxSize) {
          this.maxSize = maxSize;
          this.pruneCount = Math.max(Math.round(0.01 * maxSize * Math.log(maxSize)), 1);
          this.map = /* @__PURE__ */ new Map();
        }
        HomeDatabaseCache2.prototype.set = function(user, database) {
          this.map.set(user, { database, lastUsed: Date.now() });
          this._pruneCache();
        };
        HomeDatabaseCache2.prototype.get = function(user) {
          var value = this.map.get(user);
          if (value !== void 0) {
            value.lastUsed = Date.now();
            return value.database;
          }
          return void 0;
        };
        HomeDatabaseCache2.prototype.delete = function(user) {
          this.map.delete(user);
        };
        HomeDatabaseCache2.prototype._pruneCache = function() {
          if (this.map.size > this.maxSize) {
            var sortedArray = Array.from(this.map.entries()).sort(function(a, b) {
              return a[1].lastUsed - b[1].lastUsed;
            });
            for (var i = 0; i < this.pruneCount; i++) {
              this.map.delete(sortedArray[i][0]);
            }
          }
        };
        return HomeDatabaseCache2;
      }()
    );
    exports.default = HomeDatabaseCache;
  }
});

// node_modules/neo4j-driver-core/lib/driver.js
var require_driver = __commonJS({
  "node_modules/neo4j-driver-core/lib/driver.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryConfig = exports.SessionConfig = exports.routing = exports.WRITE = exports.READ = exports.Driver = void 0;
    var bookmarks_1 = require_bookmarks();
    var configured_custom_resolver_1 = __importDefault(require_configured_custom_resolver());
    var constants_1 = require_constants();
    var logger_1 = require_logger();
    var session_1 = __importDefault(require_session());
    var util_1 = require_util();
    var bookmark_manager_1 = require_bookmark_manager();
    var result_transformers_1 = __importDefault(require_result_transformers());
    var query_executor_1 = __importDefault(require_query_executor());
    var error_1 = require_error();
    var homedb_cache_1 = __importDefault(require_homedb_cache());
    var auth_util_1 = require_auth_util();
    var DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1e3;
    var DEFAULT_FETCH_SIZE = 1e3;
    var HOMEDB_CACHE_MAX_SIZE = 1e4;
    var READ = constants_1.ACCESS_MODE_READ;
    exports.READ = READ;
    var WRITE = constants_1.ACCESS_MODE_WRITE;
    exports.WRITE = WRITE;
    var idGenerator = 0;
    var SessionConfig = (
      /** @class */
      /* @__PURE__ */ function() {
        function SessionConfig2() {
          this.defaultAccessMode = WRITE;
          this.bookmarks = [];
          this.database = "";
          this.impersonatedUser = void 0;
          this.auth = void 0;
          this.fetchSize = void 0;
          this.bookmarkManager = void 0;
          this.notificationFilter = void 0;
        }
        return SessionConfig2;
      }()
    );
    exports.SessionConfig = SessionConfig;
    var ROUTING_WRITE = "WRITE";
    var ROUTING_READ = "READ";
    var routing = {
      WRITE: ROUTING_WRITE,
      READ: ROUTING_READ
    };
    exports.routing = routing;
    Object.freeze(routing);
    var QueryConfig = (
      /** @class */
      /* @__PURE__ */ function() {
        function QueryConfig2() {
          this.routing = routing.WRITE;
          this.resultTransformer = void 0;
          this.database = "";
          this.impersonatedUser = void 0;
          this.bookmarkManager = void 0;
          this.transactionConfig = void 0;
          this.auth = void 0;
          this.signal = void 0;
        }
        return QueryConfig2;
      }()
    );
    exports.QueryConfig = QueryConfig;
    var Driver = (
      /** @class */
      function() {
        function Driver2(meta, config, createConnectionProvider, createSession, createQueryExecutor) {
          if (config === void 0) {
            config = {};
          }
          if (createSession === void 0) {
            createSession = function(args) {
              return new session_1.default(args);
            };
          }
          if (createQueryExecutor === void 0) {
            createQueryExecutor = function(createSession2) {
              return new query_executor_1.default(createSession2);
            };
          }
          sanitizeConfig(config);
          var log = logger_1.Logger.create(config);
          validateConfig(config, log);
          this._id = idGenerator++;
          this._meta = meta;
          this._config = config;
          this._log = log;
          this._createConnectionProvider = createConnectionProvider;
          this._createSession = createSession;
          this._defaultExecuteQueryBookmarkManager = (0, bookmark_manager_1.bookmarkManager)();
          this._queryExecutor = createQueryExecutor(this.session.bind(this));
          this._connectionProvider = null;
          this.homeDatabaseCache = new homedb_cache_1.default(HOMEDB_CACHE_MAX_SIZE);
          this._afterConstruction();
        }
        Object.defineProperty(Driver2.prototype, "executeQueryBookmarkManager", {
          /**
           * The bookmark managed used by {@link Driver.executeQuery}
           *
           * @type {BookmarkManager}
           */
          get: function() {
            return this._defaultExecuteQueryBookmarkManager;
          },
          enumerable: false,
          configurable: true
        });
        Driver2.prototype.executeQuery = function(query, parameters, config) {
          var _a, _b, _c;
          if (config === void 0) {
            config = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var bookmarkManager, resultTransformer, routingConfig;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  bookmarkManager = config.bookmarkManager === null ? void 0 : (_a = config.bookmarkManager) !== null && _a !== void 0 ? _a : this.executeQueryBookmarkManager;
                  resultTransformer = (_b = config.resultTransformer) !== null && _b !== void 0 ? _b : result_transformers_1.default.eagerResultTransformer();
                  routingConfig = (_c = config.routing) !== null && _c !== void 0 ? _c : routing.WRITE;
                  if (routingConfig !== routing.READ && routingConfig !== routing.WRITE) {
                    throw (0, error_1.newError)('Illegal query routing config: "'.concat(routingConfig, '"'));
                  }
                  return [4, this._queryExecutor.execute({
                    resultTransformer,
                    bookmarkManager,
                    routing: routingConfig,
                    database: config.database,
                    impersonatedUser: config.impersonatedUser,
                    transactionConfig: config.transactionConfig,
                    auth: config.auth,
                    signal: config.signal
                  }, query, parameters)];
                case 1:
                  return [2, _d.sent()];
              }
            });
          });
        };
        Driver2.prototype.verifyConnectivity = function(_a) {
          var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? "" : _c;
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.verifyConnectivityAndGetServerInfo({ database, accessMode: READ });
        };
        Driver2.prototype.verifyAuthentication = function(_a) {
          var _b = _a === void 0 ? {} : _a, database = _b.database, auth = _b.auth;
          return __awaiter(this, void 0, void 0, function() {
            var connectionProvider;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  connectionProvider = this._getOrCreateConnectionProvider();
                  return [4, connectionProvider.verifyAuthentication({
                    database: database !== null && database !== void 0 ? database : "system",
                    auth,
                    accessMode: READ
                  })];
                case 1:
                  return [2, _c.sent()];
              }
            });
          });
        };
        Driver2.prototype.getServerInfo = function(_a) {
          var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? "" : _c;
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.verifyConnectivityAndGetServerInfo({ database, accessMode: READ });
        };
        Driver2.prototype.supportsMultiDb = function() {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsMultiDb();
        };
        Driver2.prototype.supportsTransactionConfig = function() {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsTransactionConfig();
        };
        Driver2.prototype.supportsUserImpersonation = function() {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsUserImpersonation();
        };
        Driver2.prototype.supportsSessionAuth = function() {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsSessionAuth();
        };
        Driver2.prototype.getNegotiatedProtocolVersion = function() {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.getNegotiatedProtocolVersion();
        };
        Driver2.prototype.isEncrypted = function() {
          return this._isEncrypted();
        };
        Driver2.prototype._supportsRouting = function() {
          return this._meta.routing;
        };
        Driver2.prototype._isEncrypted = function() {
          return this._config.encrypted === util_1.ENCRYPTION_ON || this._config.encrypted === true;
        };
        Driver2.prototype._getTrust = function() {
          return this._config.trust;
        };
        Driver2.prototype.session = function(_a) {
          var _b = _a === void 0 ? {} : _a, _c = _b.defaultAccessMode, defaultAccessMode = _c === void 0 ? WRITE : _c, bookmarkOrBookmarks = _b.bookmarks, _d = _b.database, database = _d === void 0 ? "" : _d, impersonatedUser = _b.impersonatedUser, fetchSize = _b.fetchSize, bookmarkManager = _b.bookmarkManager, notificationFilter = _b.notificationFilter, auth = _b.auth;
          return this._newSession({
            defaultAccessMode,
            bookmarkOrBookmarks,
            database,
            reactive: false,
            impersonatedUser,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize),
            bookmarkManager,
            notificationFilter,
            auth
          });
        };
        Driver2.prototype.close = function() {
          this._log.info("Driver ".concat(this._id, " closing"));
          if (this._connectionProvider != null) {
            return this._connectionProvider.close();
          }
          return Promise.resolve();
        };
        Driver2.prototype[Symbol.asyncDispose] = function() {
          return this.close();
        };
        Driver2.prototype._afterConstruction = function() {
          this._log.info("".concat(this._meta.typename, " driver ").concat(this._id, " created for server address ").concat(this._meta.address.toString()));
        };
        Driver2.prototype._homeDatabaseCallback = function(cacheKey, database) {
          this.homeDatabaseCache.set(cacheKey, database);
        };
        Driver2.prototype._newSession = function(_a) {
          var defaultAccessMode = _a.defaultAccessMode, bookmarkOrBookmarks = _a.bookmarkOrBookmarks, database = _a.database, reactive = _a.reactive, impersonatedUser = _a.impersonatedUser, fetchSize = _a.fetchSize, bookmarkManager = _a.bookmarkManager, notificationFilter = _a.notificationFilter, auth = _a.auth;
          var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);
          var connectionProvider = this._getOrCreateConnectionProvider();
          var cachedHomeDatabase = this.homeDatabaseCache.get((0, auth_util_1.cacheKey)(auth, impersonatedUser));
          var homeDatabaseCallback = this._homeDatabaseCallback.bind(this);
          var bookmarks = bookmarkOrBookmarks != null ? new bookmarks_1.Bookmarks(bookmarkOrBookmarks) : bookmarks_1.Bookmarks.empty();
          return this._createSession({
            mode: sessionMode,
            database: database !== null && database !== void 0 ? database : "",
            connectionProvider,
            bookmarks,
            config: __assign({ cachedHomeDatabase, routingDriver: this._supportsRouting() }, this._config),
            reactive,
            impersonatedUser,
            fetchSize,
            bookmarkManager,
            notificationFilter,
            auth,
            log: this._log,
            homeDatabaseCallback
          });
        };
        Driver2.prototype._getOrCreateConnectionProvider = function() {
          if (this._connectionProvider == null) {
            this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));
          }
          return this._connectionProvider;
        };
        return Driver2;
      }()
    );
    exports.Driver = Driver;
    function validateConfig(config, log) {
      var _a, _b;
      var resolver = config.resolver;
      if (resolver !== null && resolver !== void 0 && typeof resolver !== "function") {
        throw new TypeError("Configured resolver should be a function. Got: ".concat(typeof resolver));
      }
      if (config.connectionAcquisitionTimeout < config.connectionTimeout) {
        log.warn('Configuration for "connectionAcquisitionTimeout" should be greater than or equal to "connectionTimeout". Otherwise, the connection acquisition timeout will take precedence for over the connection timeout in scenarios where a new connection is created while it is acquired');
      }
      if (((_a = config.notificationFilter) === null || _a === void 0 ? void 0 : _a.disabledCategories) != null && ((_b = config.notificationFilter) === null || _b === void 0 ? void 0 : _b.disabledClassifications) != null) {
        throw new Error(`The notificationFilter can't have both "disabledCategories" and  "disabledClassifications" configured at the same time.`);
      }
      return config;
    }
    function sanitizeConfig(config) {
      config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);
      config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);
      config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);
      config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);
      config.connectionTimeout = extractConnectionTimeout(config);
      config.connectionLivenessCheckTimeout = validateConnectionLivenessCheckTimeoutSizeValue(config.connectionLivenessCheckTimeout);
    }
    function sanitizeIntValue(rawValue, defaultWhenAbsent) {
      var sanitizedValue = parseInt(rawValue, 10);
      if (sanitizedValue > 0 || sanitizedValue === 0) {
        return sanitizedValue;
      } else if (sanitizedValue < 0) {
        return Number.MAX_SAFE_INTEGER;
      } else {
        return defaultWhenAbsent;
      }
    }
    function validateFetchSizeValue(rawValue, defaultWhenAbsent) {
      var fetchSize = parseInt(rawValue, 10);
      if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {
        return fetchSize;
      } else if (fetchSize === 0 || fetchSize < 0) {
        throw new Error("The fetch size can only be a positive value or ".concat(constants_1.FETCH_ALL, " for ALL. However fetchSize = ").concat(fetchSize));
      } else {
        return defaultWhenAbsent;
      }
    }
    function extractConnectionTimeout(config) {
      var configuredTimeout = parseInt(config.connectionTimeout, 10);
      if (configuredTimeout === 0) {
        return null;
      } else if (!isNaN(configuredTimeout) && configuredTimeout < 0) {
        return null;
      } else if (isNaN(configuredTimeout)) {
        return constants_1.DEFAULT_CONNECTION_TIMEOUT_MILLIS;
      } else {
        return configuredTimeout;
      }
    }
    function validateConnectionLivenessCheckTimeoutSizeValue(rawValue) {
      if (rawValue == null) {
        return void 0;
      }
      var connectionLivenessCheckTimeout = parseInt(rawValue, 10);
      if (connectionLivenessCheckTimeout < 0 || Number.isNaN(connectionLivenessCheckTimeout)) {
        throw new Error("The connectionLivenessCheckTimeout can only be a positive value or 0 for always. However connectionLivenessCheckTimeout = ".concat(connectionLivenessCheckTimeout));
      }
      return connectionLivenessCheckTimeout;
    }
    function createHostNameResolver(config) {
      return new configured_custom_resolver_1.default(config.resolver);
    }
    exports.default = Driver;
  }
});

// node_modules/neo4j-driver-core/lib/auth.js
var require_auth = __commonJS({
  "node_modules/neo4j-driver-core/lib/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var error_1 = require_error();
    var json_1 = require_json();
    var auth = {
      basic: function(username, password, realm) {
        if (realm != null) {
          return {
            scheme: "basic",
            principal: username,
            credentials: password,
            realm
          };
        } else {
          return { scheme: "basic", principal: username, credentials: password };
        }
      },
      kerberos: function(base64EncodedTicket) {
        return {
          scheme: "kerberos",
          principal: "",
          credentials: base64EncodedTicket
        };
      },
      bearer: function(base64EncodedToken) {
        return {
          scheme: "bearer",
          credentials: base64EncodedToken
        };
      },
      none: function() {
        return {
          scheme: "none"
        };
      },
      custom: function(principal, credentials, realm, scheme, parameters) {
        var output = {
          scheme,
          principal
        };
        if (isNotEmpty(credentials)) {
          output.credentials = credentials;
        }
        if (isNotEmpty(realm)) {
          output.realm = realm;
        }
        if (isNotEmpty(parameters)) {
          try {
            (0, json_1.stringify)(parameters);
          } catch (e) {
            throw (0, error_1.newError)("Circular references in custom auth token parameters", void 0, e);
          }
          output.parameters = parameters;
        }
        return output;
      }
    };
    function isNotEmpty(value) {
      return !(value === null || value === void 0 || value === "" || Object.getPrototypeOf(value) === Object.prototype && Object.keys(value).length === 0);
    }
    exports.default = auth;
  }
});

// node_modules/neo4j-driver-core/lib/auth-token-manager.js
var require_auth_token_manager = __commonJS({
  "node_modules/neo4j-driver-core/lib/auth-token-manager.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticAuthTokenManager = exports.authTokenManagers = exports.AuthTokenAndExpiration = void 0;
    var auth_1 = __importDefault(require_auth());
    var internal_1 = require_internal();
    var AuthTokenManager = (
      /** @class */
      function() {
        function AuthTokenManager2() {
        }
        AuthTokenManager2.prototype.getToken = function() {
          throw new Error("Not Implemented");
        };
        AuthTokenManager2.prototype.handleSecurityException = function(token, securityErrorCode) {
          throw new Error("Not implemented");
        };
        return AuthTokenManager2;
      }()
    );
    exports.default = AuthTokenManager;
    var AuthTokenAndExpiration = (
      /** @class */
      /* @__PURE__ */ function() {
        function AuthTokenAndExpiration2() {
          this.token = auth_1.default.none();
          this.expiration = void 0;
        }
        return AuthTokenAndExpiration2;
      }()
    );
    exports.AuthTokenAndExpiration = AuthTokenAndExpiration;
    var AuthTokenManagers = (
      /** @class */
      function() {
        function AuthTokenManagers2() {
        }
        AuthTokenManagers2.prototype.bearer = function(_a) {
          var tokenProvider = _a.tokenProvider;
          if (typeof tokenProvider !== "function") {
            throw new TypeError("tokenProvider should be function, but got: ".concat(typeof tokenProvider));
          }
          return new ExpirationBasedAuthTokenManager(tokenProvider, [
            "Neo.ClientError.Security.Unauthorized",
            "Neo.ClientError.Security.TokenExpired"
          ]);
        };
        AuthTokenManagers2.prototype.basic = function(_a) {
          var _this = this;
          var tokenProvider = _a.tokenProvider;
          if (typeof tokenProvider !== "function") {
            throw new TypeError("tokenProvider should be function, but got: ".concat(typeof tokenProvider));
          }
          return new ExpirationBasedAuthTokenManager(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var _a2;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    _a2 = {};
                    return [4, tokenProvider()];
                  case 1:
                    return [2, (_a2.token = _b.sent(), _a2)];
                }
              });
            });
          }, ["Neo.ClientError.Security.Unauthorized"]);
        };
        return AuthTokenManagers2;
      }()
    );
    var authTokenManagers = new AuthTokenManagers();
    exports.authTokenManagers = authTokenManagers;
    Object.freeze(authTokenManagers);
    function staticAuthTokenManager(_a) {
      var authToken = _a.authToken;
      return new StaticAuthTokenManager(authToken);
    }
    exports.staticAuthTokenManager = staticAuthTokenManager;
    var TokenRefreshObservable = (
      /** @class */
      function() {
        function TokenRefreshObservable2(_subscribers) {
          if (_subscribers === void 0) {
            _subscribers = [];
          }
          this._subscribers = _subscribers;
        }
        TokenRefreshObservable2.prototype.subscribe = function(sub) {
          this._subscribers.push(sub);
        };
        TokenRefreshObservable2.prototype.onCompleted = function(data) {
          this._subscribers.forEach(function(sub) {
            return sub.onCompleted(data);
          });
        };
        TokenRefreshObservable2.prototype.onError = function(error) {
          this._subscribers.forEach(function(sub) {
            return sub.onError(error);
          });
        };
        return TokenRefreshObservable2;
      }()
    );
    var ExpirationBasedAuthTokenManager = (
      /** @class */
      function() {
        function ExpirationBasedAuthTokenManager2(_tokenProvider, _handledSecurityCodes, _currentAuthData, _refreshObservable) {
          this._tokenProvider = _tokenProvider;
          this._handledSecurityCodes = _handledSecurityCodes;
          this._currentAuthData = _currentAuthData;
          this._refreshObservable = _refreshObservable;
        }
        ExpirationBasedAuthTokenManager2.prototype.getToken = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!(this._currentAuthData === void 0 || this._currentAuthData.expiration !== void 0 && this._currentAuthData.expiration < /* @__PURE__ */ new Date())) return [3, 2];
                  return [4, this._refreshAuthToken()];
                case 1:
                  _b.sent();
                  _b.label = 2;
                case 2:
                  return [2, (_a = this._currentAuthData) === null || _a === void 0 ? void 0 : _a.token];
              }
            });
          });
        };
        ExpirationBasedAuthTokenManager2.prototype.handleSecurityException = function(token, securityErrorCode) {
          var _a;
          if (this._handledSecurityCodes.includes(securityErrorCode)) {
            if (internal_1.util.equals(token, (_a = this._currentAuthData) === null || _a === void 0 ? void 0 : _a.token)) {
              this._scheduleRefreshAuthToken();
            }
            return true;
          }
          return false;
        };
        ExpirationBasedAuthTokenManager2.prototype._scheduleRefreshAuthToken = function(observer) {
          var _this = this;
          if (this._refreshObservable === void 0) {
            this._currentAuthData = void 0;
            this._refreshObservable = new TokenRefreshObservable();
            Promise.resolve(this._tokenProvider()).then(function(data) {
              var _a;
              _this._currentAuthData = data;
              (_a = _this._refreshObservable) === null || _a === void 0 ? void 0 : _a.onCompleted(data);
            }).catch(function(error) {
              var _a;
              (_a = _this._refreshObservable) === null || _a === void 0 ? void 0 : _a.onError(error);
            }).finally(function() {
              _this._refreshObservable = void 0;
            });
          }
          if (observer !== void 0) {
            this._refreshObservable.subscribe(observer);
          }
        };
        ExpirationBasedAuthTokenManager2.prototype._refreshAuthToken = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, new Promise(function(resolve, reject) {
                    _this._scheduleRefreshAuthToken({
                      onCompleted: resolve,
                      onError: reject
                    });
                  })];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        return ExpirationBasedAuthTokenManager2;
      }()
    );
    var StaticAuthTokenManager = (
      /** @class */
      function() {
        function StaticAuthTokenManager2(_authToken) {
          this._authToken = _authToken;
        }
        StaticAuthTokenManager2.prototype.getToken = function() {
          return this._authToken;
        };
        StaticAuthTokenManager2.prototype.handleSecurityException = function(_, __) {
          return false;
        };
        return StaticAuthTokenManager2;
      }()
    );
  }
});

// node_modules/neo4j-driver-core/lib/types.js
var require_types = __commonJS({
  "node_modules/neo4j-driver-core/lib/types.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InternalConfig = exports.Config = void 0;
    var Config = (
      /** @class */
      /* @__PURE__ */ function() {
        function Config2() {
          this.encrypted = void 0;
          this.trust = void 0;
          this.trustedCertificates = [];
          this.maxConnectionPoolSize = 100;
          this.maxConnectionLifetime = 60 * 60 * 1e3;
          this.connectionAcquisitionTimeout = 6e4;
          this.maxTransactionRetryTime = 3e4;
          this.connectionLivenessCheckTimeout = void 0;
          this.connectionTimeout = 3e4;
          this.disableLosslessIntegers = false;
          this.useBigInt = false;
          this.logging = void 0;
          this.resolver = void 0;
          this.notificationFilter = void 0;
          this.userAgent = void 0;
          this.telemetryDisabled = false;
          this.clientCertificate = void 0;
        }
        return Config2;
      }()
    );
    exports.Config = Config;
    var InternalConfig = (
      /** @class */
      function(_super) {
        __extends(InternalConfig2, _super);
        function InternalConfig2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return InternalConfig2;
      }(Config)
    );
    exports.InternalConfig = InternalConfig;
  }
});

// node_modules/neo4j-driver-core/lib/client-certificate.js
var require_client_certificate = __commonJS({
  "node_modules/neo4j-driver-core/lib/client-certificate.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCertificateProvider = exports.clientCertificateProviders = exports.RotatingClientCertificateProvider = exports.ClientCertificateProvider = void 0;
    var json = __importStar(require_json());
    var ClientCertificate = (
      /** @class */
      /* @__PURE__ */ function() {
        function ClientCertificate2() {
          this.certfile = "";
          this.keyfile = "";
          this.password = void 0;
        }
        return ClientCertificate2;
      }()
    );
    exports.default = ClientCertificate;
    var ClientCertificateProvider = (
      /** @class */
      function() {
        function ClientCertificateProvider2() {
        }
        ClientCertificateProvider2.prototype.hasUpdate = function() {
          throw new Error("Not Implemented");
        };
        ClientCertificateProvider2.prototype.getClientCertificate = function() {
          throw new Error("Not Implemented");
        };
        return ClientCertificateProvider2;
      }()
    );
    exports.ClientCertificateProvider = ClientCertificateProvider;
    var RotatingClientCertificateProvider = (
      /** @class */
      function(_super) {
        __extends(RotatingClientCertificateProvider2, _super);
        function RotatingClientCertificateProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        RotatingClientCertificateProvider2.prototype.updateCertificate = function(certificate) {
          throw new Error("Not implemented");
        };
        return RotatingClientCertificateProvider2;
      }(ClientCertificateProvider)
    );
    exports.RotatingClientCertificateProvider = RotatingClientCertificateProvider;
    var ClientCertificateProviders = (
      /** @class */
      function() {
        function ClientCertificateProviders2() {
        }
        ClientCertificateProviders2.prototype.rotating = function(_a) {
          var initialCertificate = _a.initialCertificate;
          if (initialCertificate == null || !isClientClientCertificate(initialCertificate)) {
            throw new TypeError("initialCertificate should be ClientCertificate, but got ".concat(json.stringify(initialCertificate)));
          }
          var certificate = __assign({}, initialCertificate);
          return new InternalRotatingClientCertificateProvider(certificate);
        };
        return ClientCertificateProviders2;
      }()
    );
    var clientCertificateProviders = new ClientCertificateProviders();
    exports.clientCertificateProviders = clientCertificateProviders;
    Object.freeze(clientCertificateProviders);
    function resolveCertificateProvider(input) {
      if (input == null) {
        return void 0;
      }
      if (typeof input === "object" && "hasUpdate" in input && "getClientCertificate" in input && typeof input.getClientCertificate === "function" && typeof input.hasUpdate === "function") {
        return input;
      }
      if (isClientClientCertificate(input)) {
        var certificate_1 = __assign({}, input);
        return {
          getClientCertificate: function() {
            return certificate_1;
          },
          hasUpdate: function() {
            return false;
          }
        };
      }
      throw new TypeError("clientCertificate should be configured with ClientCertificate or ClientCertificateProvider, but got ".concat(json.stringify(input)));
    }
    exports.resolveCertificateProvider = resolveCertificateProvider;
    function isClientClientCertificate(maybeClientCertificate) {
      return maybeClientCertificate != null && typeof maybeClientCertificate === "object" && "certfile" in maybeClientCertificate && isCertFile(maybeClientCertificate.certfile) && "keyfile" in maybeClientCertificate && isKeyFile(maybeClientCertificate.keyfile) && isStringOrNotPresent("password", maybeClientCertificate);
    }
    function isCertFile(value) {
      return isString(value) || isArrayOf(value, isString);
    }
    function isKeyFile(maybeKeyFile) {
      function check(obj) {
        return typeof obj === "string" || obj != null && typeof obj === "object" && "path" in obj && typeof obj.path === "string" && isStringOrNotPresent("password", obj);
      }
      return check(maybeKeyFile) || isArrayOf(maybeKeyFile, check);
    }
    function isString(value) {
      return typeof value === "string";
    }
    function isArrayOf(value, isType, allowEmpty) {
      if (allowEmpty === void 0) {
        allowEmpty = false;
      }
      return Array.isArray(value) && (allowEmpty || value.length > 0) && value.filter(isType).length === value.length;
    }
    function isStringOrNotPresent(valueName, obj) {
      return !(valueName in obj) || obj[valueName] == null || typeof obj[valueName] === "string";
    }
    var InternalRotatingClientCertificateProvider = (
      /** @class */
      function() {
        function InternalRotatingClientCertificateProvider2(_certificate, _updated) {
          if (_updated === void 0) {
            _updated = false;
          }
          this._certificate = _certificate;
          this._updated = _updated;
        }
        InternalRotatingClientCertificateProvider2.prototype.hasUpdate = function() {
          try {
            return this._updated;
          } finally {
            this._updated = false;
          }
        };
        InternalRotatingClientCertificateProvider2.prototype.getClientCertificate = function() {
          return this._certificate;
        };
        InternalRotatingClientCertificateProvider2.prototype.updateCertificate = function(certificate) {
          if (!isClientClientCertificate(certificate)) {
            throw new TypeError("certificate should be ClientCertificate, but got ".concat(json.stringify(certificate)));
          }
          this._certificate = __assign({}, certificate);
          this._updated = true;
        };
        return InternalRotatingClientCertificateProvider2;
      }()
    );
  }
});

// node_modules/neo4j-driver-core/lib/index.js
var require_lib = __commonJS({
  "node_modules/neo4j-driver-core/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EagerResult = exports.Result = exports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.GqlStatusObject = exports.Notification = exports.ServerInfo = exports.queryType = exports.ResultSummary = exports.Record = exports.isPathSegment = exports.PathSegment = exports.isPath = exports.Path = exports.isUnboundRelationship = exports.UnboundRelationship = exports.isRelationship = exports.Relationship = exports.isNode = exports.Node = exports.Time = exports.LocalTime = exports.LocalDateTime = exports.isTime = exports.isLocalTime = exports.isLocalDateTime = exports.isDuration = exports.isDateTime = exports.isDate = exports.Duration = exports.DateTime = exports.Date = exports.Point = exports.isPoint = exports.internal = exports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = exports.Integer = exports.error = exports.isRetriableError = exports.GQLError = exports.newGQLError = exports.Neo4jError = exports.newError = exports.authTokenManagers = void 0;
    exports.resolveCertificateProvider = exports.clientCertificateProviders = exports.notificationFilterMinimumSeverityLevel = exports.notificationFilterDisabledClassification = exports.notificationFilterDisabledCategory = exports.notificationSeverityLevel = exports.notificationClassification = exports.notificationCategory = exports.resultTransformers = exports.routing = exports.staticAuthTokenManager = exports.bookmarkManager = exports.auth = exports.json = exports.driver = exports.types = exports.Driver = exports.Session = exports.TransactionPromise = exports.ManagedTransaction = exports.Transaction = exports.Connection = exports.Releasable = exports.ConnectionProvider = void 0;
    var error_1 = require_error();
    Object.defineProperty(exports, "newError", { enumerable: true, get: function() {
      return error_1.newError;
    } });
    Object.defineProperty(exports, "Neo4jError", { enumerable: true, get: function() {
      return error_1.Neo4jError;
    } });
    Object.defineProperty(exports, "newGQLError", { enumerable: true, get: function() {
      return error_1.newGQLError;
    } });
    Object.defineProperty(exports, "GQLError", { enumerable: true, get: function() {
      return error_1.GQLError;
    } });
    Object.defineProperty(exports, "isRetriableError", { enumerable: true, get: function() {
      return error_1.isRetriableError;
    } });
    var integer_1 = __importStar(require_integer());
    exports.Integer = integer_1.default;
    Object.defineProperty(exports, "int", { enumerable: true, get: function() {
      return integer_1.int;
    } });
    Object.defineProperty(exports, "isInt", { enumerable: true, get: function() {
      return integer_1.isInt;
    } });
    Object.defineProperty(exports, "inSafeRange", { enumerable: true, get: function() {
      return integer_1.inSafeRange;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return integer_1.toNumber;
    } });
    Object.defineProperty(exports, "toString", { enumerable: true, get: function() {
      return integer_1.toString;
    } });
    var temporal_types_1 = require_temporal_types();
    Object.defineProperty(exports, "Date", { enumerable: true, get: function() {
      return temporal_types_1.Date;
    } });
    Object.defineProperty(exports, "DateTime", { enumerable: true, get: function() {
      return temporal_types_1.DateTime;
    } });
    Object.defineProperty(exports, "Duration", { enumerable: true, get: function() {
      return temporal_types_1.Duration;
    } });
    Object.defineProperty(exports, "isDate", { enumerable: true, get: function() {
      return temporal_types_1.isDate;
    } });
    Object.defineProperty(exports, "isDateTime", { enumerable: true, get: function() {
      return temporal_types_1.isDateTime;
    } });
    Object.defineProperty(exports, "isDuration", { enumerable: true, get: function() {
      return temporal_types_1.isDuration;
    } });
    Object.defineProperty(exports, "isLocalDateTime", { enumerable: true, get: function() {
      return temporal_types_1.isLocalDateTime;
    } });
    Object.defineProperty(exports, "isLocalTime", { enumerable: true, get: function() {
      return temporal_types_1.isLocalTime;
    } });
    Object.defineProperty(exports, "isTime", { enumerable: true, get: function() {
      return temporal_types_1.isTime;
    } });
    Object.defineProperty(exports, "LocalDateTime", { enumerable: true, get: function() {
      return temporal_types_1.LocalDateTime;
    } });
    Object.defineProperty(exports, "LocalTime", { enumerable: true, get: function() {
      return temporal_types_1.LocalTime;
    } });
    Object.defineProperty(exports, "Time", { enumerable: true, get: function() {
      return temporal_types_1.Time;
    } });
    var graph_types_1 = require_graph_types();
    Object.defineProperty(exports, "Node", { enumerable: true, get: function() {
      return graph_types_1.Node;
    } });
    Object.defineProperty(exports, "isNode", { enumerable: true, get: function() {
      return graph_types_1.isNode;
    } });
    Object.defineProperty(exports, "Relationship", { enumerable: true, get: function() {
      return graph_types_1.Relationship;
    } });
    Object.defineProperty(exports, "isRelationship", { enumerable: true, get: function() {
      return graph_types_1.isRelationship;
    } });
    Object.defineProperty(exports, "UnboundRelationship", { enumerable: true, get: function() {
      return graph_types_1.UnboundRelationship;
    } });
    Object.defineProperty(exports, "isUnboundRelationship", { enumerable: true, get: function() {
      return graph_types_1.isUnboundRelationship;
    } });
    Object.defineProperty(exports, "Path", { enumerable: true, get: function() {
      return graph_types_1.Path;
    } });
    Object.defineProperty(exports, "isPath", { enumerable: true, get: function() {
      return graph_types_1.isPath;
    } });
    Object.defineProperty(exports, "PathSegment", { enumerable: true, get: function() {
      return graph_types_1.PathSegment;
    } });
    Object.defineProperty(exports, "isPathSegment", { enumerable: true, get: function() {
      return graph_types_1.isPathSegment;
    } });
    var record_1 = __importDefault(require_record());
    exports.Record = record_1.default;
    var spatial_types_1 = require_spatial_types();
    Object.defineProperty(exports, "isPoint", { enumerable: true, get: function() {
      return spatial_types_1.isPoint;
    } });
    Object.defineProperty(exports, "Point", { enumerable: true, get: function() {
      return spatial_types_1.Point;
    } });
    var result_summary_1 = __importStar(require_result_summary());
    exports.ResultSummary = result_summary_1.default;
    Object.defineProperty(exports, "queryType", { enumerable: true, get: function() {
      return result_summary_1.queryType;
    } });
    Object.defineProperty(exports, "ServerInfo", { enumerable: true, get: function() {
      return result_summary_1.ServerInfo;
    } });
    Object.defineProperty(exports, "Plan", { enumerable: true, get: function() {
      return result_summary_1.Plan;
    } });
    Object.defineProperty(exports, "ProfiledPlan", { enumerable: true, get: function() {
      return result_summary_1.ProfiledPlan;
    } });
    Object.defineProperty(exports, "QueryStatistics", { enumerable: true, get: function() {
      return result_summary_1.QueryStatistics;
    } });
    Object.defineProperty(exports, "Stats", { enumerable: true, get: function() {
      return result_summary_1.Stats;
    } });
    var notification_1 = __importStar(require_notification());
    exports.Notification = notification_1.default;
    Object.defineProperty(exports, "GqlStatusObject", { enumerable: true, get: function() {
      return notification_1.GqlStatusObject;
    } });
    Object.defineProperty(exports, "notificationCategory", { enumerable: true, get: function() {
      return notification_1.notificationCategory;
    } });
    Object.defineProperty(exports, "notificationClassification", { enumerable: true, get: function() {
      return notification_1.notificationClassification;
    } });
    Object.defineProperty(exports, "notificationSeverityLevel", { enumerable: true, get: function() {
      return notification_1.notificationSeverityLevel;
    } });
    var notification_filter_1 = require_notification_filter();
    Object.defineProperty(exports, "notificationFilterDisabledCategory", { enumerable: true, get: function() {
      return notification_filter_1.notificationFilterDisabledCategory;
    } });
    Object.defineProperty(exports, "notificationFilterDisabledClassification", { enumerable: true, get: function() {
      return notification_filter_1.notificationFilterDisabledClassification;
    } });
    Object.defineProperty(exports, "notificationFilterMinimumSeverityLevel", { enumerable: true, get: function() {
      return notification_filter_1.notificationFilterMinimumSeverityLevel;
    } });
    var result_1 = __importDefault(require_result());
    exports.Result = result_1.default;
    var result_eager_1 = __importDefault(require_result_eager());
    exports.EagerResult = result_eager_1.default;
    var connection_provider_1 = __importStar(require_connection_provider());
    exports.ConnectionProvider = connection_provider_1.default;
    Object.defineProperty(exports, "Releasable", { enumerable: true, get: function() {
      return connection_provider_1.Releasable;
    } });
    var connection_1 = __importDefault(require_connection());
    exports.Connection = connection_1.default;
    var transaction_1 = __importDefault(require_transaction());
    exports.Transaction = transaction_1.default;
    var transaction_managed_1 = __importDefault(require_transaction_managed());
    exports.ManagedTransaction = transaction_managed_1.default;
    var transaction_promise_1 = __importDefault(require_transaction_promise());
    exports.TransactionPromise = transaction_promise_1.default;
    var session_1 = __importDefault(require_session());
    exports.Session = session_1.default;
    var driver_1 = __importStar(require_driver());
    var driver = driver_1;
    exports.Driver = driver_1.default;
    exports.driver = driver;
    var auth_1 = __importDefault(require_auth());
    exports.auth = auth_1.default;
    var bookmark_manager_1 = require_bookmark_manager();
    Object.defineProperty(exports, "bookmarkManager", { enumerable: true, get: function() {
      return bookmark_manager_1.bookmarkManager;
    } });
    var auth_token_manager_1 = require_auth_token_manager();
    Object.defineProperty(exports, "authTokenManagers", { enumerable: true, get: function() {
      return auth_token_manager_1.authTokenManagers;
    } });
    Object.defineProperty(exports, "staticAuthTokenManager", { enumerable: true, get: function() {
      return auth_token_manager_1.staticAuthTokenManager;
    } });
    var driver_2 = require_driver();
    Object.defineProperty(exports, "routing", { enumerable: true, get: function() {
      return driver_2.routing;
    } });
    var types = __importStar(require_types());
    exports.types = types;
    var json = __importStar(require_json());
    exports.json = json;
    var result_transformers_1 = __importDefault(require_result_transformers());
    exports.resultTransformers = result_transformers_1.default;
    var client_certificate_1 = require_client_certificate();
    Object.defineProperty(exports, "clientCertificateProviders", { enumerable: true, get: function() {
      return client_certificate_1.clientCertificateProviders;
    } });
    Object.defineProperty(exports, "resolveCertificateProvider", { enumerable: true, get: function() {
      return client_certificate_1.resolveCertificateProvider;
    } });
    var internal = __importStar(require_internal());
    exports.internal = internal;
    var error = {
      SERVICE_UNAVAILABLE: error_1.SERVICE_UNAVAILABLE,
      SESSION_EXPIRED: error_1.SESSION_EXPIRED,
      PROTOCOL_ERROR: error_1.PROTOCOL_ERROR
    };
    exports.error = error;
    var forExport = {
      authTokenManagers: auth_token_manager_1.authTokenManagers,
      newError: error_1.newError,
      Neo4jError: error_1.Neo4jError,
      newGQLError: error_1.newGQLError,
      GQLError: error_1.GQLError,
      isRetriableError: error_1.isRetriableError,
      error,
      Integer: integer_1.default,
      int: integer_1.int,
      isInt: integer_1.isInt,
      inSafeRange: integer_1.inSafeRange,
      toNumber: integer_1.toNumber,
      toString: integer_1.toString,
      internal,
      isPoint: spatial_types_1.isPoint,
      Point: spatial_types_1.Point,
      Date: temporal_types_1.Date,
      DateTime: temporal_types_1.DateTime,
      Duration: temporal_types_1.Duration,
      isDate: temporal_types_1.isDate,
      isDateTime: temporal_types_1.isDateTime,
      isDuration: temporal_types_1.isDuration,
      isLocalDateTime: temporal_types_1.isLocalDateTime,
      isLocalTime: temporal_types_1.isLocalTime,
      isTime: temporal_types_1.isTime,
      LocalDateTime: temporal_types_1.LocalDateTime,
      LocalTime: temporal_types_1.LocalTime,
      Time: temporal_types_1.Time,
      Node: graph_types_1.Node,
      isNode: graph_types_1.isNode,
      Relationship: graph_types_1.Relationship,
      isRelationship: graph_types_1.isRelationship,
      UnboundRelationship: graph_types_1.UnboundRelationship,
      isUnboundRelationship: graph_types_1.isUnboundRelationship,
      Path: graph_types_1.Path,
      isPath: graph_types_1.isPath,
      PathSegment: graph_types_1.PathSegment,
      isPathSegment: graph_types_1.isPathSegment,
      Record: record_1.default,
      ResultSummary: result_summary_1.default,
      queryType: result_summary_1.queryType,
      ServerInfo: result_summary_1.ServerInfo,
      Notification: notification_1.default,
      GqlStatusObject: notification_1.GqlStatusObject,
      Plan: result_summary_1.Plan,
      ProfiledPlan: result_summary_1.ProfiledPlan,
      QueryStatistics: result_summary_1.QueryStatistics,
      Stats: result_summary_1.Stats,
      Result: result_1.default,
      EagerResult: result_eager_1.default,
      Transaction: transaction_1.default,
      ManagedTransaction: transaction_managed_1.default,
      TransactionPromise: transaction_promise_1.default,
      Session: session_1.default,
      Driver: driver_1.default,
      Connection: connection_1.default,
      Releasable: connection_provider_1.Releasable,
      types,
      driver,
      json,
      auth: auth_1.default,
      bookmarkManager: bookmark_manager_1.bookmarkManager,
      routing: driver_2.routing,
      resultTransformers: result_transformers_1.default,
      notificationCategory: notification_1.notificationCategory,
      notificationClassification: notification_1.notificationClassification,
      notificationSeverityLevel: notification_1.notificationSeverityLevel,
      notificationFilterDisabledCategory: notification_filter_1.notificationFilterDisabledCategory,
      notificationFilterDisabledClassification: notification_filter_1.notificationFilterDisabledClassification,
      notificationFilterMinimumSeverityLevel: notification_filter_1.notificationFilterMinimumSeverityLevel,
      clientCertificateProviders: client_certificate_1.clientCertificateProviders,
      resolveCertificateProvider: client_certificate_1.resolveCertificateProvider
    };
    exports.default = forExport;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFunction = void 0;
    function isFunction(value) {
      return typeof value === "function";
    }
    exports.isFunction = isFunction;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/createErrorClass.js
var require_createErrorClass = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/createErrorClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createErrorClass = void 0;
    function createErrorClass(createImpl) {
      var _super = function(instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
      };
      var ctorFunc = createImpl(_super);
      ctorFunc.prototype = Object.create(Error.prototype);
      ctorFunc.prototype.constructor = ctorFunc;
      return ctorFunc;
    }
    exports.createErrorClass = createErrorClass;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/UnsubscriptionError.js
var require_UnsubscriptionError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/UnsubscriptionError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnsubscriptionError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.UnsubscriptionError = createErrorClass_1.createErrorClass(function(_super) {
      return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
          return i + 1 + ") " + err.toString();
        }).join("\n  ") : "";
        this.name = "UnsubscriptionError";
        this.errors = errors;
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/arrRemove.js
var require_arrRemove = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/arrRemove.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.arrRemove = void 0;
    function arrRemove(arr, item) {
      if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
      }
    }
    exports.arrRemove = arrRemove;
  }
});

// node_modules/rxjs/dist/cjs/internal/Subscription.js
var require_Subscription = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Subscription.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSubscription = exports.EMPTY_SUBSCRIPTION = exports.Subscription = void 0;
    var isFunction_1 = require_isFunction();
    var UnsubscriptionError_1 = require_UnsubscriptionError();
    var arrRemove_1 = require_arrRemove();
    var Subscription = function() {
      function Subscription2(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
      }
      Subscription2.prototype.unsubscribe = function() {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
          this.closed = true;
          var _parentage = this._parentage;
          if (_parentage) {
            this._parentage = null;
            if (Array.isArray(_parentage)) {
              try {
                for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                  var parent_1 = _parentage_1_1.value;
                  parent_1.remove(this);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            } else {
              _parentage.remove(this);
            }
          }
          var initialFinalizer = this.initialTeardown;
          if (isFunction_1.isFunction(initialFinalizer)) {
            try {
              initialFinalizer();
            } catch (e) {
              errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? e.errors : [e];
            }
          }
          var _finalizers = this._finalizers;
          if (_finalizers) {
            this._finalizers = null;
            try {
              for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                var finalizer = _finalizers_1_1.value;
                try {
                  execFinalizer(finalizer);
                } catch (err) {
                  errors = errors !== null && errors !== void 0 ? errors : [];
                  if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                  } else {
                    errors.push(err);
                  }
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          }
          if (errors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
          }
        }
      };
      Subscription2.prototype.add = function(teardown) {
        var _a;
        if (teardown && teardown !== this) {
          if (this.closed) {
            execFinalizer(teardown);
          } else {
            if (teardown instanceof Subscription2) {
              if (teardown.closed || teardown._hasParent(this)) {
                return;
              }
              teardown._addParent(this);
            }
            (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
          }
        }
      };
      Subscription2.prototype._hasParent = function(parent) {
        var _parentage = this._parentage;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
      };
      Subscription2.prototype._addParent = function(parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription2.prototype._removeParent = function(parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
          this._parentage = null;
        } else if (Array.isArray(_parentage)) {
          arrRemove_1.arrRemove(_parentage, parent);
        }
      };
      Subscription2.prototype.remove = function(teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove_1.arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription2) {
          teardown._removeParent(this);
        }
      };
      Subscription2.EMPTY = function() {
        var empty = new Subscription2();
        empty.closed = true;
        return empty;
      }();
      return Subscription2;
    }();
    exports.Subscription = Subscription;
    exports.EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    function isSubscription(value) {
      return value instanceof Subscription || value && "closed" in value && isFunction_1.isFunction(value.remove) && isFunction_1.isFunction(value.add) && isFunction_1.isFunction(value.unsubscribe);
    }
    exports.isSubscription = isSubscription;
    function execFinalizer(finalizer) {
      if (isFunction_1.isFunction(finalizer)) {
        finalizer();
      } else {
        finalizer.unsubscribe();
      }
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/config.js
var require_config = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.config = void 0;
    exports.config = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: void 0,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/timeoutProvider.js
var require_timeoutProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/timeoutProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeoutProvider = void 0;
    exports.timeoutProvider = {
      setTimeout: function(handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var delegate = exports.timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
          return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearTimeout: function(handle) {
        var delegate = exports.timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/util/reportUnhandledError.js
var require_reportUnhandledError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/reportUnhandledError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportUnhandledError = void 0;
    var config_1 = require_config();
    var timeoutProvider_1 = require_timeoutProvider();
    function reportUnhandledError(err) {
      timeoutProvider_1.timeoutProvider.setTimeout(function() {
        var onUnhandledError = config_1.config.onUnhandledError;
        if (onUnhandledError) {
          onUnhandledError(err);
        } else {
          throw err;
        }
      });
    }
    exports.reportUnhandledError = reportUnhandledError;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/noop.js
var require_noop = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/noop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noop = void 0;
    function noop() {
    }
    exports.noop = noop;
  }
});

// node_modules/rxjs/dist/cjs/internal/NotificationFactories.js
var require_NotificationFactories = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/NotificationFactories.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createNotification = exports.nextNotification = exports.errorNotification = exports.COMPLETE_NOTIFICATION = void 0;
    exports.COMPLETE_NOTIFICATION = function() {
      return createNotification("C", void 0, void 0);
    }();
    function errorNotification(error) {
      return createNotification("E", void 0, error);
    }
    exports.errorNotification = errorNotification;
    function nextNotification(value) {
      return createNotification("N", value, void 0);
    }
    exports.nextNotification = nextNotification;
    function createNotification(kind, value, error) {
      return {
        kind,
        value,
        error
      };
    }
    exports.createNotification = createNotification;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/errorContext.js
var require_errorContext = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/errorContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.captureError = exports.errorContext = void 0;
    var config_1 = require_config();
    var context = null;
    function errorContext(cb) {
      if (config_1.config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
          context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
          var _a = context, errorThrown = _a.errorThrown, error = _a.error;
          context = null;
          if (errorThrown) {
            throw error;
          }
        }
      } else {
        cb();
      }
    }
    exports.errorContext = errorContext;
    function captureError(err) {
      if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
      }
    }
    exports.captureError = captureError;
  }
});

// node_modules/rxjs/dist/cjs/internal/Subscriber.js
var require_Subscriber = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Subscriber.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_OBSERVER = exports.SafeSubscriber = exports.Subscriber = void 0;
    var isFunction_1 = require_isFunction();
    var Subscription_1 = require_Subscription();
    var config_1 = require_config();
    var reportUnhandledError_1 = require_reportUnhandledError();
    var noop_1 = require_noop();
    var NotificationFactories_1 = require_NotificationFactories();
    var timeoutProvider_1 = require_timeoutProvider();
    var errorContext_1 = require_errorContext();
    var Subscriber = function(_super) {
      __extends(Subscriber2, _super);
      function Subscriber2(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
          _this.destination = destination;
          if (Subscription_1.isSubscription(destination)) {
            destination.add(_this);
          }
        } else {
          _this.destination = exports.EMPTY_OBSERVER;
        }
        return _this;
      }
      Subscriber2.create = function(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
      };
      Subscriber2.prototype.next = function(value) {
        if (this.isStopped) {
          handleStoppedNotification(NotificationFactories_1.nextNotification(value), this);
        } else {
          this._next(value);
        }
      };
      Subscriber2.prototype.error = function(err) {
        if (this.isStopped) {
          handleStoppedNotification(NotificationFactories_1.errorNotification(err), this);
        } else {
          this.isStopped = true;
          this._error(err);
        }
      };
      Subscriber2.prototype.complete = function() {
        if (this.isStopped) {
          handleStoppedNotification(NotificationFactories_1.COMPLETE_NOTIFICATION, this);
        } else {
          this.isStopped = true;
          this._complete();
        }
      };
      Subscriber2.prototype.unsubscribe = function() {
        if (!this.closed) {
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
          this.destination = null;
        }
      };
      Subscriber2.prototype._next = function(value) {
        this.destination.next(value);
      };
      Subscriber2.prototype._error = function(err) {
        try {
          this.destination.error(err);
        } finally {
          this.unsubscribe();
        }
      };
      Subscriber2.prototype._complete = function() {
        try {
          this.destination.complete();
        } finally {
          this.unsubscribe();
        }
      };
      return Subscriber2;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    var _bind = Function.prototype.bind;
    function bind(fn, thisArg) {
      return _bind.call(fn, thisArg);
    }
    var ConsumerObserver = function() {
      function ConsumerObserver2(partialObserver) {
        this.partialObserver = partialObserver;
      }
      ConsumerObserver2.prototype.next = function(value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
          try {
            partialObserver.next(value);
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      ConsumerObserver2.prototype.error = function(err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
          try {
            partialObserver.error(err);
          } catch (error) {
            handleUnhandledError(error);
          }
        } else {
          handleUnhandledError(err);
        }
      };
      ConsumerObserver2.prototype.complete = function() {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
          try {
            partialObserver.complete();
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      return ConsumerObserver2;
    }();
    var SafeSubscriber = function(_super) {
      __extends(SafeSubscriber2, _super);
      function SafeSubscriber2(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction_1.isFunction(observerOrNext) || !observerOrNext) {
          partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
            error: error !== null && error !== void 0 ? error : void 0,
            complete: complete !== null && complete !== void 0 ? complete : void 0
          };
        } else {
          var context_1;
          if (_this && config_1.config.useDeprecatedNextContext) {
            context_1 = Object.create(observerOrNext);
            context_1.unsubscribe = function() {
              return _this.unsubscribe();
            };
            partialObserver = {
              next: observerOrNext.next && bind(observerOrNext.next, context_1),
              error: observerOrNext.error && bind(observerOrNext.error, context_1),
              complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
            };
          } else {
            partialObserver = observerOrNext;
          }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
      }
      return SafeSubscriber2;
    }(Subscriber);
    exports.SafeSubscriber = SafeSubscriber;
    function handleUnhandledError(error) {
      if (config_1.config.useDeprecatedSynchronousErrorHandling) {
        errorContext_1.captureError(error);
      } else {
        reportUnhandledError_1.reportUnhandledError(error);
      }
    }
    function defaultErrorHandler(err) {
      throw err;
    }
    function handleStoppedNotification(notification, subscriber) {
      var onStoppedNotification = config_1.config.onStoppedNotification;
      onStoppedNotification && timeoutProvider_1.timeoutProvider.setTimeout(function() {
        return onStoppedNotification(notification, subscriber);
      });
    }
    exports.EMPTY_OBSERVER = {
      closed: true,
      next: noop_1.noop,
      error: defaultErrorHandler,
      complete: noop_1.noop
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/symbol/observable.js
var require_observable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/symbol/observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.observable = void 0;
    exports.observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
  }
});

// node_modules/rxjs/dist/cjs/internal/util/identity.js
var require_identity = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.identity = void 0;
    function identity(x) {
      return x;
    }
    exports.identity = identity;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/pipe.js
var require_pipe = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/pipe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pipeFromArray = exports.pipe = void 0;
    var identity_1 = require_identity();
    function pipe() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
      }
      return pipeFromArray(fns);
    }
    exports.pipe = pipe;
    function pipeFromArray(fns) {
      if (fns.length === 0) {
        return identity_1.identity;
      }
      if (fns.length === 1) {
        return fns[0];
      }
      return function piped(input) {
        return fns.reduce(function(prev, fn) {
          return fn(prev);
        }, input);
      };
    }
    exports.pipeFromArray = pipeFromArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/Observable.js
var require_Observable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Observable = void 0;
    var Subscriber_1 = require_Subscriber();
    var Subscription_1 = require_Subscription();
    var observable_1 = require_observable();
    var pipe_1 = require_pipe();
    var config_1 = require_config();
    var isFunction_1 = require_isFunction();
    var errorContext_1 = require_errorContext();
    var Observable = function() {
      function Observable2(subscribe) {
        if (subscribe) {
          this._subscribe = subscribe;
        }
      }
      Observable2.prototype.lift = function(operator) {
        var observable = new Observable2();
        observable.source = this;
        observable.operator = operator;
        return observable;
      };
      Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new Subscriber_1.SafeSubscriber(observerOrNext, error, complete);
        errorContext_1.errorContext(function() {
          var _a = _this, operator = _a.operator, source = _a.source;
          subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
        });
        return subscriber;
      };
      Observable2.prototype._trySubscribe = function(sink) {
        try {
          return this._subscribe(sink);
        } catch (err) {
          sink.error(err);
        }
      };
      Observable2.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var subscriber = new Subscriber_1.SafeSubscriber({
            next: function(value) {
              try {
                next(value);
              } catch (err) {
                reject(err);
                subscriber.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
          _this.subscribe(subscriber);
        });
      };
      Observable2.prototype._subscribe = function(subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      };
      Observable2.prototype[observable_1.observable] = function() {
        return this;
      };
      Observable2.prototype.pipe = function() {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          operations[_i] = arguments[_i];
        }
        return pipe_1.pipeFromArray(operations)(this);
      };
      Observable2.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var value;
          _this.subscribe(function(x) {
            return value = x;
          }, function(err) {
            return reject(err);
          }, function() {
            return resolve(value);
          });
        });
      };
      Observable2.create = function(subscribe) {
        return new Observable2(subscribe);
      };
      return Observable2;
    }();
    exports.Observable = Observable;
    function getPromiseCtor(promiseCtor) {
      var _a;
      return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config_1.config.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver(value) {
      return value && isFunction_1.isFunction(value.next) && isFunction_1.isFunction(value.error) && isFunction_1.isFunction(value.complete);
    }
    function isSubscriber(value) {
      return value && value instanceof Subscriber_1.Subscriber || isObserver(value) && Subscription_1.isSubscription(value);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/lift.js
var require_lift = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/lift.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.operate = exports.hasLift = void 0;
    var isFunction_1 = require_isFunction();
    function hasLift(source) {
      return isFunction_1.isFunction(source === null || source === void 0 ? void 0 : source.lift);
    }
    exports.hasLift = hasLift;
    function operate(init) {
      return function(source) {
        if (hasLift(source)) {
          return source.lift(function(liftedSource) {
            try {
              return init(liftedSource, this);
            } catch (err) {
              this.error(err);
            }
          });
        }
        throw new TypeError("Unable to lift unknown Observable type");
      };
    }
    exports.operate = operate;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/OperatorSubscriber.js
var require_OperatorSubscriber = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/OperatorSubscriber.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperatorSubscriber = exports.createOperatorSubscriber = void 0;
    var Subscriber_1 = require_Subscriber();
    function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
      return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
    }
    exports.createOperatorSubscriber = createOperatorSubscriber;
    var OperatorSubscriber = function(_super) {
      __extends(OperatorSubscriber2, _super);
      function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function(value) {
          try {
            onNext(value);
          } catch (err) {
            destination.error(err);
          }
        } : _super.prototype._next;
        _this._error = onError ? function(err) {
          try {
            onError(err);
          } catch (err2) {
            destination.error(err2);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._error;
        _this._complete = onComplete ? function() {
          try {
            onComplete();
          } catch (err) {
            destination.error(err);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._complete;
        return _this;
      }
      OperatorSubscriber2.prototype.unsubscribe = function() {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
          var closed_1 = this.closed;
          _super.prototype.unsubscribe.call(this);
          !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
      };
      return OperatorSubscriber2;
    }(Subscriber_1.Subscriber);
    exports.OperatorSubscriber = OperatorSubscriber;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/refCount.js
var require_refCount = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/refCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.refCount = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function refCount() {
      return lift_1.operate(function(source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
          if (!source || source._refCount <= 0 || 0 < --source._refCount) {
            connection = null;
            return;
          }
          var sharedConnection = source._connection;
          var conn = connection;
          connection = null;
          if (sharedConnection && (!conn || sharedConnection === conn)) {
            sharedConnection.unsubscribe();
          }
          subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) {
          connection = source.connect();
        }
      });
    }
    exports.refCount = refCount;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/ConnectableObservable.js
var require_ConnectableObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/ConnectableObservable.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectableObservable = void 0;
    var Observable_1 = require_Observable();
    var Subscription_1 = require_Subscription();
    var refCount_1 = require_refCount();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var lift_1 = require_lift();
    var ConnectableObservable = function(_super) {
      __extends(ConnectableObservable2, _super);
      function ConnectableObservable2(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (lift_1.hasLift(source)) {
          _this.lift = source.lift;
        }
        return _this;
      }
      ConnectableObservable2.prototype._subscribe = function(subscriber) {
        return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable2.prototype.getSubject = function() {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
          this._subject = this.subjectFactory();
        }
        return this._subject;
      };
      ConnectableObservable2.prototype._teardown = function() {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      };
      ConnectableObservable2.prototype.connect = function() {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
          connection = this._connection = new Subscription_1.Subscription();
          var subject_1 = this.getSubject();
          connection.add(this.source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subject_1, void 0, function() {
            _this._teardown();
            subject_1.complete();
          }, function(err) {
            _this._teardown();
            subject_1.error(err);
          }, function() {
            return _this._teardown();
          })));
          if (connection.closed) {
            this._connection = null;
            connection = Subscription_1.Subscription.EMPTY;
          }
        }
        return connection;
      };
      ConnectableObservable2.prototype.refCount = function() {
        return refCount_1.refCount()(this);
      };
      return ConnectableObservable2;
    }(Observable_1.Observable);
    exports.ConnectableObservable = ConnectableObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/performanceTimestampProvider.js
var require_performanceTimestampProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/performanceTimestampProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.performanceTimestampProvider = void 0;
    exports.performanceTimestampProvider = {
      now: function() {
        return (exports.performanceTimestampProvider.delegate || performance).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/animationFrameProvider.js
var require_animationFrameProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/animationFrameProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animationFrameProvider = void 0;
    var Subscription_1 = require_Subscription();
    exports.animationFrameProvider = {
      schedule: function(callback) {
        var request = requestAnimationFrame;
        var cancel = cancelAnimationFrame;
        var delegate = exports.animationFrameProvider.delegate;
        if (delegate) {
          request = delegate.requestAnimationFrame;
          cancel = delegate.cancelAnimationFrame;
        }
        var handle = request(function(timestamp) {
          cancel = void 0;
          callback(timestamp);
        });
        return new Subscription_1.Subscription(function() {
          return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
        });
      },
      requestAnimationFrame: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = exports.animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      cancelAnimationFrame: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = exports.animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/dom/animationFrames.js
var require_animationFrames = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/dom/animationFrames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animationFrames = void 0;
    var Observable_1 = require_Observable();
    var performanceTimestampProvider_1 = require_performanceTimestampProvider();
    var animationFrameProvider_1 = require_animationFrameProvider();
    function animationFrames(timestampProvider) {
      return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
    }
    exports.animationFrames = animationFrames;
    function animationFramesFactory(timestampProvider) {
      return new Observable_1.Observable(function(subscriber) {
        var provider = timestampProvider || performanceTimestampProvider_1.performanceTimestampProvider;
        var start = provider.now();
        var id = 0;
        var run = function() {
          if (!subscriber.closed) {
            id = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function(timestamp) {
              id = 0;
              var now = provider.now();
              subscriber.next({
                timestamp: timestampProvider ? now : timestamp,
                elapsed: now - start
              });
              run();
            });
          }
        };
        run();
        return function() {
          if (id) {
            animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id);
          }
        };
      });
    }
    var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();
  }
});

// node_modules/rxjs/dist/cjs/internal/util/ObjectUnsubscribedError.js
var require_ObjectUnsubscribedError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/ObjectUnsubscribedError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectUnsubscribedError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.ObjectUnsubscribedError = createErrorClass_1.createErrorClass(function(_super) {
      return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = "ObjectUnsubscribedError";
        this.message = "object unsubscribed";
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/Subject.js
var require_Subject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Subject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnonymousSubject = exports.Subject = void 0;
    var Observable_1 = require_Observable();
    var Subscription_1 = require_Subscription();
    var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
    var arrRemove_1 = require_arrRemove();
    var errorContext_1 = require_errorContext();
    var Subject = function(_super) {
      __extends(Subject2, _super);
      function Subject2() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
      }
      Subject2.prototype.lift = function(operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
      };
      Subject2.prototype._throwIfClosed = function() {
        if (this.closed) {
          throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
      };
      Subject2.prototype.next = function(value) {
        var _this = this;
        errorContext_1.errorContext(function() {
          var e_1, _a;
          _this._throwIfClosed();
          if (!_this.isStopped) {
            if (!_this.currentObservers) {
              _this.currentObservers = Array.from(_this.observers);
            }
            try {
              for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var observer = _c.value;
                observer.next(value);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          }
        });
      };
      Subject2.prototype.error = function(err) {
        var _this = this;
        errorContext_1.errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.hasError = _this.isStopped = true;
            _this.thrownError = err;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().error(err);
            }
          }
        });
      };
      Subject2.prototype.complete = function() {
        var _this = this;
        errorContext_1.errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.isStopped = true;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().complete();
            }
          }
        });
      };
      Subject2.prototype.unsubscribe = function() {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject2.prototype, "observed", {
        get: function() {
          var _a;
          return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
      });
      Subject2.prototype._trySubscribe = function(subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
      };
      Subject2.prototype._innerSubscribe = function(subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
          return Subscription_1.EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription_1.Subscription(function() {
          _this.currentObservers = null;
          arrRemove_1.arrRemove(observers, subscriber);
        });
      };
      Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped) {
          subscriber.complete();
        }
      };
      Subject2.prototype.asObservable = function() {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
      };
      Subject2.create = function(destination, source) {
        return new AnonymousSubject(destination, source);
      };
      return Subject2;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    var AnonymousSubject = function(_super) {
      __extends(AnonymousSubject2, _super);
      function AnonymousSubject2(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
      }
      AnonymousSubject2.prototype.next = function(value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      };
      AnonymousSubject2.prototype.error = function(err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      };
      AnonymousSubject2.prototype.complete = function() {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      };
      AnonymousSubject2.prototype._subscribe = function(subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : Subscription_1.EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject2;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/BehaviorSubject.js
var require_BehaviorSubject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/BehaviorSubject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BehaviorSubject = void 0;
    var Subject_1 = require_Subject();
    var BehaviorSubject = function(_super) {
      __extends(BehaviorSubject2, _super);
      function BehaviorSubject2(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
      }
      Object.defineProperty(BehaviorSubject2.prototype, "value", {
        get: function() {
          return this.getValue();
        },
        enumerable: false,
        configurable: true
      });
      BehaviorSubject2.prototype._subscribe = function(subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
      };
      BehaviorSubject2.prototype.getValue = function() {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
          throw thrownError;
        }
        this._throwIfClosed();
        return _value;
      };
      BehaviorSubject2.prototype.next = function(value) {
        _super.prototype.next.call(this, this._value = value);
      };
      return BehaviorSubject2;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/dateTimestampProvider.js
var require_dateTimestampProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/dateTimestampProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dateTimestampProvider = void 0;
    exports.dateTimestampProvider = {
      now: function() {
        return (exports.dateTimestampProvider.delegate || Date).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/ReplaySubject.js
var require_ReplaySubject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/ReplaySubject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplaySubject = void 0;
    var Subject_1 = require_Subject();
    var dateTimestampProvider_1 = require_dateTimestampProvider();
    var ReplaySubject = function(_super) {
      __extends(ReplaySubject2, _super);
      function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) {
          _bufferSize = Infinity;
        }
        if (_windowTime === void 0) {
          _windowTime = Infinity;
        }
        if (_timestampProvider === void 0) {
          _timestampProvider = dateTimestampProvider_1.dateTimestampProvider;
        }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
      }
      ReplaySubject2.prototype.next = function(value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
          _buffer.push(value);
          !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
      };
      ReplaySubject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
          subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
      };
      ReplaySubject2.prototype._trimBuffer = function() {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
          var now = _timestampProvider.now();
          var last = 0;
          for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
            last = i;
          }
          last && _buffer.splice(0, last + 1);
        }
      };
      return ReplaySubject2;
    }(Subject_1.Subject);
    exports.ReplaySubject = ReplaySubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/AsyncSubject.js
var require_AsyncSubject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/AsyncSubject.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncSubject = void 0;
    var Subject_1 = require_Subject();
    var AsyncSubject = function(_super) {
      __extends(AsyncSubject2, _super);
      function AsyncSubject2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = null;
        _this._hasValue = false;
        _this._isComplete = false;
        return _this;
      }
      AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped || _isComplete) {
          _hasValue && subscriber.next(_value);
          subscriber.complete();
        }
      };
      AsyncSubject2.prototype.next = function(value) {
        if (!this.isStopped) {
          this._value = value;
          this._hasValue = true;
        }
      };
      AsyncSubject2.prototype.complete = function() {
        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
        if (!_isComplete) {
          this._isComplete = true;
          _hasValue && _super.prototype.next.call(this, _value);
          _super.prototype.complete.call(this);
        }
      };
      return AsyncSubject2;
    }(Subject_1.Subject);
    exports.AsyncSubject = AsyncSubject;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/Action.js
var require_Action = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/Action.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Action = void 0;
    var Subscription_1 = require_Subscription();
    var Action = function(_super) {
      __extends(Action2, _super);
      function Action2(scheduler, work) {
        return _super.call(this) || this;
      }
      Action2.prototype.schedule = function(state, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return this;
      };
      return Action2;
    }(Subscription_1.Subscription);
    exports.Action = Action;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/intervalProvider.js
var require_intervalProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/intervalProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intervalProvider = void 0;
    exports.intervalProvider = {
      setInterval: function(handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var delegate = exports.intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
          return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearInterval: function(handle) {
        var delegate = exports.intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsyncAction.js
var require_AsyncAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsyncAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncAction = void 0;
    var Action_1 = require_Action();
    var intervalProvider_1 = require_intervalProvider();
    var arrRemove_1 = require_arrRemove();
    var AsyncAction = function(_super) {
      __extends(AsyncAction2, _super);
      function AsyncAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
      }
      AsyncAction2.prototype.schedule = function(state, delay) {
        var _a;
        if (delay === void 0) {
          delay = 0;
        }
        if (this.closed) {
          return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
          this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
      };
      AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return intervalProvider_1.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null && this.delay === delay && this.pending === false) {
          return id;
        }
        if (id != null) {
          intervalProvider_1.intervalProvider.clearInterval(id);
        }
        return void 0;
      };
      AsyncAction2.prototype.execute = function(state, delay) {
        if (this.closed) {
          return new Error("executing a cancelled action");
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
          return error;
        } else if (this.pending === false && this.id != null) {
          this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
      };
      AsyncAction2.prototype._execute = function(state, _delay) {
        var errored = false;
        var errorValue;
        try {
          this.work(state);
        } catch (e) {
          errored = true;
          errorValue = e ? e : new Error("Scheduled action threw falsy error");
        }
        if (errored) {
          this.unsubscribe();
          return errorValue;
        }
      };
      AsyncAction2.prototype.unsubscribe = function() {
        if (!this.closed) {
          var _a = this, id = _a.id, scheduler = _a.scheduler;
          var actions = scheduler.actions;
          this.work = this.state = this.scheduler = null;
          this.pending = false;
          arrRemove_1.arrRemove(actions, this);
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
          _super.prototype.unsubscribe.call(this);
        }
      };
      return AsyncAction2;
    }(Action_1.Action);
    exports.AsyncAction = AsyncAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/Immediate.js
var require_Immediate = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/Immediate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestTools = exports.Immediate = void 0;
    var nextHandle = 1;
    var resolved;
    var activeHandles = {};
    function findAndClearHandle(handle) {
      if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
      }
      return false;
    }
    exports.Immediate = {
      setImmediate: function(cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
          resolved = Promise.resolve();
        }
        resolved.then(function() {
          return findAndClearHandle(handle) && cb();
        });
        return handle;
      },
      clearImmediate: function(handle) {
        findAndClearHandle(handle);
      }
    };
    exports.TestTools = {
      pending: function() {
        return Object.keys(activeHandles).length;
      }
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/immediateProvider.js
var require_immediateProvider = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/immediateProvider.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.immediateProvider = void 0;
    var Immediate_1 = require_Immediate();
    var setImmediate = Immediate_1.Immediate.setImmediate;
    var clearImmediate = Immediate_1.Immediate.clearImmediate;
    exports.immediateProvider = {
      setImmediate: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = exports.immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
      },
      clearImmediate: function(handle) {
        var delegate = exports.immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsapAction.js
var require_AsapAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsapAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsapAction = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var immediateProvider_1 = require_immediateProvider();
    var AsapAction = function(_super) {
      __extends(AsapAction2, _super);
      function AsapAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay !== null && delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider_1.immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
      };
      AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
        var _a;
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null ? delay > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          immediateProvider_1.immediateProvider.clearImmediate(id);
          if (scheduler._scheduled === id) {
            scheduler._scheduled = void 0;
          }
        }
        return void 0;
      };
      return AsapAction2;
    }(AsyncAction_1.AsyncAction);
    exports.AsapAction = AsapAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/Scheduler.js
var require_Scheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Scheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Scheduler = void 0;
    var dateTimestampProvider_1 = require_dateTimestampProvider();
    var Scheduler = function() {
      function Scheduler2(schedulerActionCtor, now) {
        if (now === void 0) {
          now = Scheduler2.now;
        }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
      }
      Scheduler2.prototype.schedule = function(work, delay, state) {
        if (delay === void 0) {
          delay = 0;
        }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
      };
      Scheduler2.now = dateTimestampProvider_1.dateTimestampProvider.now;
      return Scheduler2;
    }();
    exports.Scheduler = Scheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsyncScheduler.js
var require_AsyncScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsyncScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncScheduler = void 0;
    var Scheduler_1 = require_Scheduler();
    var AsyncScheduler = function(_super) {
      __extends(AsyncScheduler2, _super);
      function AsyncScheduler2(SchedulerAction, now) {
        if (now === void 0) {
          now = Scheduler_1.Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
      }
      AsyncScheduler2.prototype.flush = function(action) {
        var actions = this.actions;
        if (this._active) {
          actions.push(action);
          return;
        }
        var error;
        this._active = true;
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while (action = actions.shift());
        this._active = false;
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsyncScheduler2;
    }(Scheduler_1.Scheduler);
    exports.AsyncScheduler = AsyncScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AsapScheduler.js
var require_AsapScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AsapScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsapScheduler = void 0;
    var AsyncScheduler_1 = require_AsyncScheduler();
    var AsapScheduler = function(_super) {
      __extends(AsapScheduler2, _super);
      function AsapScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = void 0;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsapScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.AsapScheduler = AsapScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/asap.js
var require_asap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/asap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asap = exports.asapScheduler = void 0;
    var AsapAction_1 = require_AsapAction();
    var AsapScheduler_1 = require_AsapScheduler();
    exports.asapScheduler = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
    exports.asap = exports.asapScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/async.js
var require_async = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.async = exports.asyncScheduler = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var AsyncScheduler_1 = require_AsyncScheduler();
    exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
    exports.async = exports.asyncScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/QueueAction.js
var require_QueueAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/QueueAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueueAction = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var QueueAction = function(_super) {
      __extends(QueueAction2, _super);
      function QueueAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      QueueAction2.prototype.schedule = function(state, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay > 0) {
          return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
      };
      QueueAction2.prototype.execute = function(state, delay) {
        return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
      };
      QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null && delay > 0 || delay == null && this.delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.flush(this);
        return 0;
      };
      return QueueAction2;
    }(AsyncAction_1.AsyncAction);
    exports.QueueAction = QueueAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/QueueScheduler.js
var require_QueueScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/QueueScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueueScheduler = void 0;
    var AsyncScheduler_1 = require_AsyncScheduler();
    var QueueScheduler = function(_super) {
      __extends(QueueScheduler2, _super);
      function QueueScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.QueueScheduler = QueueScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/queue.js
var require_queue = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/queue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.queue = exports.queueScheduler = void 0;
    var QueueAction_1 = require_QueueAction();
    var QueueScheduler_1 = require_QueueScheduler();
    exports.queueScheduler = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
    exports.queue = exports.queueScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameAction.js
var require_AnimationFrameAction = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameAction.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnimationFrameAction = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var animationFrameProvider_1 = require_animationFrameProvider();
    var AnimationFrameAction = function(_super) {
      __extends(AnimationFrameAction2, _super);
      function AnimationFrameAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (delay !== null && delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function() {
          return scheduler.flush(void 0);
        }));
      };
      AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
        var _a;
        if (delay === void 0) {
          delay = 0;
        }
        if (delay != null ? delay > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && id === scheduler._scheduled && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id);
          scheduler._scheduled = void 0;
        }
        return void 0;
      };
      return AnimationFrameAction2;
    }(AsyncAction_1.AsyncAction);
    exports.AnimationFrameAction = AnimationFrameAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameScheduler.js
var require_AnimationFrameScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnimationFrameScheduler = void 0;
    var AsyncScheduler_1 = require_AsyncScheduler();
    var AnimationFrameScheduler = function(_super) {
      __extends(AnimationFrameScheduler2, _super);
      function AnimationFrameScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId;
        if (action) {
          flushId = action.id;
        } else {
          flushId = this._scheduled;
          this._scheduled = void 0;
        }
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AnimationFrameScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.AnimationFrameScheduler = AnimationFrameScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/animationFrame.js
var require_animationFrame = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/animationFrame.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animationFrame = exports.animationFrameScheduler = void 0;
    var AnimationFrameAction_1 = require_AnimationFrameAction();
    var AnimationFrameScheduler_1 = require_AnimationFrameScheduler();
    exports.animationFrameScheduler = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
    exports.animationFrame = exports.animationFrameScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduler/VirtualTimeScheduler.js
var require_VirtualTimeScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduler/VirtualTimeScheduler.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VirtualAction = exports.VirtualTimeScheduler = void 0;
    var AsyncAction_1 = require_AsyncAction();
    var Subscription_1 = require_Subscription();
    var AsyncScheduler_1 = require_AsyncScheduler();
    var VirtualTimeScheduler = function(_super) {
      __extends(VirtualTimeScheduler2, _super);
      function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
        if (schedulerActionCtor === void 0) {
          schedulerActionCtor = VirtualAction;
        }
        if (maxFrames === void 0) {
          maxFrames = Infinity;
        }
        var _this = _super.call(this, schedulerActionCtor, function() {
          return _this.frame;
        }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
      }
      VirtualTimeScheduler2.prototype.flush = function() {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error;
        var action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
          actions.shift();
          this.frame = action.delay;
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        }
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      VirtualTimeScheduler2.frameTimeFactor = 10;
      return VirtualTimeScheduler2;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.VirtualTimeScheduler = VirtualTimeScheduler;
    var VirtualAction = function(_super) {
      __extends(VirtualAction2, _super);
      function VirtualAction2(scheduler, work, index) {
        if (index === void 0) {
          index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
      }
      VirtualAction2.prototype.schedule = function(state, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        if (Number.isFinite(delay)) {
          if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
          }
          this.active = false;
          var action = new VirtualAction2(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay);
        } else {
          return Subscription_1.Subscription.EMPTY;
        }
      };
      VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction2.sortActions);
        return 1;
      };
      VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return void 0;
      };
      VirtualAction2.prototype._execute = function(state, delay) {
        if (this.active === true) {
          return _super.prototype._execute.call(this, state, delay);
        }
      };
      VirtualAction2.sortActions = function(a, b) {
        if (a.delay === b.delay) {
          if (a.index === b.index) {
            return 0;
          } else if (a.index > b.index) {
            return 1;
          } else {
            return -1;
          }
        } else if (a.delay > b.delay) {
          return 1;
        } else {
          return -1;
        }
      };
      return VirtualAction2;
    }(AsyncAction_1.AsyncAction);
    exports.VirtualAction = VirtualAction;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/empty.js
var require_empty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/empty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.empty = exports.EMPTY = void 0;
    var Observable_1 = require_Observable();
    exports.EMPTY = new Observable_1.Observable(function(subscriber) {
      return subscriber.complete();
    });
    function empty(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
    }
    exports.empty = empty;
    function emptyScheduled(scheduler) {
      return new Observable_1.Observable(function(subscriber) {
        return scheduler.schedule(function() {
          return subscriber.complete();
        });
      });
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isScheduler.js
var require_isScheduler = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isScheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isScheduler = void 0;
    var isFunction_1 = require_isFunction();
    function isScheduler(value) {
      return value && isFunction_1.isFunction(value.schedule);
    }
    exports.isScheduler = isScheduler;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/args.js
var require_args = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/args.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.popNumber = exports.popScheduler = exports.popResultSelector = void 0;
    var isFunction_1 = require_isFunction();
    var isScheduler_1 = require_isScheduler();
    function last(arr) {
      return arr[arr.length - 1];
    }
    function popResultSelector(args) {
      return isFunction_1.isFunction(last(args)) ? args.pop() : void 0;
    }
    exports.popResultSelector = popResultSelector;
    function popScheduler(args) {
      return isScheduler_1.isScheduler(last(args)) ? args.pop() : void 0;
    }
    exports.popScheduler = popScheduler;
    function popNumber(args, defaultValue) {
      return typeof last(args) === "number" ? args.pop() : defaultValue;
    }
    exports.popNumber = popNumber;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isArrayLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayLike = void 0;
    exports.isArrayLike = function(x) {
      return x && typeof x.length === "number" && typeof x !== "function";
    };
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isPromise.js
var require_isPromise = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isPromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPromise = void 0;
    var isFunction_1 = require_isFunction();
    function isPromise(value) {
      return isFunction_1.isFunction(value === null || value === void 0 ? void 0 : value.then);
    }
    exports.isPromise = isPromise;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isInteropObservable.js
var require_isInteropObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isInteropObservable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isInteropObservable = void 0;
    var observable_1 = require_observable();
    var isFunction_1 = require_isFunction();
    function isInteropObservable(input) {
      return isFunction_1.isFunction(input[observable_1.observable]);
    }
    exports.isInteropObservable = isInteropObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isAsyncIterable.js
var require_isAsyncIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isAsyncIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAsyncIterable = void 0;
    var isFunction_1 = require_isFunction();
    function isAsyncIterable(obj) {
      return Symbol.asyncIterator && isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
    }
    exports.isAsyncIterable = isAsyncIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/throwUnobservableError.js
var require_throwUnobservableError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/throwUnobservableError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInvalidObservableTypeError = void 0;
    function createInvalidObservableTypeError(input) {
      return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
    }
    exports.createInvalidObservableTypeError = createInvalidObservableTypeError;
  }
});

// node_modules/rxjs/dist/cjs/internal/symbol/iterator.js
var require_iterator = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/symbol/iterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iterator = exports.getSymbolIterator = void 0;
    function getSymbolIterator() {
      if (typeof Symbol !== "function" || !Symbol.iterator) {
        return "@@iterator";
      }
      return Symbol.iterator;
    }
    exports.getSymbolIterator = getSymbolIterator;
    exports.iterator = getSymbolIterator();
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isIterable.js
var require_isIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIterable = void 0;
    var iterator_1 = require_iterator();
    var isFunction_1 = require_isFunction();
    function isIterable(input) {
      return isFunction_1.isFunction(input === null || input === void 0 ? void 0 : input[iterator_1.iterator]);
    }
    exports.isIterable = isIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isReadableStreamLike.js
var require_isReadableStreamLike = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isReadableStreamLike.js"(exports) {
    "use strict";
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __await = exports && exports.__await || function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n]) i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReadableStreamLike = exports.readableStreamLikeToAsyncGenerator = void 0;
    var isFunction_1 = require_isFunction();
    function readableStreamLikeToAsyncGenerator(readableStream) {
      return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              reader = readableStream.getReader();
              _b.label = 1;
            case 1:
              _b.trys.push([1, , 9, 10]);
              _b.label = 2;
            case 2:
              if (false) return [3, 8];
              return [4, __await(reader.read())];
            case 3:
              _a = _b.sent(), value = _a.value, done = _a.done;
              if (!done) return [3, 5];
              return [4, __await(void 0)];
            case 4:
              return [2, _b.sent()];
            case 5:
              return [4, __await(value)];
            case 6:
              return [4, _b.sent()];
            case 7:
              _b.sent();
              return [3, 2];
            case 8:
              return [3, 10];
            case 9:
              reader.releaseLock();
              return [7];
            case 10:
              return [2];
          }
        });
      });
    }
    exports.readableStreamLikeToAsyncGenerator = readableStreamLikeToAsyncGenerator;
    function isReadableStreamLike(obj) {
      return isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
    }
    exports.isReadableStreamLike = isReadableStreamLike;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/innerFrom.js
var require_innerFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/innerFrom.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromReadableStreamLike = exports.fromAsyncIterable = exports.fromIterable = exports.fromPromise = exports.fromArrayLike = exports.fromInteropObservable = exports.innerFrom = void 0;
    var isArrayLike_1 = require_isArrayLike();
    var isPromise_1 = require_isPromise();
    var Observable_1 = require_Observable();
    var isInteropObservable_1 = require_isInteropObservable();
    var isAsyncIterable_1 = require_isAsyncIterable();
    var throwUnobservableError_1 = require_throwUnobservableError();
    var isIterable_1 = require_isIterable();
    var isReadableStreamLike_1 = require_isReadableStreamLike();
    var isFunction_1 = require_isFunction();
    var reportUnhandledError_1 = require_reportUnhandledError();
    var observable_1 = require_observable();
    function innerFrom(input) {
      if (input instanceof Observable_1.Observable) {
        return input;
      }
      if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
          return fromInteropObservable(input);
        }
        if (isArrayLike_1.isArrayLike(input)) {
          return fromArrayLike(input);
        }
        if (isPromise_1.isPromise(input)) {
          return fromPromise(input);
        }
        if (isAsyncIterable_1.isAsyncIterable(input)) {
          return fromAsyncIterable(input);
        }
        if (isIterable_1.isIterable(input)) {
          return fromIterable(input);
        }
        if (isReadableStreamLike_1.isReadableStreamLike(input)) {
          return fromReadableStreamLike(input);
        }
      }
      throw throwUnobservableError_1.createInvalidObservableTypeError(input);
    }
    exports.innerFrom = innerFrom;
    function fromInteropObservable(obj) {
      return new Observable_1.Observable(function(subscriber) {
        var obs = obj[observable_1.observable]();
        if (isFunction_1.isFunction(obs.subscribe)) {
          return obs.subscribe(subscriber);
        }
        throw new TypeError("Provided object does not correctly implement Symbol.observable");
      });
    }
    exports.fromInteropObservable = fromInteropObservable;
    function fromArrayLike(array) {
      return new Observable_1.Observable(function(subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
          subscriber.next(array[i]);
        }
        subscriber.complete();
      });
    }
    exports.fromArrayLike = fromArrayLike;
    function fromPromise(promise) {
      return new Observable_1.Observable(function(subscriber) {
        promise.then(function(value) {
          if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
          }
        }, function(err) {
          return subscriber.error(err);
        }).then(null, reportUnhandledError_1.reportUnhandledError);
      });
    }
    exports.fromPromise = fromPromise;
    function fromIterable(iterable) {
      return new Observable_1.Observable(function(subscriber) {
        var e_1, _a;
        try {
          for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
            var value = iterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        subscriber.complete();
      });
    }
    exports.fromIterable = fromIterable;
    function fromAsyncIterable(asyncIterable) {
      return new Observable_1.Observable(function(subscriber) {
        process(asyncIterable, subscriber).catch(function(err) {
          return subscriber.error(err);
        });
      });
    }
    exports.fromAsyncIterable = fromAsyncIterable;
    function fromReadableStreamLike(readableStream) {
      return fromAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(readableStream));
    }
    exports.fromReadableStreamLike = fromReadableStreamLike;
    function process(asyncIterable, subscriber) {
      var asyncIterable_1, asyncIterable_1_1;
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function() {
        var value, e_2_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _b.trys.push([0, 5, 6, 11]);
              asyncIterable_1 = __asyncValues(asyncIterable);
              _b.label = 1;
            case 1:
              return [4, asyncIterable_1.next()];
            case 2:
              if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
              value = asyncIterable_1_1.value;
              subscriber.next(value);
              if (subscriber.closed) {
                return [2];
              }
              _b.label = 3;
            case 3:
              return [3, 1];
            case 4:
              return [3, 11];
            case 5:
              e_2_1 = _b.sent();
              e_2 = { error: e_2_1 };
              return [3, 11];
            case 6:
              _b.trys.push([6, , 9, 10]);
              if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
              return [4, _a.call(asyncIterable_1)];
            case 7:
              _b.sent();
              _b.label = 8;
            case 8:
              return [3, 10];
            case 9:
              if (e_2) throw e_2.error;
              return [7];
            case 10:
              return [7];
            case 11:
              subscriber.complete();
              return [2];
          }
        });
      });
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/executeSchedule.js
var require_executeSchedule = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/executeSchedule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.executeSchedule = void 0;
    function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
      if (delay === void 0) {
        delay = 0;
      }
      if (repeat === void 0) {
        repeat = false;
      }
      var scheduleSubscription = scheduler.schedule(function() {
        work();
        if (repeat) {
          parentSubscription.add(this.schedule(null, delay));
        } else {
          this.unsubscribe();
        }
      }, delay);
      parentSubscription.add(scheduleSubscription);
      if (!repeat) {
        return scheduleSubscription;
      }
    }
    exports.executeSchedule = executeSchedule;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/observeOn.js
var require_observeOn = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/observeOn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.observeOn = void 0;
    var executeSchedule_1 = require_executeSchedule();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function observeOn(scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            return subscriber.next(value);
          }, delay);
        }, function() {
          return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            return subscriber.complete();
          }, delay);
        }, function(err) {
          return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            return subscriber.error(err);
          }, delay);
        }));
      });
    }
    exports.observeOn = observeOn;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/subscribeOn.js
var require_subscribeOn = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/subscribeOn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.subscribeOn = void 0;
    var lift_1 = require_lift();
    function subscribeOn(scheduler, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return lift_1.operate(function(source, subscriber) {
        subscriber.add(scheduler.schedule(function() {
          return source.subscribe(subscriber);
        }, delay));
      });
    }
    exports.subscribeOn = subscribeOn;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleObservable.js
var require_scheduleObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleObservable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleObservable = void 0;
    var innerFrom_1 = require_innerFrom();
    var observeOn_1 = require_observeOn();
    var subscribeOn_1 = require_subscribeOn();
    function scheduleObservable(input, scheduler) {
      return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
    }
    exports.scheduleObservable = scheduleObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/schedulePromise.js
var require_schedulePromise = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/schedulePromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.schedulePromise = void 0;
    var innerFrom_1 = require_innerFrom();
    var observeOn_1 = require_observeOn();
    var subscribeOn_1 = require_subscribeOn();
    function schedulePromise(input, scheduler) {
      return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
    }
    exports.schedulePromise = schedulePromise;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleArray.js
var require_scheduleArray = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleArray = void 0;
    var Observable_1 = require_Observable();
    function scheduleArray(input, scheduler) {
      return new Observable_1.Observable(function(subscriber) {
        var i = 0;
        return scheduler.schedule(function() {
          if (i === input.length) {
            subscriber.complete();
          } else {
            subscriber.next(input[i++]);
            if (!subscriber.closed) {
              this.schedule();
            }
          }
        });
      });
    }
    exports.scheduleArray = scheduleArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleIterable.js
var require_scheduleIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleIterable = void 0;
    var Observable_1 = require_Observable();
    var iterator_1 = require_iterator();
    var isFunction_1 = require_isFunction();
    var executeSchedule_1 = require_executeSchedule();
    function scheduleIterable(input, scheduler) {
      return new Observable_1.Observable(function(subscriber) {
        var iterator;
        executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
          iterator = input[iterator_1.iterator]();
          executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            var _a;
            var value;
            var done;
            try {
              _a = iterator.next(), value = _a.value, done = _a.done;
            } catch (err) {
              subscriber.error(err);
              return;
            }
            if (done) {
              subscriber.complete();
            } else {
              subscriber.next(value);
            }
          }, 0, true);
        });
        return function() {
          return isFunction_1.isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
        };
      });
    }
    exports.scheduleIterable = scheduleIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleAsyncIterable.js
var require_scheduleAsyncIterable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleAsyncIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleAsyncIterable = void 0;
    var Observable_1 = require_Observable();
    var executeSchedule_1 = require_executeSchedule();
    function scheduleAsyncIterable(input, scheduler) {
      if (!input) {
        throw new Error("Iterable cannot be null");
      }
      return new Observable_1.Observable(function(subscriber) {
        executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
          var iterator = input[Symbol.asyncIterator]();
          executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            iterator.next().then(function(result) {
              if (result.done) {
                subscriber.complete();
              } else {
                subscriber.next(result.value);
              }
            });
          }, 0, true);
        });
      });
    }
    exports.scheduleAsyncIterable = scheduleAsyncIterable;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduleReadableStreamLike.js
var require_scheduleReadableStreamLike = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduleReadableStreamLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleReadableStreamLike = void 0;
    var scheduleAsyncIterable_1 = require_scheduleAsyncIterable();
    var isReadableStreamLike_1 = require_isReadableStreamLike();
    function scheduleReadableStreamLike(input, scheduler) {
      return scheduleAsyncIterable_1.scheduleAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(input), scheduler);
    }
    exports.scheduleReadableStreamLike = scheduleReadableStreamLike;
  }
});

// node_modules/rxjs/dist/cjs/internal/scheduled/scheduled.js
var require_scheduled = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/scheduled/scheduled.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduled = void 0;
    var scheduleObservable_1 = require_scheduleObservable();
    var schedulePromise_1 = require_schedulePromise();
    var scheduleArray_1 = require_scheduleArray();
    var scheduleIterable_1 = require_scheduleIterable();
    var scheduleAsyncIterable_1 = require_scheduleAsyncIterable();
    var isInteropObservable_1 = require_isInteropObservable();
    var isPromise_1 = require_isPromise();
    var isArrayLike_1 = require_isArrayLike();
    var isIterable_1 = require_isIterable();
    var isAsyncIterable_1 = require_isAsyncIterable();
    var throwUnobservableError_1 = require_throwUnobservableError();
    var isReadableStreamLike_1 = require_isReadableStreamLike();
    var scheduleReadableStreamLike_1 = require_scheduleReadableStreamLike();
    function scheduled(input, scheduler) {
      if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
          return scheduleObservable_1.scheduleObservable(input, scheduler);
        }
        if (isArrayLike_1.isArrayLike(input)) {
          return scheduleArray_1.scheduleArray(input, scheduler);
        }
        if (isPromise_1.isPromise(input)) {
          return schedulePromise_1.schedulePromise(input, scheduler);
        }
        if (isAsyncIterable_1.isAsyncIterable(input)) {
          return scheduleAsyncIterable_1.scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable_1.isIterable(input)) {
          return scheduleIterable_1.scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike_1.isReadableStreamLike(input)) {
          return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input, scheduler);
        }
      }
      throw throwUnobservableError_1.createInvalidObservableTypeError(input);
    }
    exports.scheduled = scheduled;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/from.js
var require_from = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/from.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.from = void 0;
    var scheduled_1 = require_scheduled();
    var innerFrom_1 = require_innerFrom();
    function from(input, scheduler) {
      return scheduler ? scheduled_1.scheduled(input, scheduler) : innerFrom_1.innerFrom(input);
    }
    exports.from = from;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/of.js
var require_of = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/of.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.of = void 0;
    var args_1 = require_args();
    var from_1 = require_from();
    function of() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      return from_1.from(args, scheduler);
    }
    exports.of = of;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/throwError.js
var require_throwError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/throwError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwError = void 0;
    var Observable_1 = require_Observable();
    var isFunction_1 = require_isFunction();
    function throwError(errorOrErrorFactory, scheduler) {
      var errorFactory = isFunction_1.isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
        return errorOrErrorFactory;
      };
      var init = function(subscriber) {
        return subscriber.error(errorFactory());
      };
      return new Observable_1.Observable(scheduler ? function(subscriber) {
        return scheduler.schedule(init, 0, subscriber);
      } : init);
    }
    exports.throwError = throwError;
  }
});

// node_modules/rxjs/dist/cjs/internal/Notification.js
var require_Notification = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/Notification.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.observeNotification = exports.Notification = exports.NotificationKind = void 0;
    var empty_1 = require_empty();
    var of_1 = require_of();
    var throwError_1 = require_throwError();
    var isFunction_1 = require_isFunction();
    var NotificationKind;
    (function(NotificationKind2) {
      NotificationKind2["NEXT"] = "N";
      NotificationKind2["ERROR"] = "E";
      NotificationKind2["COMPLETE"] = "C";
    })(NotificationKind = exports.NotificationKind || (exports.NotificationKind = {}));
    var Notification = function() {
      function Notification2(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === "N";
      }
      Notification2.prototype.observe = function(observer) {
        return observeNotification(this, observer);
      };
      Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
      };
      Notification2.prototype.accept = function(nextOrObserver, error, complete) {
        var _a;
        return isFunction_1.isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
      };
      Notification2.prototype.toObservable = function() {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        var result = kind === "N" ? of_1.of(value) : kind === "E" ? throwError_1.throwError(function() {
          return error;
        }) : kind === "C" ? empty_1.EMPTY : 0;
        if (!result) {
          throw new TypeError("Unexpected notification kind " + kind);
        }
        return result;
      };
      Notification2.createNext = function(value) {
        return new Notification2("N", value);
      };
      Notification2.createError = function(err) {
        return new Notification2("E", void 0, err);
      };
      Notification2.createComplete = function() {
        return Notification2.completeNotification;
      };
      Notification2.completeNotification = new Notification2("C");
      return Notification2;
    }();
    exports.Notification = Notification;
    function observeNotification(notification, observer) {
      var _a, _b, _c;
      var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
      if (typeof kind !== "string") {
        throw new TypeError('Invalid notification, missing "kind"');
      }
      kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
    }
    exports.observeNotification = observeNotification;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isObservable.js
var require_isObservable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isObservable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObservable = void 0;
    var Observable_1 = require_Observable();
    var isFunction_1 = require_isFunction();
    function isObservable(obj) {
      return !!obj && (obj instanceof Observable_1.Observable || isFunction_1.isFunction(obj.lift) && isFunction_1.isFunction(obj.subscribe));
    }
    exports.isObservable = isObservable;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/EmptyError.js
var require_EmptyError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/EmptyError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmptyError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.EmptyError = createErrorClass_1.createErrorClass(function(_super) {
      return function EmptyErrorImpl() {
        _super(this);
        this.name = "EmptyError";
        this.message = "no elements in sequence";
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/lastValueFrom.js
var require_lastValueFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/lastValueFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lastValueFrom = void 0;
    var EmptyError_1 = require_EmptyError();
    function lastValueFrom(source, config) {
      var hasConfig = typeof config === "object";
      return new Promise(function(resolve, reject) {
        var _hasValue = false;
        var _value;
        source.subscribe({
          next: function(value) {
            _value = value;
            _hasValue = true;
          },
          error: reject,
          complete: function() {
            if (_hasValue) {
              resolve(_value);
            } else if (hasConfig) {
              resolve(config.defaultValue);
            } else {
              reject(new EmptyError_1.EmptyError());
            }
          }
        });
      });
    }
    exports.lastValueFrom = lastValueFrom;
  }
});

// node_modules/rxjs/dist/cjs/internal/firstValueFrom.js
var require_firstValueFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/firstValueFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.firstValueFrom = void 0;
    var EmptyError_1 = require_EmptyError();
    var Subscriber_1 = require_Subscriber();
    function firstValueFrom(source, config) {
      var hasConfig = typeof config === "object";
      return new Promise(function(resolve, reject) {
        var subscriber = new Subscriber_1.SafeSubscriber({
          next: function(value) {
            resolve(value);
            subscriber.unsubscribe();
          },
          error: reject,
          complete: function() {
            if (hasConfig) {
              resolve(config.defaultValue);
            } else {
              reject(new EmptyError_1.EmptyError());
            }
          }
        });
        source.subscribe(subscriber);
      });
    }
    exports.firstValueFrom = firstValueFrom;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/ArgumentOutOfRangeError.js
var require_ArgumentOutOfRangeError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/ArgumentOutOfRangeError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArgumentOutOfRangeError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.ArgumentOutOfRangeError = createErrorClass_1.createErrorClass(function(_super) {
      return function ArgumentOutOfRangeErrorImpl() {
        _super(this);
        this.name = "ArgumentOutOfRangeError";
        this.message = "argument out of range";
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/NotFoundError.js
var require_NotFoundError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/NotFoundError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotFoundError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.NotFoundError = createErrorClass_1.createErrorClass(function(_super) {
      return function NotFoundErrorImpl(message) {
        _super(this);
        this.name = "NotFoundError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/SequenceError.js
var require_SequenceError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/SequenceError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SequenceError = void 0;
    var createErrorClass_1 = require_createErrorClass();
    exports.SequenceError = createErrorClass_1.createErrorClass(function(_super) {
      return function SequenceErrorImpl(message) {
        _super(this);
        this.name = "SequenceError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/cjs/internal/util/isDate.js
var require_isDate = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/isDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidDate = void 0;
    function isValidDate(value) {
      return value instanceof Date && !isNaN(value);
    }
    exports.isValidDate = isValidDate;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timeout.js
var require_timeout = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeout = exports.TimeoutError = void 0;
    var async_1 = require_async();
    var isDate_1 = require_isDate();
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var createErrorClass_1 = require_createErrorClass();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var executeSchedule_1 = require_executeSchedule();
    exports.TimeoutError = createErrorClass_1.createErrorClass(function(_super) {
      return function TimeoutErrorImpl(info) {
        if (info === void 0) {
          info = null;
        }
        _super(this);
        this.message = "Timeout has occurred";
        this.name = "TimeoutError";
        this.info = info;
      };
    });
    function timeout(config, schedulerArg) {
      var _a = isDate_1.isValidDate(config) ? { first: config } : typeof config === "number" ? { each: config } : config, first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : async_1.asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
      if (first == null && each == null) {
        throw new TypeError("No timeout provided.");
      }
      return lift_1.operate(function(source, subscriber) {
        var originalSourceSubscription;
        var timerSubscription;
        var lastValue = null;
        var seen = 0;
        var startTimer = function(delay) {
          timerSubscription = executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
            try {
              originalSourceSubscription.unsubscribe();
              innerFrom_1.innerFrom(_with({
                meta,
                lastValue,
                seen
              })).subscribe(subscriber);
            } catch (err) {
              subscriber.error(err);
            }
          }, delay);
        };
        originalSourceSubscription = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
          seen++;
          subscriber.next(lastValue = value);
          each > 0 && startTimer(each);
        }, void 0, void 0, function() {
          if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
          }
          lastValue = null;
        }));
        !seen && startTimer(first != null ? typeof first === "number" ? first : +first - scheduler.now() : each);
      });
    }
    exports.timeout = timeout;
    function timeoutErrorFactory(info) {
      throw new exports.TimeoutError(info);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/map.js
var require_map = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/map.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.map = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function map(project, thisArg) {
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          subscriber.next(project.call(thisArg, value, index++));
        }));
      });
    }
    exports.map = map;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/mapOneOrManyArgs.js
var require_mapOneOrManyArgs = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/mapOneOrManyArgs.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapOneOrManyArgs = void 0;
    var map_1 = require_map();
    var isArray = Array.isArray;
    function callOrApply(fn, args) {
      return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
    }
    function mapOneOrManyArgs(fn) {
      return map_1.map(function(args) {
        return callOrApply(fn, args);
      });
    }
    exports.mapOneOrManyArgs = mapOneOrManyArgs;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/bindCallbackInternals.js
var require_bindCallbackInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/bindCallbackInternals.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindCallbackInternals = void 0;
    var isScheduler_1 = require_isScheduler();
    var Observable_1 = require_Observable();
    var subscribeOn_1 = require_subscribeOn();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var observeOn_1 = require_observeOn();
    var AsyncSubject_1 = require_AsyncSubject();
    function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
      if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
          scheduler = resultSelector;
        } else {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
          };
        }
      }
      if (scheduler) {
        return function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
        };
      }
      return function() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var subject = new AsyncSubject_1.AsyncSubject();
        var uninitialized = true;
        return new Observable_1.Observable(function(subscriber) {
          var subs = subject.subscribe(subscriber);
          if (uninitialized) {
            uninitialized = false;
            var isAsync_1 = false;
            var isComplete_1 = false;
            callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [
              function() {
                var results = [];
                for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                  results[_i2] = arguments[_i2];
                }
                if (isNodeStyle) {
                  var err = results.shift();
                  if (err != null) {
                    subject.error(err);
                    return;
                  }
                }
                subject.next(1 < results.length ? results : results[0]);
                isComplete_1 = true;
                if (isAsync_1) {
                  subject.complete();
                }
              }
            ]));
            if (isComplete_1) {
              subject.complete();
            }
            isAsync_1 = true;
          }
          return subs;
        });
      };
    }
    exports.bindCallbackInternals = bindCallbackInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/bindCallback.js
var require_bindCallback = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/bindCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindCallback = void 0;
    var bindCallbackInternals_1 = require_bindCallbackInternals();
    function bindCallback(callbackFunc, resultSelector, scheduler) {
      return bindCallbackInternals_1.bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
    }
    exports.bindCallback = bindCallback;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/bindNodeCallback.js
var require_bindNodeCallback = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/bindNodeCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindNodeCallback = void 0;
    var bindCallbackInternals_1 = require_bindCallbackInternals();
    function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
      return bindCallbackInternals_1.bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
    }
    exports.bindNodeCallback = bindNodeCallback;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/argsArgArrayOrObject.js
var require_argsArgArrayOrObject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/argsArgArrayOrObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.argsArgArrayOrObject = void 0;
    var isArray = Array.isArray;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectProto = Object.prototype;
    var getKeys = Object.keys;
    function argsArgArrayOrObject(args) {
      if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) {
          return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
          var keys = getKeys(first_1);
          return {
            args: keys.map(function(key) {
              return first_1[key];
            }),
            keys
          };
        }
      }
      return { args, keys: null };
    }
    exports.argsArgArrayOrObject = argsArgArrayOrObject;
    function isPOJO(obj) {
      return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/util/createObject.js
var require_createObject = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/createObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createObject = void 0;
    function createObject(keys, values) {
      return keys.reduce(function(result, key, i) {
        return result[key] = values[i], result;
      }, {});
    }
    exports.createObject = createObject;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/combineLatest.js
var require_combineLatest = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/combineLatest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatestInit = exports.combineLatest = void 0;
    var Observable_1 = require_Observable();
    var argsArgArrayOrObject_1 = require_argsArgArrayOrObject();
    var from_1 = require_from();
    var identity_1 = require_identity();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var args_1 = require_args();
    var createObject_1 = require_createObject();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var executeSchedule_1 = require_executeSchedule();
    function combineLatest() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      var resultSelector = args_1.popResultSelector(args);
      var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
      if (observables.length === 0) {
        return from_1.from([], scheduler);
      }
      var result = new Observable_1.Observable(combineLatestInit(observables, scheduler, keys ? function(values) {
        return createObject_1.createObject(keys, values);
      } : identity_1.identity));
      return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
    }
    exports.combineLatest = combineLatest;
    function combineLatestInit(observables, scheduler, valueTransform) {
      if (valueTransform === void 0) {
        valueTransform = identity_1.identity;
      }
      return function(subscriber) {
        maybeSchedule(scheduler, function() {
          var length = observables.length;
          var values = new Array(length);
          var active = length;
          var remainingFirstValues = length;
          var _loop_1 = function(i2) {
            maybeSchedule(scheduler, function() {
              var source = from_1.from(observables[i2], scheduler);
              var hasFirstValue = false;
              source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
                values[i2] = value;
                if (!hasFirstValue) {
                  hasFirstValue = true;
                  remainingFirstValues--;
                }
                if (!remainingFirstValues) {
                  subscriber.next(valueTransform(values.slice()));
                }
              }, function() {
                if (!--active) {
                  subscriber.complete();
                }
              }));
            }, subscriber);
          };
          for (var i = 0; i < length; i++) {
            _loop_1(i);
          }
        }, subscriber);
      };
    }
    exports.combineLatestInit = combineLatestInit;
    function maybeSchedule(scheduler, execute, subscription) {
      if (scheduler) {
        executeSchedule_1.executeSchedule(subscription, scheduler, execute);
      } else {
        execute();
      }
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeInternals.js
var require_mergeInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeInternals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeInternals = void 0;
    var innerFrom_1 = require_innerFrom();
    var executeSchedule_1 = require_executeSchedule();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
      var buffer = [];
      var active = 0;
      var index = 0;
      var isComplete = false;
      var checkComplete = function() {
        if (isComplete && !buffer.length && !active) {
          subscriber.complete();
        }
      };
      var outerNext = function(value) {
        return active < concurrent ? doInnerSub(value) : buffer.push(value);
      };
      var doInnerSub = function(value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom_1.innerFrom(project(value, index++)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(innerValue) {
          onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
          if (expand) {
            outerNext(innerValue);
          } else {
            subscriber.next(innerValue);
          }
        }, function() {
          innerComplete = true;
        }, void 0, function() {
          if (innerComplete) {
            try {
              active--;
              var _loop_1 = function() {
                var bufferedValue = buffer.shift();
                if (innerSubScheduler) {
                  executeSchedule_1.executeSchedule(subscriber, innerSubScheduler, function() {
                    return doInnerSub(bufferedValue);
                  });
                } else {
                  doInnerSub(bufferedValue);
                }
              };
              while (buffer.length && active < concurrent) {
                _loop_1();
              }
              checkComplete();
            } catch (err) {
              subscriber.error(err);
            }
          }
        }));
      };
      source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, outerNext, function() {
        isComplete = true;
        checkComplete();
      }));
      return function() {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
      };
    }
    exports.mergeInternals = mergeInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeMap.js
var require_mergeMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeMap = void 0;
    var map_1 = require_map();
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var mergeInternals_1 = require_mergeInternals();
    var isFunction_1 = require_isFunction();
    function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      if (isFunction_1.isFunction(resultSelector)) {
        return mergeMap(function(a, i) {
          return map_1.map(function(b, ii) {
            return resultSelector(a, b, i, ii);
          })(innerFrom_1.innerFrom(project(a, i)));
        }, concurrent);
      } else if (typeof resultSelector === "number") {
        concurrent = resultSelector;
      }
      return lift_1.operate(function(source, subscriber) {
        return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent);
      });
    }
    exports.mergeMap = mergeMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeAll.js
var require_mergeAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeAll = void 0;
    var mergeMap_1 = require_mergeMap();
    var identity_1 = require_identity();
    function mergeAll(concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      return mergeMap_1.mergeMap(identity_1.identity, concurrent);
    }
    exports.mergeAll = mergeAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatAll.js
var require_concatAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatAll = void 0;
    var mergeAll_1 = require_mergeAll();
    function concatAll() {
      return mergeAll_1.mergeAll(1);
    }
    exports.concatAll = concatAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/concat.js
var require_concat = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/concat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concat = void 0;
    var concatAll_1 = require_concatAll();
    var args_1 = require_args();
    var from_1 = require_from();
    function concat() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return concatAll_1.concatAll()(from_1.from(args, args_1.popScheduler(args)));
    }
    exports.concat = concat;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/defer.js
var require_defer = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/defer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defer = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    function defer(observableFactory) {
      return new Observable_1.Observable(function(subscriber) {
        innerFrom_1.innerFrom(observableFactory()).subscribe(subscriber);
      });
    }
    exports.defer = defer;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/connectable.js
var require_connectable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/connectable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.connectable = void 0;
    var Subject_1 = require_Subject();
    var Observable_1 = require_Observable();
    var defer_1 = require_defer();
    var DEFAULT_CONFIG = {
      connector: function() {
        return new Subject_1.Subject();
      },
      resetOnDisconnect: true
    };
    function connectable(source, config) {
      if (config === void 0) {
        config = DEFAULT_CONFIG;
      }
      var connection = null;
      var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
      var subject = connector();
      var result = new Observable_1.Observable(function(subscriber) {
        return subject.subscribe(subscriber);
      });
      result.connect = function() {
        if (!connection || connection.closed) {
          connection = defer_1.defer(function() {
            return source;
          }).subscribe(subject);
          if (resetOnDisconnect) {
            connection.add(function() {
              return subject = connector();
            });
          }
        }
        return connection;
      };
      return result;
    }
    exports.connectable = connectable;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/forkJoin.js
var require_forkJoin = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/forkJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.forkJoin = void 0;
    var Observable_1 = require_Observable();
    var argsArgArrayOrObject_1 = require_argsArgArrayOrObject();
    var innerFrom_1 = require_innerFrom();
    var args_1 = require_args();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var createObject_1 = require_createObject();
    function forkJoin() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resultSelector = args_1.popResultSelector(args);
      var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
      var result = new Observable_1.Observable(function(subscriber) {
        var length = sources.length;
        if (!length) {
          subscriber.complete();
          return;
        }
        var values = new Array(length);
        var remainingCompletions = length;
        var remainingEmissions = length;
        var _loop_1 = function(sourceIndex2) {
          var hasValue = false;
          innerFrom_1.innerFrom(sources[sourceIndex2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            if (!hasValue) {
              hasValue = true;
              remainingEmissions--;
            }
            values[sourceIndex2] = value;
          }, function() {
            return remainingCompletions--;
          }, void 0, function() {
            if (!remainingCompletions || !hasValue) {
              if (!remainingEmissions) {
                subscriber.next(keys ? createObject_1.createObject(keys, values) : values);
              }
              subscriber.complete();
            }
          }));
        };
        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
          _loop_1(sourceIndex);
        }
      });
      return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
    }
    exports.forkJoin = forkJoin;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/fromEvent.js
var require_fromEvent = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/fromEvent.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEvent = void 0;
    var innerFrom_1 = require_innerFrom();
    var Observable_1 = require_Observable();
    var mergeMap_1 = require_mergeMap();
    var isArrayLike_1 = require_isArrayLike();
    var isFunction_1 = require_isFunction();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var nodeEventEmitterMethods = ["addListener", "removeListener"];
    var eventTargetMethods = ["addEventListener", "removeEventListener"];
    var jqueryMethods = ["on", "off"];
    function fromEvent(target, eventName, options, resultSelector) {
      if (isFunction_1.isFunction(options)) {
        resultSelector = options;
        options = void 0;
      }
      if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
      }
      var _a = __read(isEventTarget(target) ? eventTargetMethods.map(function(methodName) {
        return function(handler) {
          return target[methodName](eventName, handler, options);
        };
      }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2), add = _a[0], remove = _a[1];
      if (!add) {
        if (isArrayLike_1.isArrayLike(target)) {
          return mergeMap_1.mergeMap(function(subTarget) {
            return fromEvent(subTarget, eventName, options);
          })(innerFrom_1.innerFrom(target));
        }
      }
      if (!add) {
        throw new TypeError("Invalid event target");
      }
      return new Observable_1.Observable(function(subscriber) {
        var handler = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return subscriber.next(1 < args.length ? args : args[0]);
        };
        add(handler);
        return function() {
          return remove(handler);
        };
      });
    }
    exports.fromEvent = fromEvent;
    function toCommonHandlerRegistry(target, eventName) {
      return function(methodName) {
        return function(handler) {
          return target[methodName](eventName, handler);
        };
      };
    }
    function isNodeStyleEventEmitter(target) {
      return isFunction_1.isFunction(target.addListener) && isFunction_1.isFunction(target.removeListener);
    }
    function isJQueryStyleEventEmitter(target) {
      return isFunction_1.isFunction(target.on) && isFunction_1.isFunction(target.off);
    }
    function isEventTarget(target) {
      return isFunction_1.isFunction(target.addEventListener) && isFunction_1.isFunction(target.removeEventListener);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/fromEventPattern.js
var require_fromEventPattern = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/fromEventPattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEventPattern = void 0;
    var Observable_1 = require_Observable();
    var isFunction_1 = require_isFunction();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    function fromEventPattern(addHandler, removeHandler, resultSelector) {
      if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
      }
      return new Observable_1.Observable(function(subscriber) {
        var handler = function() {
          var e = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            e[_i] = arguments[_i];
          }
          return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue = addHandler(handler);
        return isFunction_1.isFunction(removeHandler) ? function() {
          return removeHandler(handler, retValue);
        } : void 0;
      });
    }
    exports.fromEventPattern = fromEventPattern;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/generate.js
var require_generate = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/generate.js"(exports) {
    "use strict";
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generate = void 0;
    var identity_1 = require_identity();
    var isScheduler_1 = require_isScheduler();
    var defer_1 = require_defer();
    var scheduleIterable_1 = require_scheduleIterable();
    function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
      var _a, _b;
      var resultSelector;
      var initialState;
      if (arguments.length === 1) {
        _a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity_1.identity : _b, scheduler = _a.scheduler;
      } else {
        initialState = initialStateOrOptions;
        if (!resultSelectorOrScheduler || isScheduler_1.isScheduler(resultSelectorOrScheduler)) {
          resultSelector = identity_1.identity;
          scheduler = resultSelectorOrScheduler;
        } else {
          resultSelector = resultSelectorOrScheduler;
        }
      }
      function gen() {
        var state;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              state = initialState;
              _a2.label = 1;
            case 1:
              if (!(!condition || condition(state))) return [3, 4];
              return [4, resultSelector(state)];
            case 2:
              _a2.sent();
              _a2.label = 3;
            case 3:
              state = iterate(state);
              return [3, 1];
            case 4:
              return [2];
          }
        });
      }
      return defer_1.defer(scheduler ? function() {
        return scheduleIterable_1.scheduleIterable(gen(), scheduler);
      } : gen);
    }
    exports.generate = generate;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/iif.js
var require_iif = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/iif.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iif = void 0;
    var defer_1 = require_defer();
    function iif(condition, trueResult, falseResult) {
      return defer_1.defer(function() {
        return condition() ? trueResult : falseResult;
      });
    }
    exports.iif = iif;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/timer.js
var require_timer = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/timer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timer = void 0;
    var Observable_1 = require_Observable();
    var async_1 = require_async();
    var isScheduler_1 = require_isScheduler();
    var isDate_1 = require_isDate();
    function timer(dueTime, intervalOrScheduler, scheduler) {
      if (dueTime === void 0) {
        dueTime = 0;
      }
      if (scheduler === void 0) {
        scheduler = async_1.async;
      }
      var intervalDuration = -1;
      if (intervalOrScheduler != null) {
        if (isScheduler_1.isScheduler(intervalOrScheduler)) {
          scheduler = intervalOrScheduler;
        } else {
          intervalDuration = intervalOrScheduler;
        }
      }
      return new Observable_1.Observable(function(subscriber) {
        var due = isDate_1.isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
        if (due < 0) {
          due = 0;
        }
        var n = 0;
        return scheduler.schedule(function() {
          if (!subscriber.closed) {
            subscriber.next(n++);
            if (0 <= intervalDuration) {
              this.schedule(void 0, intervalDuration);
            } else {
              subscriber.complete();
            }
          }
        }, due);
      });
    }
    exports.timer = timer;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/interval.js
var require_interval = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/interval.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.interval = void 0;
    var async_1 = require_async();
    var timer_1 = require_timer();
    function interval(period, scheduler) {
      if (period === void 0) {
        period = 0;
      }
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      if (period < 0) {
        period = 0;
      }
      return timer_1.timer(period, period, scheduler);
    }
    exports.interval = interval;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/merge.js
var require_merge = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/merge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.merge = void 0;
    var mergeAll_1 = require_mergeAll();
    var innerFrom_1 = require_innerFrom();
    var empty_1 = require_empty();
    var args_1 = require_args();
    var from_1 = require_from();
    function merge() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      var concurrent = args_1.popNumber(args, Infinity);
      var sources = args;
      return !sources.length ? empty_1.EMPTY : sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : mergeAll_1.mergeAll(concurrent)(from_1.from(sources, scheduler));
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/never.js
var require_never = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/never.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.never = exports.NEVER = void 0;
    var Observable_1 = require_Observable();
    var noop_1 = require_noop();
    exports.NEVER = new Observable_1.Observable(noop_1.noop);
    function never() {
      return exports.NEVER;
    }
    exports.never = never;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/argsOrArgArray.js
var require_argsOrArgArray = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/argsOrArgArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.argsOrArgArray = void 0;
    var isArray = Array.isArray;
    function argsOrArgArray(args) {
      return args.length === 1 && isArray(args[0]) ? args[0] : args;
    }
    exports.argsOrArgArray = argsOrArgArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/onErrorResumeNext.js
var require_onErrorResumeNext = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/onErrorResumeNext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onErrorResumeNext = void 0;
    var Observable_1 = require_Observable();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var innerFrom_1 = require_innerFrom();
    function onErrorResumeNext() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
      return new Observable_1.Observable(function(subscriber) {
        var sourceIndex = 0;
        var subscribeNext = function() {
          if (sourceIndex < nextSources.length) {
            var nextSource = void 0;
            try {
              nextSource = innerFrom_1.innerFrom(nextSources[sourceIndex++]);
            } catch (err) {
              subscribeNext();
              return;
            }
            var innerSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, void 0, noop_1.noop, noop_1.noop);
            nextSource.subscribe(innerSubscriber);
            innerSubscriber.add(subscribeNext);
          } else {
            subscriber.complete();
          }
        };
        subscribeNext();
      });
    }
    exports.onErrorResumeNext = onErrorResumeNext;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/pairs.js
var require_pairs = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/pairs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pairs = void 0;
    var from_1 = require_from();
    function pairs(obj, scheduler) {
      return from_1.from(Object.entries(obj), scheduler);
    }
    exports.pairs = pairs;
  }
});

// node_modules/rxjs/dist/cjs/internal/util/not.js
var require_not = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/util/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    function not(pred, thisArg) {
      return function(value, index) {
        return !pred.call(thisArg, value, index);
      };
    }
    exports.not = not;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/filter.js
var require_filter = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/filter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filter = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function filter(predicate, thisArg) {
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return predicate.call(thisArg, value, index++) && subscriber.next(value);
        }));
      });
    }
    exports.filter = filter;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/partition.js
var require_partition = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var not_1 = require_not();
    var filter_1 = require_filter();
    var innerFrom_1 = require_innerFrom();
    function partition(source, predicate, thisArg) {
      return [filter_1.filter(predicate, thisArg)(innerFrom_1.innerFrom(source)), filter_1.filter(not_1.not(predicate, thisArg))(innerFrom_1.innerFrom(source))];
    }
    exports.partition = partition;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/race.js
var require_race = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/race.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.raceInit = exports.race = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function race() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      sources = argsOrArgArray_1.argsOrArgArray(sources);
      return sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : new Observable_1.Observable(raceInit(sources));
    }
    exports.race = race;
    function raceInit(sources) {
      return function(subscriber) {
        var subscriptions = [];
        var _loop_1 = function(i2) {
          subscriptions.push(innerFrom_1.innerFrom(sources[i2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            if (subscriptions) {
              for (var s = 0; s < subscriptions.length; s++) {
                s !== i2 && subscriptions[s].unsubscribe();
              }
              subscriptions = null;
            }
            subscriber.next(value);
          })));
        };
        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
          _loop_1(i);
        }
      };
    }
    exports.raceInit = raceInit;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/range.js
var require_range = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/range.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.range = void 0;
    var Observable_1 = require_Observable();
    var empty_1 = require_empty();
    function range(start, count, scheduler) {
      if (count == null) {
        count = start;
        start = 0;
      }
      if (count <= 0) {
        return empty_1.EMPTY;
      }
      var end = count + start;
      return new Observable_1.Observable(scheduler ? function(subscriber) {
        var n = start;
        return scheduler.schedule(function() {
          if (n < end) {
            subscriber.next(n++);
            this.schedule();
          } else {
            subscriber.complete();
          }
        });
      } : function(subscriber) {
        var n = start;
        while (n < end && !subscriber.closed) {
          subscriber.next(n++);
        }
        subscriber.complete();
      });
    }
    exports.range = range;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/using.js
var require_using = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/using.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.using = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var empty_1 = require_empty();
    function using(resourceFactory, observableFactory) {
      return new Observable_1.Observable(function(subscriber) {
        var resource = resourceFactory();
        var result = observableFactory(resource);
        var source = result ? innerFrom_1.innerFrom(result) : empty_1.EMPTY;
        source.subscribe(subscriber);
        return function() {
          if (resource) {
            resource.unsubscribe();
          }
        };
      });
    }
    exports.using = using;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/zip.js
var require_zip = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/zip.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zip = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var empty_1 = require_empty();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var args_1 = require_args();
    function zip() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resultSelector = args_1.popResultSelector(args);
      var sources = argsOrArgArray_1.argsOrArgArray(args);
      return sources.length ? new Observable_1.Observable(function(subscriber) {
        var buffers = sources.map(function() {
          return [];
        });
        var completed = sources.map(function() {
          return false;
        });
        subscriber.add(function() {
          buffers = completed = null;
        });
        var _loop_1 = function(sourceIndex2) {
          innerFrom_1.innerFrom(sources[sourceIndex2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            buffers[sourceIndex2].push(value);
            if (buffers.every(function(buffer) {
              return buffer.length;
            })) {
              var result = buffers.map(function(buffer) {
                return buffer.shift();
              });
              subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);
              if (buffers.some(function(buffer, i) {
                return !buffer.length && completed[i];
              })) {
                subscriber.complete();
              }
            }
          }, function() {
            completed[sourceIndex2] = true;
            !buffers[sourceIndex2].length && subscriber.complete();
          }));
        };
        for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
          _loop_1(sourceIndex);
        }
        return function() {
          buffers = completed = null;
        };
      }) : empty_1.EMPTY;
    }
    exports.zip = zip;
  }
});

// node_modules/rxjs/dist/cjs/internal/types.js
var require_types2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/audit.js
var require_audit = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/audit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.audit = void 0;
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function audit(durationSelector) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        var durationSubscriber = null;
        var isComplete = false;
        var endDuration = function() {
          durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
          durationSubscriber = null;
          if (hasValue) {
            hasValue = false;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
          isComplete && subscriber.complete();
        };
        var cleanupDuration = function() {
          durationSubscriber = null;
          isComplete && subscriber.complete();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          lastValue = value;
          if (!durationSubscriber) {
            innerFrom_1.innerFrom(durationSelector(value)).subscribe(durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, endDuration, cleanupDuration));
          }
        }, function() {
          isComplete = true;
          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
        }));
      });
    }
    exports.audit = audit;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/auditTime.js
var require_auditTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/auditTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.auditTime = void 0;
    var async_1 = require_async();
    var audit_1 = require_audit();
    var timer_1 = require_timer();
    function auditTime(duration, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return audit_1.audit(function() {
        return timer_1.timer(duration, scheduler);
      });
    }
    exports.auditTime = auditTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/buffer.js
var require_buffer = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/buffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buffer = void 0;
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function buffer(closingNotifier) {
      return lift_1.operate(function(source, subscriber) {
        var currentBuffer = [];
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return currentBuffer.push(value);
        }, function() {
          subscriber.next(currentBuffer);
          subscriber.complete();
        }));
        innerFrom_1.innerFrom(closingNotifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          var b = currentBuffer;
          currentBuffer = [];
          subscriber.next(b);
        }, noop_1.noop));
        return function() {
          currentBuffer = null;
        };
      });
    }
    exports.buffer = buffer;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferCount.js
var require_bufferCount = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferCount.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferCount = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var arrRemove_1 = require_arrRemove();
    function bufferCount(bufferSize, startBufferEvery) {
      if (startBufferEvery === void 0) {
        startBufferEvery = null;
      }
      startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
      return lift_1.operate(function(source, subscriber) {
        var buffers = [];
        var count = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a, e_2, _b;
          var toEmit = null;
          if (count++ % startBufferEvery === 0) {
            buffers.push([]);
          }
          try {
            for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
              var buffer = buffers_1_1.value;
              buffer.push(value);
              if (bufferSize <= buffer.length) {
                toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
                toEmit.push(buffer);
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          if (toEmit) {
            try {
              for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
                var buffer = toEmit_1_1.value;
                arrRemove_1.arrRemove(buffers, buffer);
                subscriber.next(buffer);
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          }
        }, function() {
          var e_3, _a;
          try {
            for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
              var buffer = buffers_2_1.value;
              subscriber.next(buffer);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          subscriber.complete();
        }, void 0, function() {
          buffers = null;
        }));
      });
    }
    exports.bufferCount = bufferCount;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferTime.js
var require_bufferTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferTime.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferTime = void 0;
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var arrRemove_1 = require_arrRemove();
    var async_1 = require_async();
    var args_1 = require_args();
    var executeSchedule_1 = require_executeSchedule();
    function bufferTime(bufferTimeSpan) {
      var _a, _b;
      var otherArgs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        otherArgs[_i - 1] = arguments[_i];
      }
      var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
      var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
      var maxBufferSize = otherArgs[1] || Infinity;
      return lift_1.operate(function(source, subscriber) {
        var bufferRecords = [];
        var restartOnEmit = false;
        var emit = function(record) {
          var buffer = record.buffer, subs = record.subs;
          subs.unsubscribe();
          arrRemove_1.arrRemove(bufferRecords, record);
          subscriber.next(buffer);
          restartOnEmit && startBuffer();
        };
        var startBuffer = function() {
          if (bufferRecords) {
            var subs = new Subscription_1.Subscription();
            subscriber.add(subs);
            var buffer = [];
            var record_1 = {
              buffer,
              subs
            };
            bufferRecords.push(record_1);
            executeSchedule_1.executeSchedule(subs, scheduler, function() {
              return emit(record_1);
            }, bufferTimeSpan);
          }
        };
        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
          executeSchedule_1.executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
        } else {
          restartOnEmit = true;
        }
        startBuffer();
        var bufferTimeSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a2;
          var recordsCopy = bufferRecords.slice();
          try {
            for (var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
              var record = recordsCopy_1_1.value;
              var buffer = record.buffer;
              buffer.push(value);
              maxBufferSize <= buffer.length && emit(record);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a2 = recordsCopy_1.return)) _a2.call(recordsCopy_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }, function() {
          while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
            subscriber.next(bufferRecords.shift().buffer);
          }
          bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
          subscriber.complete();
          subscriber.unsubscribe();
        }, void 0, function() {
          return bufferRecords = null;
        });
        source.subscribe(bufferTimeSubscriber);
      });
    }
    exports.bufferTime = bufferTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferToggle.js
var require_bufferToggle = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferToggle.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferToggle = void 0;
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var arrRemove_1 = require_arrRemove();
    function bufferToggle(openings, closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var buffers = [];
        innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(openValue) {
          var buffer = [];
          buffers.push(buffer);
          var closingSubscription = new Subscription_1.Subscription();
          var emitBuffer = function() {
            arrRemove_1.arrRemove(buffers, buffer);
            subscriber.next(buffer);
            closingSubscription.unsubscribe();
          };
          closingSubscription.add(innerFrom_1.innerFrom(closingSelector(openValue)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, emitBuffer, noop_1.noop)));
        }, noop_1.noop));
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a;
          try {
            for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
              var buffer = buffers_1_1.value;
              buffer.push(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }, function() {
          while (buffers.length > 0) {
            subscriber.next(buffers.shift());
          }
          subscriber.complete();
        }));
      });
    }
    exports.bufferToggle = bufferToggle;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/bufferWhen.js
var require_bufferWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/bufferWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferWhen = void 0;
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function bufferWhen(closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var buffer = null;
        var closingSubscriber = null;
        var openBuffer = function() {
          closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
          var b = buffer;
          buffer = [];
          b && subscriber.next(b);
          innerFrom_1.innerFrom(closingSelector()).subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openBuffer, noop_1.noop));
        };
        openBuffer();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return buffer === null || buffer === void 0 ? void 0 : buffer.push(value);
        }, function() {
          buffer && subscriber.next(buffer);
          subscriber.complete();
        }, void 0, function() {
          return buffer = closingSubscriber = null;
        }));
      });
    }
    exports.bufferWhen = bufferWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/catchError.js
var require_catchError = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/catchError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.catchError = void 0;
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var lift_1 = require_lift();
    function catchError(selector) {
      return lift_1.operate(function(source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
          handledResult = innerFrom_1.innerFrom(selector(err, catchError(selector)(source)));
          if (innerSub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
          } else {
            syncUnsub = true;
          }
        }));
        if (syncUnsub) {
          innerSub.unsubscribe();
          innerSub = null;
          handledResult.subscribe(subscriber);
        }
      });
    }
    exports.catchError = catchError;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/scanInternals.js
var require_scanInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/scanInternals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scanInternals = void 0;
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
      return function(source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var i = index++;
          state = hasState ? accumulator(state, value, i) : (hasState = true, value);
          emitOnNext && subscriber.next(state);
        }, emitBeforeComplete && function() {
          hasState && subscriber.next(state);
          subscriber.complete();
        }));
      };
    }
    exports.scanInternals = scanInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/reduce.js
var require_reduce = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/reduce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reduce = void 0;
    var scanInternals_1 = require_scanInternals();
    var lift_1 = require_lift();
    function reduce(accumulator, seed) {
      return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, false, true));
    }
    exports.reduce = reduce;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/toArray.js
var require_toArray = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/toArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toArray = void 0;
    var reduce_1 = require_reduce();
    var lift_1 = require_lift();
    var arrReducer = function(arr, value) {
      return arr.push(value), arr;
    };
    function toArray() {
      return lift_1.operate(function(source, subscriber) {
        reduce_1.reduce(arrReducer, [])(source).subscribe(subscriber);
      });
    }
    exports.toArray = toArray;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/joinAllInternals.js
var require_joinAllInternals = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/joinAllInternals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinAllInternals = void 0;
    var identity_1 = require_identity();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var pipe_1 = require_pipe();
    var mergeMap_1 = require_mergeMap();
    var toArray_1 = require_toArray();
    function joinAllInternals(joinFn, project) {
      return pipe_1.pipe(toArray_1.toArray(), mergeMap_1.mergeMap(function(sources) {
        return joinFn(sources);
      }), project ? mapOneOrManyArgs_1.mapOneOrManyArgs(project) : identity_1.identity);
    }
    exports.joinAllInternals = joinAllInternals;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineLatestAll.js
var require_combineLatestAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineLatestAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatestAll = void 0;
    var combineLatest_1 = require_combineLatest();
    var joinAllInternals_1 = require_joinAllInternals();
    function combineLatestAll(project) {
      return joinAllInternals_1.joinAllInternals(combineLatest_1.combineLatest, project);
    }
    exports.combineLatestAll = combineLatestAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineAll.js
var require_combineAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineAll = void 0;
    var combineLatestAll_1 = require_combineLatestAll();
    exports.combineAll = combineLatestAll_1.combineLatestAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineLatest.js
var require_combineLatest2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineLatest.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatest = void 0;
    var combineLatest_1 = require_combineLatest();
    var lift_1 = require_lift();
    var argsOrArgArray_1 = require_argsOrArgArray();
    var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
    var pipe_1 = require_pipe();
    var args_1 = require_args();
    function combineLatest() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resultSelector = args_1.popResultSelector(args);
      return resultSelector ? pipe_1.pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : lift_1.operate(function(source, subscriber) {
        combineLatest_1.combineLatestInit(__spreadArray([source], __read(argsOrArgArray_1.argsOrArgArray(args))))(subscriber);
      });
    }
    exports.combineLatest = combineLatest;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/combineLatestWith.js
var require_combineLatestWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/combineLatestWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.combineLatestWith = void 0;
    var combineLatest_1 = require_combineLatest2();
    function combineLatestWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return combineLatest_1.combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
    }
    exports.combineLatestWith = combineLatestWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatMap.js
var require_concatMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatMap = void 0;
    var mergeMap_1 = require_mergeMap();
    var isFunction_1 = require_isFunction();
    function concatMap(project, resultSelector) {
      return isFunction_1.isFunction(resultSelector) ? mergeMap_1.mergeMap(project, resultSelector, 1) : mergeMap_1.mergeMap(project, 1);
    }
    exports.concatMap = concatMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatMapTo.js
var require_concatMapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatMapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatMapTo = void 0;
    var concatMap_1 = require_concatMap();
    var isFunction_1 = require_isFunction();
    function concatMapTo(innerObservable, resultSelector) {
      return isFunction_1.isFunction(resultSelector) ? concatMap_1.concatMap(function() {
        return innerObservable;
      }, resultSelector) : concatMap_1.concatMap(function() {
        return innerObservable;
      });
    }
    exports.concatMapTo = concatMapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concat.js
var require_concat2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concat.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concat = void 0;
    var lift_1 = require_lift();
    var concatAll_1 = require_concatAll();
    var args_1 = require_args();
    var from_1 = require_from();
    function concat() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      return lift_1.operate(function(source, subscriber) {
        concatAll_1.concatAll()(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
      });
    }
    exports.concat = concat;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/concatWith.js
var require_concatWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/concatWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatWith = void 0;
    var concat_1 = require_concat2();
    function concatWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return concat_1.concat.apply(void 0, __spreadArray([], __read(otherSources)));
    }
    exports.concatWith = concatWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/observable/fromSubscribable.js
var require_fromSubscribable = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/observable/fromSubscribable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSubscribable = void 0;
    var Observable_1 = require_Observable();
    function fromSubscribable(subscribable) {
      return new Observable_1.Observable(function(subscriber) {
        return subscribable.subscribe(subscriber);
      });
    }
    exports.fromSubscribable = fromSubscribable;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/connect.js
var require_connect = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/connect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.connect = void 0;
    var Subject_1 = require_Subject();
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var fromSubscribable_1 = require_fromSubscribable();
    var DEFAULT_CONFIG = {
      connector: function() {
        return new Subject_1.Subject();
      }
    };
    function connect(selector, config) {
      if (config === void 0) {
        config = DEFAULT_CONFIG;
      }
      var connector = config.connector;
      return lift_1.operate(function(source, subscriber) {
        var subject = connector();
        innerFrom_1.innerFrom(selector(fromSubscribable_1.fromSubscribable(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
      });
    }
    exports.connect = connect;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/count.js
var require_count = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.count = void 0;
    var reduce_1 = require_reduce();
    function count(predicate) {
      return reduce_1.reduce(function(total, value, i) {
        return !predicate || predicate(value, i) ? total + 1 : total;
      }, 0);
    }
    exports.count = count;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/debounce.js
var require_debounce = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/debounce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debounce = void 0;
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function debounce(durationSelector) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        var durationSubscriber = null;
        var emit = function() {
          durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
          durationSubscriber = null;
          if (hasValue) {
            hasValue = false;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
          hasValue = true;
          lastValue = value;
          durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, emit, noop_1.noop);
          innerFrom_1.innerFrom(durationSelector(value)).subscribe(durationSubscriber);
        }, function() {
          emit();
          subscriber.complete();
        }, void 0, function() {
          lastValue = durationSubscriber = null;
        }));
      });
    }
    exports.debounce = debounce;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/debounceTime.js
var require_debounceTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/debounceTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debounceTime = void 0;
    var async_1 = require_async();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function debounceTime(dueTime, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return lift_1.operate(function(source, subscriber) {
        var activeTask = null;
        var lastValue = null;
        var lastTime = null;
        var emit = function() {
          if (activeTask) {
            activeTask.unsubscribe();
            activeTask = null;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
        };
        function emitWhenIdle() {
          var targetTime = lastTime + dueTime;
          var now = scheduler.now();
          if (now < targetTime) {
            activeTask = this.schedule(void 0, targetTime - now);
            subscriber.add(activeTask);
            return;
          }
          emit();
        }
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          lastValue = value;
          lastTime = scheduler.now();
          if (!activeTask) {
            activeTask = scheduler.schedule(emitWhenIdle, dueTime);
            subscriber.add(activeTask);
          }
        }, function() {
          emit();
          subscriber.complete();
        }, void 0, function() {
          lastValue = activeTask = null;
        }));
      });
    }
    exports.debounceTime = debounceTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/defaultIfEmpty.js
var require_defaultIfEmpty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/defaultIfEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultIfEmpty = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function defaultIfEmpty(defaultValue) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          subscriber.next(value);
        }, function() {
          if (!hasValue) {
            subscriber.next(defaultValue);
          }
          subscriber.complete();
        }));
      });
    }
    exports.defaultIfEmpty = defaultIfEmpty;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/take.js
var require_take = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/take.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.take = void 0;
    var empty_1 = require_empty();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function take(count) {
      return count <= 0 ? function() {
        return empty_1.EMPTY;
      } : lift_1.operate(function(source, subscriber) {
        var seen = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          if (++seen <= count) {
            subscriber.next(value);
            if (count <= seen) {
              subscriber.complete();
            }
          }
        }));
      });
    }
    exports.take = take;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/ignoreElements.js
var require_ignoreElements = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/ignoreElements.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ignoreElements = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    function ignoreElements() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, noop_1.noop));
      });
    }
    exports.ignoreElements = ignoreElements;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mapTo.js
var require_mapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapTo = void 0;
    var map_1 = require_map();
    function mapTo(value) {
      return map_1.map(function() {
        return value;
      });
    }
    exports.mapTo = mapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/delayWhen.js
var require_delayWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/delayWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delayWhen = void 0;
    var concat_1 = require_concat();
    var take_1 = require_take();
    var ignoreElements_1 = require_ignoreElements();
    var mapTo_1 = require_mapTo();
    var mergeMap_1 = require_mergeMap();
    var innerFrom_1 = require_innerFrom();
    function delayWhen(delayDurationSelector, subscriptionDelay) {
      if (subscriptionDelay) {
        return function(source) {
          return concat_1.concat(subscriptionDelay.pipe(take_1.take(1), ignoreElements_1.ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
        };
      }
      return mergeMap_1.mergeMap(function(value, index) {
        return innerFrom_1.innerFrom(delayDurationSelector(value, index)).pipe(take_1.take(1), mapTo_1.mapTo(value));
      });
    }
    exports.delayWhen = delayWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/delay.js
var require_delay = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    var async_1 = require_async();
    var delayWhen_1 = require_delayWhen();
    var timer_1 = require_timer();
    function delay(due, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      var duration = timer_1.timer(due, scheduler);
      return delayWhen_1.delayWhen(function() {
        return duration;
      });
    }
    exports.delay = delay;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/dematerialize.js
var require_dematerialize = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/dematerialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dematerialize = void 0;
    var Notification_1 = require_Notification();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function dematerialize() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(notification) {
          return Notification_1.observeNotification(notification, subscriber);
        }));
      });
    }
    exports.dematerialize = dematerialize;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/distinct.js
var require_distinct = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/distinct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distinct = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var innerFrom_1 = require_innerFrom();
    function distinct(keySelector, flushes) {
      return lift_1.operate(function(source, subscriber) {
        var distinctKeys = /* @__PURE__ */ new Set();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var key = keySelector ? keySelector(value) : value;
          if (!distinctKeys.has(key)) {
            distinctKeys.add(key);
            subscriber.next(value);
          }
        }));
        flushes && innerFrom_1.innerFrom(flushes).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          return distinctKeys.clear();
        }, noop_1.noop));
      });
    }
    exports.distinct = distinct;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/distinctUntilChanged.js
var require_distinctUntilChanged = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/distinctUntilChanged.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distinctUntilChanged = void 0;
    var identity_1 = require_identity();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function distinctUntilChanged(comparator, keySelector) {
      if (keySelector === void 0) {
        keySelector = identity_1.identity;
      }
      comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
      return lift_1.operate(function(source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var currentKey = keySelector(value);
          if (first || !comparator(previousKey, currentKey)) {
            first = false;
            previousKey = currentKey;
            subscriber.next(value);
          }
        }));
      });
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    function defaultCompare(a, b) {
      return a === b;
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/distinctUntilKeyChanged.js
var require_distinctUntilKeyChanged = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/distinctUntilKeyChanged.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distinctUntilKeyChanged = void 0;
    var distinctUntilChanged_1 = require_distinctUntilChanged();
    function distinctUntilKeyChanged(key, compare) {
      return distinctUntilChanged_1.distinctUntilChanged(function(x, y) {
        return compare ? compare(x[key], y[key]) : x[key] === y[key];
      });
    }
    exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/throwIfEmpty.js
var require_throwIfEmpty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/throwIfEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwIfEmpty = void 0;
    var EmptyError_1 = require_EmptyError();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function throwIfEmpty(errorFactory) {
      if (errorFactory === void 0) {
        errorFactory = defaultErrorFactory;
      }
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          subscriber.next(value);
        }, function() {
          return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
        }));
      });
    }
    exports.throwIfEmpty = throwIfEmpty;
    function defaultErrorFactory() {
      return new EmptyError_1.EmptyError();
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/elementAt.js
var require_elementAt = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/elementAt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.elementAt = void 0;
    var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
    var filter_1 = require_filter();
    var throwIfEmpty_1 = require_throwIfEmpty();
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    var take_1 = require_take();
    function elementAt(index, defaultValue) {
      if (index < 0) {
        throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
      }
      var hasDefaultValue = arguments.length >= 2;
      return function(source) {
        return source.pipe(filter_1.filter(function(v, i) {
          return i === index;
        }), take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
          return new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
        }));
      };
    }
    exports.elementAt = elementAt;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/endWith.js
var require_endWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/endWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endWith = void 0;
    var concat_1 = require_concat();
    var of_1 = require_of();
    function endWith() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
      }
      return function(source) {
        return concat_1.concat(source, of_1.of.apply(void 0, __spreadArray([], __read(values))));
      };
    }
    exports.endWith = endWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/every.js
var require_every = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.every = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function every(predicate, thisArg) {
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          if (!predicate.call(thisArg, value, index++, source)) {
            subscriber.next(false);
            subscriber.complete();
          }
        }, function() {
          subscriber.next(true);
          subscriber.complete();
        }));
      });
    }
    exports.every = every;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/exhaustMap.js
var require_exhaustMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/exhaustMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exhaustMap = void 0;
    var map_1 = require_map();
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function exhaustMap(project, resultSelector) {
      if (resultSelector) {
        return function(source) {
          return source.pipe(exhaustMap(function(a, i) {
            return innerFrom_1.innerFrom(project(a, i)).pipe(map_1.map(function(b, ii) {
              return resultSelector(a, b, i, ii);
            }));
          }));
        };
      }
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        var innerSub = null;
        var isComplete = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(outerValue) {
          if (!innerSub) {
            innerSub = OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
              innerSub = null;
              isComplete && subscriber.complete();
            });
            innerFrom_1.innerFrom(project(outerValue, index++)).subscribe(innerSub);
          }
        }, function() {
          isComplete = true;
          !innerSub && subscriber.complete();
        }));
      });
    }
    exports.exhaustMap = exhaustMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/exhaustAll.js
var require_exhaustAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/exhaustAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exhaustAll = void 0;
    var exhaustMap_1 = require_exhaustMap();
    var identity_1 = require_identity();
    function exhaustAll() {
      return exhaustMap_1.exhaustMap(identity_1.identity);
    }
    exports.exhaustAll = exhaustAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/exhaust.js
var require_exhaust = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/exhaust.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exhaust = void 0;
    var exhaustAll_1 = require_exhaustAll();
    exports.exhaust = exhaustAll_1.exhaustAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/expand.js
var require_expand = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/expand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expand = void 0;
    var lift_1 = require_lift();
    var mergeInternals_1 = require_mergeInternals();
    function expand(project, concurrent, scheduler) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
      return lift_1.operate(function(source, subscriber) {
        return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent, void 0, true, scheduler);
      });
    }
    exports.expand = expand;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/finalize.js
var require_finalize = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/finalize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.finalize = void 0;
    var lift_1 = require_lift();
    function finalize(callback) {
      return lift_1.operate(function(source, subscriber) {
        try {
          source.subscribe(subscriber);
        } finally {
          subscriber.add(callback);
        }
      });
    }
    exports.finalize = finalize;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/find.js
var require_find = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/find.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFind = exports.find = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function find(predicate, thisArg) {
      return lift_1.operate(createFind(predicate, thisArg, "value"));
    }
    exports.find = find;
    function createFind(predicate, thisArg, emit) {
      var findIndex = emit === "index";
      return function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var i = index++;
          if (predicate.call(thisArg, value, i, source)) {
            subscriber.next(findIndex ? i : value);
            subscriber.complete();
          }
        }, function() {
          subscriber.next(findIndex ? -1 : void 0);
          subscriber.complete();
        }));
      };
    }
    exports.createFind = createFind;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/findIndex.js
var require_findIndex = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/findIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findIndex = void 0;
    var lift_1 = require_lift();
    var find_1 = require_find();
    function findIndex(predicate, thisArg) {
      return lift_1.operate(find_1.createFind(predicate, thisArg, "index"));
    }
    exports.findIndex = findIndex;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/first.js
var require_first = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/first.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.first = void 0;
    var EmptyError_1 = require_EmptyError();
    var filter_1 = require_filter();
    var take_1 = require_take();
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    var throwIfEmpty_1 = require_throwIfEmpty();
    var identity_1 = require_identity();
    function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function(source) {
        return source.pipe(predicate ? filter_1.filter(function(v, i) {
          return predicate(v, i, source);
        }) : identity_1.identity, take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
          return new EmptyError_1.EmptyError();
        }));
      };
    }
    exports.first = first;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/groupBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.groupBy = void 0;
    var Observable_1 = require_Observable();
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function groupBy(keySelector, elementOrOptions, duration, connector) {
      return lift_1.operate(function(source, subscriber) {
        var element;
        if (!elementOrOptions || typeof elementOrOptions === "function") {
          element = elementOrOptions;
        } else {
          duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;
        }
        var groups = /* @__PURE__ */ new Map();
        var notify = function(cb) {
          groups.forEach(cb);
          cb(subscriber);
        };
        var handleError = function(err) {
          return notify(function(consumer) {
            return consumer.error(err);
          });
        };
        var activeGroups = 0;
        var teardownAttempted = false;
        var groupBySourceSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, function(value) {
          try {
            var key_1 = keySelector(value);
            var group_1 = groups.get(key_1);
            if (!group_1) {
              groups.set(key_1, group_1 = connector ? connector() : new Subject_1.Subject());
              var grouped = createGroupedObservable(key_1, group_1);
              subscriber.next(grouped);
              if (duration) {
                var durationSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(group_1, function() {
                  group_1.complete();
                  durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
                }, void 0, void 0, function() {
                  return groups.delete(key_1);
                });
                groupBySourceSubscriber.add(innerFrom_1.innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
              }
            }
            group_1.next(element ? element(value) : value);
          } catch (err) {
            handleError(err);
          }
        }, function() {
          return notify(function(consumer) {
            return consumer.complete();
          });
        }, handleError, function() {
          return groups.clear();
        }, function() {
          teardownAttempted = true;
          return activeGroups === 0;
        });
        source.subscribe(groupBySourceSubscriber);
        function createGroupedObservable(key, groupSubject) {
          var result = new Observable_1.Observable(function(groupSubscriber) {
            activeGroups++;
            var innerSub = groupSubject.subscribe(groupSubscriber);
            return function() {
              innerSub.unsubscribe();
              --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();
            };
          });
          result.key = key;
          return result;
        }
      });
    }
    exports.groupBy = groupBy;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/isEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmpty = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function isEmpty() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          subscriber.next(false);
          subscriber.complete();
        }, function() {
          subscriber.next(true);
          subscriber.complete();
        }));
      });
    }
    exports.isEmpty = isEmpty;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/takeLast.js
var require_takeLast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/takeLast.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.takeLast = void 0;
    var empty_1 = require_empty();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function takeLast(count) {
      return count <= 0 ? function() {
        return empty_1.EMPTY;
      } : lift_1.operate(function(source, subscriber) {
        var buffer = [];
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          buffer.push(value);
          count < buffer.length && buffer.shift();
        }, function() {
          var e_1, _a;
          try {
            for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
              var value = buffer_1_1.value;
              subscriber.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          subscriber.complete();
        }, void 0, function() {
          buffer = null;
        }));
      });
    }
    exports.takeLast = takeLast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/last.js
var require_last = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/last.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.last = void 0;
    var EmptyError_1 = require_EmptyError();
    var filter_1 = require_filter();
    var takeLast_1 = require_takeLast();
    var throwIfEmpty_1 = require_throwIfEmpty();
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    var identity_1 = require_identity();
    function last(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function(source) {
        return source.pipe(predicate ? filter_1.filter(function(v, i) {
          return predicate(v, i, source);
        }) : identity_1.identity, takeLast_1.takeLast(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
          return new EmptyError_1.EmptyError();
        }));
      };
    }
    exports.last = last;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/materialize.js
var require_materialize = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/materialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.materialize = void 0;
    var Notification_1 = require_Notification();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function materialize() {
      return lift_1.operate(function(source, subscriber) {
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          subscriber.next(Notification_1.Notification.createNext(value));
        }, function() {
          subscriber.next(Notification_1.Notification.createComplete());
          subscriber.complete();
        }, function(err) {
          subscriber.next(Notification_1.Notification.createError(err));
          subscriber.complete();
        }));
      });
    }
    exports.materialize = materialize;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/max.js
var require_max = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/max.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.max = void 0;
    var reduce_1 = require_reduce();
    var isFunction_1 = require_isFunction();
    function max(comparer) {
      return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function(x, y) {
        return comparer(x, y) > 0 ? x : y;
      } : function(x, y) {
        return x > y ? x : y;
      });
    }
    exports.max = max;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/flatMap.js
var require_flatMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/flatMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flatMap = void 0;
    var mergeMap_1 = require_mergeMap();
    exports.flatMap = mergeMap_1.mergeMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeMapTo.js
var require_mergeMapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeMapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeMapTo = void 0;
    var mergeMap_1 = require_mergeMap();
    var isFunction_1 = require_isFunction();
    function mergeMapTo(innerObservable, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      if (isFunction_1.isFunction(resultSelector)) {
        return mergeMap_1.mergeMap(function() {
          return innerObservable;
        }, resultSelector, concurrent);
      }
      if (typeof resultSelector === "number") {
        concurrent = resultSelector;
      }
      return mergeMap_1.mergeMap(function() {
        return innerObservable;
      }, concurrent);
    }
    exports.mergeMapTo = mergeMapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeScan.js
var require_mergeScan = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeScan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeScan = void 0;
    var lift_1 = require_lift();
    var mergeInternals_1 = require_mergeInternals();
    function mergeScan(accumulator, seed, concurrent) {
      if (concurrent === void 0) {
        concurrent = Infinity;
      }
      return lift_1.operate(function(source, subscriber) {
        var state = seed;
        return mergeInternals_1.mergeInternals(source, subscriber, function(value, index) {
          return accumulator(state, value, index);
        }, concurrent, function(value) {
          state = value;
        }, false, void 0, function() {
          return state = null;
        });
      });
    }
    exports.mergeScan = mergeScan;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/merge.js
var require_merge2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/merge.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.merge = void 0;
    var lift_1 = require_lift();
    var mergeAll_1 = require_mergeAll();
    var args_1 = require_args();
    var from_1 = require_from();
    function merge() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(args);
      var concurrent = args_1.popNumber(args, Infinity);
      return lift_1.operate(function(source, subscriber) {
        mergeAll_1.mergeAll(concurrent)(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
      });
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/mergeWith.js
var require_mergeWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/mergeWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeWith = void 0;
    var merge_1 = require_merge2();
    function mergeWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return merge_1.merge.apply(void 0, __spreadArray([], __read(otherSources)));
    }
    exports.mergeWith = mergeWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/min.js
var require_min = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/min.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.min = void 0;
    var reduce_1 = require_reduce();
    var isFunction_1 = require_isFunction();
    function min(comparer) {
      return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function(x, y) {
        return comparer(x, y) < 0 ? x : y;
      } : function(x, y) {
        return x < y ? x : y;
      });
    }
    exports.min = min;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/multicast.js
var require_multicast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/multicast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multicast = void 0;
    var ConnectableObservable_1 = require_ConnectableObservable();
    var isFunction_1 = require_isFunction();
    var connect_1 = require_connect();
    function multicast(subjectOrSubjectFactory, selector) {
      var subjectFactory = isFunction_1.isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
        return subjectOrSubjectFactory;
      };
      if (isFunction_1.isFunction(selector)) {
        return connect_1.connect(selector, {
          connector: subjectFactory
        });
      }
      return function(source) {
        return new ConnectableObservable_1.ConnectableObservable(source, subjectFactory);
      };
    }
    exports.multicast = multicast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/onErrorResumeNextWith.js
var require_onErrorResumeNextWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/onErrorResumeNextWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onErrorResumeNext = exports.onErrorResumeNextWith = void 0;
    var argsOrArgArray_1 = require_argsOrArgArray();
    var onErrorResumeNext_1 = require_onErrorResumeNext();
    function onErrorResumeNextWith() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
      return function(source) {
        return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, __spreadArray([source], __read(nextSources)));
      };
    }
    exports.onErrorResumeNextWith = onErrorResumeNextWith;
    exports.onErrorResumeNext = onErrorResumeNextWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/pairwise.js
var require_pairwise = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/pairwise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pairwise = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function pairwise() {
      return lift_1.operate(function(source, subscriber) {
        var prev;
        var hasPrev = false;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var p = prev;
          prev = value;
          hasPrev && subscriber.next([p, value]);
          hasPrev = true;
        }));
      });
    }
    exports.pairwise = pairwise;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/pluck.js
var require_pluck = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/pluck.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pluck = void 0;
    var map_1 = require_map();
    function pluck() {
      var properties = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i] = arguments[_i];
      }
      var length = properties.length;
      if (length === 0) {
        throw new Error("list of properties cannot be empty.");
      }
      return map_1.map(function(x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
          var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
          if (typeof p !== "undefined") {
            currentProp = p;
          } else {
            return void 0;
          }
        }
        return currentProp;
      });
    }
    exports.pluck = pluck;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publish.js
var require_publish = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publish.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publish = void 0;
    var Subject_1 = require_Subject();
    var multicast_1 = require_multicast();
    var connect_1 = require_connect();
    function publish(selector) {
      return selector ? function(source) {
        return connect_1.connect(selector)(source);
      } : function(source) {
        return multicast_1.multicast(new Subject_1.Subject())(source);
      };
    }
    exports.publish = publish;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publishBehavior.js
var require_publishBehavior = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publishBehavior.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publishBehavior = void 0;
    var BehaviorSubject_1 = require_BehaviorSubject();
    var ConnectableObservable_1 = require_ConnectableObservable();
    function publishBehavior(initialValue) {
      return function(source) {
        var subject = new BehaviorSubject_1.BehaviorSubject(initialValue);
        return new ConnectableObservable_1.ConnectableObservable(source, function() {
          return subject;
        });
      };
    }
    exports.publishBehavior = publishBehavior;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publishLast.js
var require_publishLast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publishLast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publishLast = void 0;
    var AsyncSubject_1 = require_AsyncSubject();
    var ConnectableObservable_1 = require_ConnectableObservable();
    function publishLast() {
      return function(source) {
        var subject = new AsyncSubject_1.AsyncSubject();
        return new ConnectableObservable_1.ConnectableObservable(source, function() {
          return subject;
        });
      };
    }
    exports.publishLast = publishLast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/publishReplay.js
var require_publishReplay = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/publishReplay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publishReplay = void 0;
    var ReplaySubject_1 = require_ReplaySubject();
    var multicast_1 = require_multicast();
    var isFunction_1 = require_isFunction();
    function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
      if (selectorOrScheduler && !isFunction_1.isFunction(selectorOrScheduler)) {
        timestampProvider = selectorOrScheduler;
      }
      var selector = isFunction_1.isFunction(selectorOrScheduler) ? selectorOrScheduler : void 0;
      return function(source) {
        return multicast_1.multicast(new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
      };
    }
    exports.publishReplay = publishReplay;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/raceWith.js
var require_raceWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/raceWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.raceWith = void 0;
    var race_1 = require_race();
    var lift_1 = require_lift();
    var identity_1 = require_identity();
    function raceWith() {
      var otherSources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
      }
      return !otherSources.length ? identity_1.identity : lift_1.operate(function(source, subscriber) {
        race_1.raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
      });
    }
    exports.raceWith = raceWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/repeat.js
var require_repeat = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/repeat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.repeat = void 0;
    var empty_1 = require_empty();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var timer_1 = require_timer();
    function repeat(countOrConfig) {
      var _a;
      var count = Infinity;
      var delay;
      if (countOrConfig != null) {
        if (typeof countOrConfig === "object") {
          _a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay;
        } else {
          count = countOrConfig;
        }
      }
      return count <= 0 ? function() {
        return empty_1.EMPTY;
      } : lift_1.operate(function(source, subscriber) {
        var soFar = 0;
        var sourceSub;
        var resubscribe = function() {
          sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();
          sourceSub = null;
          if (delay != null) {
            var notifier = typeof delay === "number" ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(soFar));
            var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
              notifierSubscriber_1.unsubscribe();
              subscribeToSource();
            });
            notifier.subscribe(notifierSubscriber_1);
          } else {
            subscribeToSource();
          }
        };
        var subscribeToSource = function() {
          var syncUnsub = false;
          sourceSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
            if (++soFar < count) {
              if (sourceSub) {
                resubscribe();
              } else {
                syncUnsub = true;
              }
            } else {
              subscriber.complete();
            }
          }));
          if (syncUnsub) {
            resubscribe();
          }
        };
        subscribeToSource();
      });
    }
    exports.repeat = repeat;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/repeatWhen.js
var require_repeatWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/repeatWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.repeatWhen = void 0;
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function repeatWhen(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var innerSub;
        var syncResub = false;
        var completions$;
        var isNotifierComplete = false;
        var isMainComplete = false;
        var checkComplete = function() {
          return isMainComplete && isNotifierComplete && (subscriber.complete(), true);
        };
        var getCompletionSubject = function() {
          if (!completions$) {
            completions$ = new Subject_1.Subject();
            innerFrom_1.innerFrom(notifier(completions$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
              if (innerSub) {
                subscribeForRepeatWhen();
              } else {
                syncResub = true;
              }
            }, function() {
              isNotifierComplete = true;
              checkComplete();
            }));
          }
          return completions$;
        };
        var subscribeForRepeatWhen = function() {
          isMainComplete = false;
          innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
            isMainComplete = true;
            !checkComplete() && getCompletionSubject().next();
          }));
          if (syncResub) {
            innerSub.unsubscribe();
            innerSub = null;
            syncResub = false;
            subscribeForRepeatWhen();
          }
        };
        subscribeForRepeatWhen();
      });
    }
    exports.repeatWhen = repeatWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/retry.js
var require_retry = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var identity_1 = require_identity();
    var timer_1 = require_timer();
    var innerFrom_1 = require_innerFrom();
    function retry(configOrCount) {
      if (configOrCount === void 0) {
        configOrCount = Infinity;
      }
      var config;
      if (configOrCount && typeof configOrCount === "object") {
        config = configOrCount;
      } else {
        config = {
          count: configOrCount
        };
      }
      var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
      return count <= 0 ? identity_1.identity : lift_1.operate(function(source, subscriber) {
        var soFar = 0;
        var innerSub;
        var subscribeForRetry = function() {
          var syncUnsub = false;
          innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            if (resetOnSuccess) {
              soFar = 0;
            }
            subscriber.next(value);
          }, void 0, function(err) {
            if (soFar++ < count) {
              var resub_1 = function() {
                if (innerSub) {
                  innerSub.unsubscribe();
                  innerSub = null;
                  subscribeForRetry();
                } else {
                  syncUnsub = true;
                }
              };
              if (delay != null) {
                var notifier = typeof delay === "number" ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(err, soFar));
                var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                  notifierSubscriber_1.unsubscribe();
                  resub_1();
                }, function() {
                  subscriber.complete();
                });
                notifier.subscribe(notifierSubscriber_1);
              } else {
                resub_1();
              }
            } else {
              subscriber.error(err);
            }
          }));
          if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            subscribeForRetry();
          }
        };
        subscribeForRetry();
      });
    }
    exports.retry = retry;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/retryWhen.js
var require_retryWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/retryWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retryWhen = void 0;
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function retryWhen(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var innerSub;
        var syncResub = false;
        var errors$;
        var subscribeForRetryWhen = function() {
          innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
            if (!errors$) {
              errors$ = new Subject_1.Subject();
              innerFrom_1.innerFrom(notifier(errors$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                return innerSub ? subscribeForRetryWhen() : syncResub = true;
              }));
            }
            if (errors$) {
              errors$.next(err);
            }
          }));
          if (syncResub) {
            innerSub.unsubscribe();
            innerSub = null;
            syncResub = false;
            subscribeForRetryWhen();
          }
        };
        subscribeForRetryWhen();
      });
    }
    exports.retryWhen = retryWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/sample.js
var require_sample = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/sample.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sample = void 0;
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var noop_1 = require_noop();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function sample(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var lastValue = null;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          lastValue = value;
        }));
        innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          if (hasValue) {
            hasValue = false;
            var value = lastValue;
            lastValue = null;
            subscriber.next(value);
          }
        }, noop_1.noop));
      });
    }
    exports.sample = sample;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/sampleTime.js
var require_sampleTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/sampleTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sampleTime = void 0;
    var async_1 = require_async();
    var sample_1 = require_sample();
    var interval_1 = require_interval();
    function sampleTime(period, scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return sample_1.sample(interval_1.interval(period, scheduler));
    }
    exports.sampleTime = sampleTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/scan.js
var require_scan = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/scan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scan = void 0;
    var lift_1 = require_lift();
    var scanInternals_1 = require_scanInternals();
    function scan(accumulator, seed) {
      return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, true));
    }
    exports.scan = scan;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/sequenceEqual.js
var require_sequenceEqual = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/sequenceEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sequenceEqual = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function sequenceEqual(compareTo, comparator) {
      if (comparator === void 0) {
        comparator = function(a, b) {
          return a === b;
        };
      }
      return lift_1.operate(function(source, subscriber) {
        var aState = createState();
        var bState = createState();
        var emit = function(isEqual) {
          subscriber.next(isEqual);
          subscriber.complete();
        };
        var createSubscriber = function(selfState, otherState) {
          var sequenceEqualSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(a) {
            var buffer = otherState.buffer, complete = otherState.complete;
            if (buffer.length === 0) {
              complete ? emit(false) : selfState.buffer.push(a);
            } else {
              !comparator(a, buffer.shift()) && emit(false);
            }
          }, function() {
            selfState.complete = true;
            var complete = otherState.complete, buffer = otherState.buffer;
            complete && emit(buffer.length === 0);
            sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
          });
          return sequenceEqualSubscriber;
        };
        source.subscribe(createSubscriber(aState, bState));
        innerFrom_1.innerFrom(compareTo).subscribe(createSubscriber(bState, aState));
      });
    }
    exports.sequenceEqual = sequenceEqual;
    function createState() {
      return {
        buffer: [],
        complete: false
      };
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/share.js
var require_share = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/share.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.share = void 0;
    var innerFrom_1 = require_innerFrom();
    var Subject_1 = require_Subject();
    var Subscriber_1 = require_Subscriber();
    var lift_1 = require_lift();
    function share(options) {
      if (options === void 0) {
        options = {};
      }
      var _a = options.connector, connector = _a === void 0 ? function() {
        return new Subject_1.Subject();
      } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
      return function(wrapperSource) {
        var connection;
        var resetConnection;
        var subject;
        var refCount = 0;
        var hasCompleted = false;
        var hasErrored = false;
        var cancelReset = function() {
          resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
          resetConnection = void 0;
        };
        var reset = function() {
          cancelReset();
          connection = subject = void 0;
          hasCompleted = hasErrored = false;
        };
        var resetAndUnsubscribe = function() {
          var conn = connection;
          reset();
          conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
        };
        return lift_1.operate(function(source, subscriber) {
          refCount++;
          if (!hasErrored && !hasCompleted) {
            cancelReset();
          }
          var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
          subscriber.add(function() {
            refCount--;
            if (refCount === 0 && !hasErrored && !hasCompleted) {
              resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
            }
          });
          dest.subscribe(subscriber);
          if (!connection && refCount > 0) {
            connection = new Subscriber_1.SafeSubscriber({
              next: function(value) {
                return dest.next(value);
              },
              error: function(err) {
                hasErrored = true;
                cancelReset();
                resetConnection = handleReset(reset, resetOnError, err);
                dest.error(err);
              },
              complete: function() {
                hasCompleted = true;
                cancelReset();
                resetConnection = handleReset(reset, resetOnComplete);
                dest.complete();
              }
            });
            innerFrom_1.innerFrom(source).subscribe(connection);
          }
        })(wrapperSource);
      };
    }
    exports.share = share;
    function handleReset(reset, on) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (on === true) {
        reset();
        return;
      }
      if (on === false) {
        return;
      }
      var onSubscriber = new Subscriber_1.SafeSubscriber({
        next: function() {
          onSubscriber.unsubscribe();
          reset();
        }
      });
      return innerFrom_1.innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);
    }
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/shareReplay.js
var require_shareReplay = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/shareReplay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shareReplay = void 0;
    var ReplaySubject_1 = require_ReplaySubject();
    var share_1 = require_share();
    function shareReplay(configOrBufferSize, windowTime, scheduler) {
      var _a, _b, _c;
      var bufferSize;
      var refCount = false;
      if (configOrBufferSize && typeof configOrBufferSize === "object") {
        _a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler;
      } else {
        bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
      }
      return share_1.share({
        connector: function() {
          return new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
        },
        resetOnError: true,
        resetOnComplete: false,
        resetOnRefCountZero: refCount
      });
    }
    exports.shareReplay = shareReplay;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/single.js
var require_single = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/single.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.single = void 0;
    var EmptyError_1 = require_EmptyError();
    var SequenceError_1 = require_SequenceError();
    var NotFoundError_1 = require_NotFoundError();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function single(predicate) {
      return lift_1.operate(function(source, subscriber) {
        var hasValue = false;
        var singleValue;
        var seenValue = false;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          seenValue = true;
          if (!predicate || predicate(value, index++, source)) {
            hasValue && subscriber.error(new SequenceError_1.SequenceError("Too many matching values"));
            hasValue = true;
            singleValue = value;
          }
        }, function() {
          if (hasValue) {
            subscriber.next(singleValue);
            subscriber.complete();
          } else {
            subscriber.error(seenValue ? new NotFoundError_1.NotFoundError("No matching values") : new EmptyError_1.EmptyError());
          }
        }));
      });
    }
    exports.single = single;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skip.js
var require_skip = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skip.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skip = void 0;
    var filter_1 = require_filter();
    function skip(count) {
      return filter_1.filter(function(_, index) {
        return count <= index;
      });
    }
    exports.skip = skip;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skipLast.js
var require_skipLast = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skipLast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skipLast = void 0;
    var identity_1 = require_identity();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function skipLast(skipCount) {
      return skipCount <= 0 ? identity_1.identity : lift_1.operate(function(source, subscriber) {
        var ring = new Array(skipCount);
        var seen = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var valueIndex = seen++;
          if (valueIndex < skipCount) {
            ring[valueIndex] = value;
          } else {
            var index = valueIndex % skipCount;
            var oldValue = ring[index];
            ring[index] = value;
            subscriber.next(oldValue);
          }
        }));
        return function() {
          ring = null;
        };
      });
    }
    exports.skipLast = skipLast;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skipUntil.js
var require_skipUntil = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skipUntil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skipUntil = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var noop_1 = require_noop();
    function skipUntil(notifier) {
      return lift_1.operate(function(source, subscriber) {
        var taking = false;
        var skipSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
          taking = true;
        }, noop_1.noop);
        innerFrom_1.innerFrom(notifier).subscribe(skipSubscriber);
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return taking && subscriber.next(value);
        }));
      });
    }
    exports.skipUntil = skipUntil;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/skipWhile.js
var require_skipWhile = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/skipWhile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.skipWhile = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function skipWhile(predicate) {
      return lift_1.operate(function(source, subscriber) {
        var taking = false;
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);
        }));
      });
    }
    exports.skipWhile = skipWhile;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/startWith.js
var require_startWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/startWith.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.startWith = void 0;
    var concat_1 = require_concat();
    var args_1 = require_args();
    var lift_1 = require_lift();
    function startWith() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
      }
      var scheduler = args_1.popScheduler(values);
      return lift_1.operate(function(source, subscriber) {
        (scheduler ? concat_1.concat(values, source, scheduler) : concat_1.concat(values, source)).subscribe(subscriber);
      });
    }
    exports.startWith = startWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchMap.js
var require_switchMap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchMap = void 0;
    var innerFrom_1 = require_innerFrom();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function switchMap(project, resultSelector) {
      return lift_1.operate(function(source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function() {
          return isComplete && !innerSubscriber && subscriber.complete();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
          var innerIndex = 0;
          var outerIndex = index++;
          innerFrom_1.innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(innerValue) {
            return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
          }, function() {
            innerSubscriber = null;
            checkComplete();
          }));
        }, function() {
          isComplete = true;
          checkComplete();
        }));
      });
    }
    exports.switchMap = switchMap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchAll.js
var require_switchAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchAll = void 0;
    var switchMap_1 = require_switchMap();
    var identity_1 = require_identity();
    function switchAll() {
      return switchMap_1.switchMap(identity_1.identity);
    }
    exports.switchAll = switchAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchMapTo.js
var require_switchMapTo = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchMapTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchMapTo = void 0;
    var switchMap_1 = require_switchMap();
    var isFunction_1 = require_isFunction();
    function switchMapTo(innerObservable, resultSelector) {
      return isFunction_1.isFunction(resultSelector) ? switchMap_1.switchMap(function() {
        return innerObservable;
      }, resultSelector) : switchMap_1.switchMap(function() {
        return innerObservable;
      });
    }
    exports.switchMapTo = switchMapTo;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/switchScan.js
var require_switchScan = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/switchScan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.switchScan = void 0;
    var switchMap_1 = require_switchMap();
    var lift_1 = require_lift();
    function switchScan(accumulator, seed) {
      return lift_1.operate(function(source, subscriber) {
        var state = seed;
        switchMap_1.switchMap(function(value, index) {
          return accumulator(state, value, index);
        }, function(_, innerValue) {
          return state = innerValue, innerValue;
        })(source).subscribe(subscriber);
        return function() {
          state = null;
        };
      });
    }
    exports.switchScan = switchScan;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/takeUntil.js
var require_takeUntil = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/takeUntil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.takeUntil = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var noop_1 = require_noop();
    function takeUntil(notifier) {
      return lift_1.operate(function(source, subscriber) {
        innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          return subscriber.complete();
        }, noop_1.noop));
        !subscriber.closed && source.subscribe(subscriber);
      });
    }
    exports.takeUntil = takeUntil;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/takeWhile.js
var require_takeWhile = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/takeWhile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.takeWhile = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function takeWhile(predicate, inclusive) {
      if (inclusive === void 0) {
        inclusive = false;
      }
      return lift_1.operate(function(source, subscriber) {
        var index = 0;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var result = predicate(value, index++);
          (result || inclusive) && subscriber.next(value);
          !result && subscriber.complete();
        }));
      });
    }
    exports.takeWhile = takeWhile;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/tap.js
var require_tap = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/tap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tap = void 0;
    var isFunction_1 = require_isFunction();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var identity_1 = require_identity();
    function tap(observerOrNext, error, complete) {
      var tapObserver = isFunction_1.isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
      return tapObserver ? lift_1.operate(function(source, subscriber) {
        var _a;
        (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
        var isUnsub = true;
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var _a2;
          (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
          subscriber.next(value);
        }, function() {
          var _a2;
          isUnsub = false;
          (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
          subscriber.complete();
        }, function(err) {
          var _a2;
          isUnsub = false;
          (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
          subscriber.error(err);
        }, function() {
          var _a2, _b;
          if (isUnsub) {
            (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
          }
          (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
        }));
      }) : identity_1.identity;
    }
    exports.tap = tap;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/throttle.js
var require_throttle = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/throttle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throttle = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function throttle(durationSelector, config) {
      return lift_1.operate(function(source, subscriber) {
        var _a = config !== null && config !== void 0 ? config : {}, _b = _a.leading, leading = _b === void 0 ? true : _b, _c = _a.trailing, trailing = _c === void 0 ? false : _c;
        var hasValue = false;
        var sendValue = null;
        var throttled = null;
        var isComplete = false;
        var endThrottling = function() {
          throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
          throttled = null;
          if (trailing) {
            send();
            isComplete && subscriber.complete();
          }
        };
        var cleanupThrottling = function() {
          throttled = null;
          isComplete && subscriber.complete();
        };
        var startThrottle = function(value) {
          return throttled = innerFrom_1.innerFrom(durationSelector(value)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));
        };
        var send = function() {
          if (hasValue) {
            hasValue = false;
            var value = sendValue;
            sendValue = null;
            subscriber.next(value);
            !isComplete && startThrottle(value);
          }
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          hasValue = true;
          sendValue = value;
          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
        }, function() {
          isComplete = true;
          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
        }));
      });
    }
    exports.throttle = throttle;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/throttleTime.js
var require_throttleTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/throttleTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throttleTime = void 0;
    var async_1 = require_async();
    var throttle_1 = require_throttle();
    var timer_1 = require_timer();
    function throttleTime(duration, scheduler, config) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      var duration$ = timer_1.timer(duration, scheduler);
      return throttle_1.throttle(function() {
        return duration$;
      }, config);
    }
    exports.throttleTime = throttleTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timeInterval.js
var require_timeInterval = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timeInterval.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimeInterval = exports.timeInterval = void 0;
    var async_1 = require_async();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function timeInterval(scheduler) {
      if (scheduler === void 0) {
        scheduler = async_1.asyncScheduler;
      }
      return lift_1.operate(function(source, subscriber) {
        var last = scheduler.now();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var now = scheduler.now();
          var interval = now - last;
          last = now;
          subscriber.next(new TimeInterval(value, interval));
        }));
      });
    }
    exports.timeInterval = timeInterval;
    var TimeInterval = /* @__PURE__ */ function() {
      function TimeInterval2(value, interval) {
        this.value = value;
        this.interval = interval;
      }
      return TimeInterval2;
    }();
    exports.TimeInterval = TimeInterval;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timeoutWith.js
var require_timeoutWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timeoutWith.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeoutWith = void 0;
    var async_1 = require_async();
    var isDate_1 = require_isDate();
    var timeout_1 = require_timeout();
    function timeoutWith(due, withObservable, scheduler) {
      var first;
      var each;
      var _with;
      scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async_1.async;
      if (isDate_1.isValidDate(due)) {
        first = due;
      } else if (typeof due === "number") {
        each = due;
      }
      if (withObservable) {
        _with = function() {
          return withObservable;
        };
      } else {
        throw new TypeError("No observable provided to switch to");
      }
      if (first == null && each == null) {
        throw new TypeError("No timeout provided.");
      }
      return timeout_1.timeout({
        first,
        each,
        scheduler,
        with: _with
      });
    }
    exports.timeoutWith = timeoutWith;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/timestamp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timestamp = void 0;
    var dateTimestampProvider_1 = require_dateTimestampProvider();
    var map_1 = require_map();
    function timestamp(timestampProvider) {
      if (timestampProvider === void 0) {
        timestampProvider = dateTimestampProvider_1.dateTimestampProvider;
      }
      return map_1.map(function(value) {
        return { value, timestamp: timestampProvider.now() };
      });
    }
    exports.timestamp = timestamp;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/window.js
var require_window = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/window.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.window = void 0;
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var innerFrom_1 = require_innerFrom();
    function window2(windowBoundaries) {
      return lift_1.operate(function(source, subscriber) {
        var windowSubject = new Subject_1.Subject();
        subscriber.next(windowSubject.asObservable());
        var errorHandler = function(err) {
          windowSubject.error(err);
          subscriber.error(err);
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);
        }, function() {
          windowSubject.complete();
          subscriber.complete();
        }, errorHandler));
        innerFrom_1.innerFrom(windowBoundaries).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
          windowSubject.complete();
          subscriber.next(windowSubject = new Subject_1.Subject());
        }, noop_1.noop, errorHandler));
        return function() {
          windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
          windowSubject = null;
        };
      });
    }
    exports.window = window2;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowCount.js
var require_windowCount = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowCount.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowCount = void 0;
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    function windowCount(windowSize, startWindowEvery) {
      if (startWindowEvery === void 0) {
        startWindowEvery = 0;
      }
      var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
      return lift_1.operate(function(source, subscriber) {
        var windows = [new Subject_1.Subject()];
        var starts = [];
        var count = 0;
        subscriber.next(windows[0].asObservable());
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a;
          try {
            for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
              var window_1 = windows_1_1.value;
              window_1.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          var c = count - windowSize + 1;
          if (c >= 0 && c % startEvery === 0) {
            windows.shift().complete();
          }
          if (++count % startEvery === 0) {
            var window_2 = new Subject_1.Subject();
            windows.push(window_2);
            subscriber.next(window_2.asObservable());
          }
        }, function() {
          while (windows.length > 0) {
            windows.shift().complete();
          }
          subscriber.complete();
        }, function(err) {
          while (windows.length > 0) {
            windows.shift().error(err);
          }
          subscriber.error(err);
        }, function() {
          starts = null;
          windows = null;
        }));
      });
    }
    exports.windowCount = windowCount;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowTime.js
var require_windowTime = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowTime = void 0;
    var Subject_1 = require_Subject();
    var async_1 = require_async();
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var arrRemove_1 = require_arrRemove();
    var args_1 = require_args();
    var executeSchedule_1 = require_executeSchedule();
    function windowTime(windowTimeSpan) {
      var _a, _b;
      var otherArgs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        otherArgs[_i - 1] = arguments[_i];
      }
      var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
      var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
      var maxWindowSize = otherArgs[1] || Infinity;
      return lift_1.operate(function(source, subscriber) {
        var windowRecords = [];
        var restartOnClose = false;
        var closeWindow = function(record) {
          var window2 = record.window, subs = record.subs;
          window2.complete();
          subs.unsubscribe();
          arrRemove_1.arrRemove(windowRecords, record);
          restartOnClose && startWindow();
        };
        var startWindow = function() {
          if (windowRecords) {
            var subs = new Subscription_1.Subscription();
            subscriber.add(subs);
            var window_1 = new Subject_1.Subject();
            var record_1 = {
              window: window_1,
              subs,
              seen: 0
            };
            windowRecords.push(record_1);
            subscriber.next(window_1.asObservable());
            executeSchedule_1.executeSchedule(subs, scheduler, function() {
              return closeWindow(record_1);
            }, windowTimeSpan);
          }
        };
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
          executeSchedule_1.executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);
        } else {
          restartOnClose = true;
        }
        startWindow();
        var loop = function(cb) {
          return windowRecords.slice().forEach(cb);
        };
        var terminate = function(cb) {
          loop(function(_a2) {
            var window2 = _a2.window;
            return cb(window2);
          });
          cb(subscriber);
          subscriber.unsubscribe();
        };
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          loop(function(record) {
            record.window.next(value);
            maxWindowSize <= ++record.seen && closeWindow(record);
          });
        }, function() {
          return terminate(function(consumer) {
            return consumer.complete();
          });
        }, function(err) {
          return terminate(function(consumer) {
            return consumer.error(err);
          });
        }));
        return function() {
          windowRecords = null;
        };
      });
    }
    exports.windowTime = windowTime;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowToggle.js
var require_windowToggle = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowToggle.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowToggle = void 0;
    var Subject_1 = require_Subject();
    var Subscription_1 = require_Subscription();
    var lift_1 = require_lift();
    var innerFrom_1 = require_innerFrom();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var noop_1 = require_noop();
    var arrRemove_1 = require_arrRemove();
    function windowToggle(openings, closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var windows = [];
        var handleError = function(err) {
          while (0 < windows.length) {
            windows.shift().error(err);
          }
          subscriber.error(err);
        };
        innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(openValue) {
          var window2 = new Subject_1.Subject();
          windows.push(window2);
          var closingSubscription = new Subscription_1.Subscription();
          var closeWindow = function() {
            arrRemove_1.arrRemove(windows, window2);
            window2.complete();
            closingSubscription.unsubscribe();
          };
          var closingNotifier;
          try {
            closingNotifier = innerFrom_1.innerFrom(closingSelector(openValue));
          } catch (err) {
            handleError(err);
            return;
          }
          subscriber.next(window2.asObservable());
          closingSubscription.add(closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, closeWindow, noop_1.noop, handleError)));
        }, noop_1.noop));
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          var e_1, _a;
          var windowsCopy = windows.slice();
          try {
            for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
              var window_1 = windowsCopy_1_1.value;
              window_1.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }, function() {
          while (0 < windows.length) {
            windows.shift().complete();
          }
          subscriber.complete();
        }, handleError, function() {
          while (0 < windows.length) {
            windows.shift().unsubscribe();
          }
        }));
      });
    }
    exports.windowToggle = windowToggle;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/windowWhen.js
var require_windowWhen = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/windowWhen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.windowWhen = void 0;
    var Subject_1 = require_Subject();
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    function windowWhen(closingSelector) {
      return lift_1.operate(function(source, subscriber) {
        var window2;
        var closingSubscriber;
        var handleError = function(err) {
          window2.error(err);
          subscriber.error(err);
        };
        var openWindow = function() {
          closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
          window2 === null || window2 === void 0 ? void 0 : window2.complete();
          window2 = new Subject_1.Subject();
          subscriber.next(window2.asObservable());
          var closingNotifier;
          try {
            closingNotifier = innerFrom_1.innerFrom(closingSelector());
          } catch (err) {
            handleError(err);
            return;
          }
          closingNotifier.subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openWindow, openWindow, handleError));
        };
        openWindow();
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          return window2.next(value);
        }, function() {
          window2.complete();
          subscriber.complete();
        }, handleError, function() {
          closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
          window2 = null;
        }));
      });
    }
    exports.windowWhen = windowWhen;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/withLatestFrom.js
var require_withLatestFrom = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/withLatestFrom.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withLatestFrom = void 0;
    var lift_1 = require_lift();
    var OperatorSubscriber_1 = require_OperatorSubscriber();
    var innerFrom_1 = require_innerFrom();
    var identity_1 = require_identity();
    var noop_1 = require_noop();
    var args_1 = require_args();
    function withLatestFrom() {
      var inputs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
      }
      var project = args_1.popResultSelector(inputs);
      return lift_1.operate(function(source, subscriber) {
        var len = inputs.length;
        var otherValues = new Array(len);
        var hasValue = inputs.map(function() {
          return false;
        });
        var ready = false;
        var _loop_1 = function(i2) {
          innerFrom_1.innerFrom(inputs[i2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
            otherValues[i2] = value;
            if (!ready && !hasValue[i2]) {
              hasValue[i2] = true;
              (ready = hasValue.every(identity_1.identity)) && (hasValue = null);
            }
          }, noop_1.noop));
        };
        for (var i = 0; i < len; i++) {
          _loop_1(i);
        }
        source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value) {
          if (ready) {
            var values = __spreadArray([value], __read(otherValues));
            subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
          }
        }));
      });
    }
    exports.withLatestFrom = withLatestFrom;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/zipAll.js
var require_zipAll = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/zipAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zipAll = void 0;
    var zip_1 = require_zip();
    var joinAllInternals_1 = require_joinAllInternals();
    function zipAll(project) {
      return joinAllInternals_1.joinAllInternals(zip_1.zip, project);
    }
    exports.zipAll = zipAll;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/zip.js
var require_zip2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/zip.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zip = void 0;
    var zip_1 = require_zip();
    var lift_1 = require_lift();
    function zip() {
      var sources = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
      }
      return lift_1.operate(function(source, subscriber) {
        zip_1.zip.apply(void 0, __spreadArray([source], __read(sources))).subscribe(subscriber);
      });
    }
    exports.zip = zip;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/zipWith.js
var require_zipWith = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/zipWith.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zipWith = void 0;
    var zip_1 = require_zip2();
    function zipWith() {
      var otherInputs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        otherInputs[_i] = arguments[_i];
      }
      return zip_1.zip.apply(void 0, __spreadArray([], __read(otherInputs)));
    }
    exports.zipWith = zipWith;
  }
});

// node_modules/rxjs/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/rxjs/dist/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.interval = exports.iif = exports.generate = exports.fromEventPattern = exports.fromEvent = exports.from = exports.forkJoin = exports.empty = exports.defer = exports.connectable = exports.concat = exports.combineLatest = exports.bindNodeCallback = exports.bindCallback = exports.UnsubscriptionError = exports.TimeoutError = exports.SequenceError = exports.ObjectUnsubscribedError = exports.NotFoundError = exports.EmptyError = exports.ArgumentOutOfRangeError = exports.firstValueFrom = exports.lastValueFrom = exports.isObservable = exports.identity = exports.noop = exports.pipe = exports.NotificationKind = exports.Notification = exports.Subscriber = exports.Subscription = exports.Scheduler = exports.VirtualAction = exports.VirtualTimeScheduler = exports.animationFrameScheduler = exports.animationFrame = exports.queueScheduler = exports.queue = exports.asyncScheduler = exports.async = exports.asapScheduler = exports.asap = exports.AsyncSubject = exports.ReplaySubject = exports.BehaviorSubject = exports.Subject = exports.animationFrames = exports.observable = exports.ConnectableObservable = exports.Observable = void 0;
    exports.filter = exports.expand = exports.exhaustMap = exports.exhaustAll = exports.exhaust = exports.every = exports.endWith = exports.elementAt = exports.distinctUntilKeyChanged = exports.distinctUntilChanged = exports.distinct = exports.dematerialize = exports.delayWhen = exports.delay = exports.defaultIfEmpty = exports.debounceTime = exports.debounce = exports.count = exports.connect = exports.concatWith = exports.concatMapTo = exports.concatMap = exports.concatAll = exports.combineLatestWith = exports.combineLatestAll = exports.combineAll = exports.catchError = exports.bufferWhen = exports.bufferToggle = exports.bufferTime = exports.bufferCount = exports.buffer = exports.auditTime = exports.audit = exports.config = exports.NEVER = exports.EMPTY = exports.scheduled = exports.zip = exports.using = exports.timer = exports.throwError = exports.range = exports.race = exports.partition = exports.pairs = exports.onErrorResumeNext = exports.of = exports.never = exports.merge = void 0;
    exports.switchMap = exports.switchAll = exports.subscribeOn = exports.startWith = exports.skipWhile = exports.skipUntil = exports.skipLast = exports.skip = exports.single = exports.shareReplay = exports.share = exports.sequenceEqual = exports.scan = exports.sampleTime = exports.sample = exports.refCount = exports.retryWhen = exports.retry = exports.repeatWhen = exports.repeat = exports.reduce = exports.raceWith = exports.publishReplay = exports.publishLast = exports.publishBehavior = exports.publish = exports.pluck = exports.pairwise = exports.onErrorResumeNextWith = exports.observeOn = exports.multicast = exports.min = exports.mergeWith = exports.mergeScan = exports.mergeMapTo = exports.mergeMap = exports.flatMap = exports.mergeAll = exports.max = exports.materialize = exports.mapTo = exports.map = exports.last = exports.isEmpty = exports.ignoreElements = exports.groupBy = exports.first = exports.findIndex = exports.find = exports.finalize = void 0;
    exports.zipWith = exports.zipAll = exports.withLatestFrom = exports.windowWhen = exports.windowToggle = exports.windowTime = exports.windowCount = exports.window = exports.toArray = exports.timestamp = exports.timeoutWith = exports.timeout = exports.timeInterval = exports.throwIfEmpty = exports.throttleTime = exports.throttle = exports.tap = exports.takeWhile = exports.takeUntil = exports.takeLast = exports.take = exports.switchScan = exports.switchMapTo = void 0;
    var Observable_1 = require_Observable();
    Object.defineProperty(exports, "Observable", { enumerable: true, get: function() {
      return Observable_1.Observable;
    } });
    var ConnectableObservable_1 = require_ConnectableObservable();
    Object.defineProperty(exports, "ConnectableObservable", { enumerable: true, get: function() {
      return ConnectableObservable_1.ConnectableObservable;
    } });
    var observable_1 = require_observable();
    Object.defineProperty(exports, "observable", { enumerable: true, get: function() {
      return observable_1.observable;
    } });
    var animationFrames_1 = require_animationFrames();
    Object.defineProperty(exports, "animationFrames", { enumerable: true, get: function() {
      return animationFrames_1.animationFrames;
    } });
    var Subject_1 = require_Subject();
    Object.defineProperty(exports, "Subject", { enumerable: true, get: function() {
      return Subject_1.Subject;
    } });
    var BehaviorSubject_1 = require_BehaviorSubject();
    Object.defineProperty(exports, "BehaviorSubject", { enumerable: true, get: function() {
      return BehaviorSubject_1.BehaviorSubject;
    } });
    var ReplaySubject_1 = require_ReplaySubject();
    Object.defineProperty(exports, "ReplaySubject", { enumerable: true, get: function() {
      return ReplaySubject_1.ReplaySubject;
    } });
    var AsyncSubject_1 = require_AsyncSubject();
    Object.defineProperty(exports, "AsyncSubject", { enumerable: true, get: function() {
      return AsyncSubject_1.AsyncSubject;
    } });
    var asap_1 = require_asap();
    Object.defineProperty(exports, "asap", { enumerable: true, get: function() {
      return asap_1.asap;
    } });
    Object.defineProperty(exports, "asapScheduler", { enumerable: true, get: function() {
      return asap_1.asapScheduler;
    } });
    var async_1 = require_async();
    Object.defineProperty(exports, "async", { enumerable: true, get: function() {
      return async_1.async;
    } });
    Object.defineProperty(exports, "asyncScheduler", { enumerable: true, get: function() {
      return async_1.asyncScheduler;
    } });
    var queue_1 = require_queue();
    Object.defineProperty(exports, "queue", { enumerable: true, get: function() {
      return queue_1.queue;
    } });
    Object.defineProperty(exports, "queueScheduler", { enumerable: true, get: function() {
      return queue_1.queueScheduler;
    } });
    var animationFrame_1 = require_animationFrame();
    Object.defineProperty(exports, "animationFrame", { enumerable: true, get: function() {
      return animationFrame_1.animationFrame;
    } });
    Object.defineProperty(exports, "animationFrameScheduler", { enumerable: true, get: function() {
      return animationFrame_1.animationFrameScheduler;
    } });
    var VirtualTimeScheduler_1 = require_VirtualTimeScheduler();
    Object.defineProperty(exports, "VirtualTimeScheduler", { enumerable: true, get: function() {
      return VirtualTimeScheduler_1.VirtualTimeScheduler;
    } });
    Object.defineProperty(exports, "VirtualAction", { enumerable: true, get: function() {
      return VirtualTimeScheduler_1.VirtualAction;
    } });
    var Scheduler_1 = require_Scheduler();
    Object.defineProperty(exports, "Scheduler", { enumerable: true, get: function() {
      return Scheduler_1.Scheduler;
    } });
    var Subscription_1 = require_Subscription();
    Object.defineProperty(exports, "Subscription", { enumerable: true, get: function() {
      return Subscription_1.Subscription;
    } });
    var Subscriber_1 = require_Subscriber();
    Object.defineProperty(exports, "Subscriber", { enumerable: true, get: function() {
      return Subscriber_1.Subscriber;
    } });
    var Notification_1 = require_Notification();
    Object.defineProperty(exports, "Notification", { enumerable: true, get: function() {
      return Notification_1.Notification;
    } });
    Object.defineProperty(exports, "NotificationKind", { enumerable: true, get: function() {
      return Notification_1.NotificationKind;
    } });
    var pipe_1 = require_pipe();
    Object.defineProperty(exports, "pipe", { enumerable: true, get: function() {
      return pipe_1.pipe;
    } });
    var noop_1 = require_noop();
    Object.defineProperty(exports, "noop", { enumerable: true, get: function() {
      return noop_1.noop;
    } });
    var identity_1 = require_identity();
    Object.defineProperty(exports, "identity", { enumerable: true, get: function() {
      return identity_1.identity;
    } });
    var isObservable_1 = require_isObservable();
    Object.defineProperty(exports, "isObservable", { enumerable: true, get: function() {
      return isObservable_1.isObservable;
    } });
    var lastValueFrom_1 = require_lastValueFrom();
    Object.defineProperty(exports, "lastValueFrom", { enumerable: true, get: function() {
      return lastValueFrom_1.lastValueFrom;
    } });
    var firstValueFrom_1 = require_firstValueFrom();
    Object.defineProperty(exports, "firstValueFrom", { enumerable: true, get: function() {
      return firstValueFrom_1.firstValueFrom;
    } });
    var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
    Object.defineProperty(exports, "ArgumentOutOfRangeError", { enumerable: true, get: function() {
      return ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
    } });
    var EmptyError_1 = require_EmptyError();
    Object.defineProperty(exports, "EmptyError", { enumerable: true, get: function() {
      return EmptyError_1.EmptyError;
    } });
    var NotFoundError_1 = require_NotFoundError();
    Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function() {
      return NotFoundError_1.NotFoundError;
    } });
    var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
    Object.defineProperty(exports, "ObjectUnsubscribedError", { enumerable: true, get: function() {
      return ObjectUnsubscribedError_1.ObjectUnsubscribedError;
    } });
    var SequenceError_1 = require_SequenceError();
    Object.defineProperty(exports, "SequenceError", { enumerable: true, get: function() {
      return SequenceError_1.SequenceError;
    } });
    var timeout_1 = require_timeout();
    Object.defineProperty(exports, "TimeoutError", { enumerable: true, get: function() {
      return timeout_1.TimeoutError;
    } });
    var UnsubscriptionError_1 = require_UnsubscriptionError();
    Object.defineProperty(exports, "UnsubscriptionError", { enumerable: true, get: function() {
      return UnsubscriptionError_1.UnsubscriptionError;
    } });
    var bindCallback_1 = require_bindCallback();
    Object.defineProperty(exports, "bindCallback", { enumerable: true, get: function() {
      return bindCallback_1.bindCallback;
    } });
    var bindNodeCallback_1 = require_bindNodeCallback();
    Object.defineProperty(exports, "bindNodeCallback", { enumerable: true, get: function() {
      return bindNodeCallback_1.bindNodeCallback;
    } });
    var combineLatest_1 = require_combineLatest();
    Object.defineProperty(exports, "combineLatest", { enumerable: true, get: function() {
      return combineLatest_1.combineLatest;
    } });
    var concat_1 = require_concat();
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return concat_1.concat;
    } });
    var connectable_1 = require_connectable();
    Object.defineProperty(exports, "connectable", { enumerable: true, get: function() {
      return connectable_1.connectable;
    } });
    var defer_1 = require_defer();
    Object.defineProperty(exports, "defer", { enumerable: true, get: function() {
      return defer_1.defer;
    } });
    var empty_1 = require_empty();
    Object.defineProperty(exports, "empty", { enumerable: true, get: function() {
      return empty_1.empty;
    } });
    var forkJoin_1 = require_forkJoin();
    Object.defineProperty(exports, "forkJoin", { enumerable: true, get: function() {
      return forkJoin_1.forkJoin;
    } });
    var from_1 = require_from();
    Object.defineProperty(exports, "from", { enumerable: true, get: function() {
      return from_1.from;
    } });
    var fromEvent_1 = require_fromEvent();
    Object.defineProperty(exports, "fromEvent", { enumerable: true, get: function() {
      return fromEvent_1.fromEvent;
    } });
    var fromEventPattern_1 = require_fromEventPattern();
    Object.defineProperty(exports, "fromEventPattern", { enumerable: true, get: function() {
      return fromEventPattern_1.fromEventPattern;
    } });
    var generate_1 = require_generate();
    Object.defineProperty(exports, "generate", { enumerable: true, get: function() {
      return generate_1.generate;
    } });
    var iif_1 = require_iif();
    Object.defineProperty(exports, "iif", { enumerable: true, get: function() {
      return iif_1.iif;
    } });
    var interval_1 = require_interval();
    Object.defineProperty(exports, "interval", { enumerable: true, get: function() {
      return interval_1.interval;
    } });
    var merge_1 = require_merge();
    Object.defineProperty(exports, "merge", { enumerable: true, get: function() {
      return merge_1.merge;
    } });
    var never_1 = require_never();
    Object.defineProperty(exports, "never", { enumerable: true, get: function() {
      return never_1.never;
    } });
    var of_1 = require_of();
    Object.defineProperty(exports, "of", { enumerable: true, get: function() {
      return of_1.of;
    } });
    var onErrorResumeNext_1 = require_onErrorResumeNext();
    Object.defineProperty(exports, "onErrorResumeNext", { enumerable: true, get: function() {
      return onErrorResumeNext_1.onErrorResumeNext;
    } });
    var pairs_1 = require_pairs();
    Object.defineProperty(exports, "pairs", { enumerable: true, get: function() {
      return pairs_1.pairs;
    } });
    var partition_1 = require_partition();
    Object.defineProperty(exports, "partition", { enumerable: true, get: function() {
      return partition_1.partition;
    } });
    var race_1 = require_race();
    Object.defineProperty(exports, "race", { enumerable: true, get: function() {
      return race_1.race;
    } });
    var range_1 = require_range();
    Object.defineProperty(exports, "range", { enumerable: true, get: function() {
      return range_1.range;
    } });
    var throwError_1 = require_throwError();
    Object.defineProperty(exports, "throwError", { enumerable: true, get: function() {
      return throwError_1.throwError;
    } });
    var timer_1 = require_timer();
    Object.defineProperty(exports, "timer", { enumerable: true, get: function() {
      return timer_1.timer;
    } });
    var using_1 = require_using();
    Object.defineProperty(exports, "using", { enumerable: true, get: function() {
      return using_1.using;
    } });
    var zip_1 = require_zip();
    Object.defineProperty(exports, "zip", { enumerable: true, get: function() {
      return zip_1.zip;
    } });
    var scheduled_1 = require_scheduled();
    Object.defineProperty(exports, "scheduled", { enumerable: true, get: function() {
      return scheduled_1.scheduled;
    } });
    var empty_2 = require_empty();
    Object.defineProperty(exports, "EMPTY", { enumerable: true, get: function() {
      return empty_2.EMPTY;
    } });
    var never_2 = require_never();
    Object.defineProperty(exports, "NEVER", { enumerable: true, get: function() {
      return never_2.NEVER;
    } });
    __exportStar(require_types2(), exports);
    var config_1 = require_config();
    Object.defineProperty(exports, "config", { enumerable: true, get: function() {
      return config_1.config;
    } });
    var audit_1 = require_audit();
    Object.defineProperty(exports, "audit", { enumerable: true, get: function() {
      return audit_1.audit;
    } });
    var auditTime_1 = require_auditTime();
    Object.defineProperty(exports, "auditTime", { enumerable: true, get: function() {
      return auditTime_1.auditTime;
    } });
    var buffer_1 = require_buffer();
    Object.defineProperty(exports, "buffer", { enumerable: true, get: function() {
      return buffer_1.buffer;
    } });
    var bufferCount_1 = require_bufferCount();
    Object.defineProperty(exports, "bufferCount", { enumerable: true, get: function() {
      return bufferCount_1.bufferCount;
    } });
    var bufferTime_1 = require_bufferTime();
    Object.defineProperty(exports, "bufferTime", { enumerable: true, get: function() {
      return bufferTime_1.bufferTime;
    } });
    var bufferToggle_1 = require_bufferToggle();
    Object.defineProperty(exports, "bufferToggle", { enumerable: true, get: function() {
      return bufferToggle_1.bufferToggle;
    } });
    var bufferWhen_1 = require_bufferWhen();
    Object.defineProperty(exports, "bufferWhen", { enumerable: true, get: function() {
      return bufferWhen_1.bufferWhen;
    } });
    var catchError_1 = require_catchError();
    Object.defineProperty(exports, "catchError", { enumerable: true, get: function() {
      return catchError_1.catchError;
    } });
    var combineAll_1 = require_combineAll();
    Object.defineProperty(exports, "combineAll", { enumerable: true, get: function() {
      return combineAll_1.combineAll;
    } });
    var combineLatestAll_1 = require_combineLatestAll();
    Object.defineProperty(exports, "combineLatestAll", { enumerable: true, get: function() {
      return combineLatestAll_1.combineLatestAll;
    } });
    var combineLatestWith_1 = require_combineLatestWith();
    Object.defineProperty(exports, "combineLatestWith", { enumerable: true, get: function() {
      return combineLatestWith_1.combineLatestWith;
    } });
    var concatAll_1 = require_concatAll();
    Object.defineProperty(exports, "concatAll", { enumerable: true, get: function() {
      return concatAll_1.concatAll;
    } });
    var concatMap_1 = require_concatMap();
    Object.defineProperty(exports, "concatMap", { enumerable: true, get: function() {
      return concatMap_1.concatMap;
    } });
    var concatMapTo_1 = require_concatMapTo();
    Object.defineProperty(exports, "concatMapTo", { enumerable: true, get: function() {
      return concatMapTo_1.concatMapTo;
    } });
    var concatWith_1 = require_concatWith();
    Object.defineProperty(exports, "concatWith", { enumerable: true, get: function() {
      return concatWith_1.concatWith;
    } });
    var connect_1 = require_connect();
    Object.defineProperty(exports, "connect", { enumerable: true, get: function() {
      return connect_1.connect;
    } });
    var count_1 = require_count();
    Object.defineProperty(exports, "count", { enumerable: true, get: function() {
      return count_1.count;
    } });
    var debounce_1 = require_debounce();
    Object.defineProperty(exports, "debounce", { enumerable: true, get: function() {
      return debounce_1.debounce;
    } });
    var debounceTime_1 = require_debounceTime();
    Object.defineProperty(exports, "debounceTime", { enumerable: true, get: function() {
      return debounceTime_1.debounceTime;
    } });
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    Object.defineProperty(exports, "defaultIfEmpty", { enumerable: true, get: function() {
      return defaultIfEmpty_1.defaultIfEmpty;
    } });
    var delay_1 = require_delay();
    Object.defineProperty(exports, "delay", { enumerable: true, get: function() {
      return delay_1.delay;
    } });
    var delayWhen_1 = require_delayWhen();
    Object.defineProperty(exports, "delayWhen", { enumerable: true, get: function() {
      return delayWhen_1.delayWhen;
    } });
    var dematerialize_1 = require_dematerialize();
    Object.defineProperty(exports, "dematerialize", { enumerable: true, get: function() {
      return dematerialize_1.dematerialize;
    } });
    var distinct_1 = require_distinct();
    Object.defineProperty(exports, "distinct", { enumerable: true, get: function() {
      return distinct_1.distinct;
    } });
    var distinctUntilChanged_1 = require_distinctUntilChanged();
    Object.defineProperty(exports, "distinctUntilChanged", { enumerable: true, get: function() {
      return distinctUntilChanged_1.distinctUntilChanged;
    } });
    var distinctUntilKeyChanged_1 = require_distinctUntilKeyChanged();
    Object.defineProperty(exports, "distinctUntilKeyChanged", { enumerable: true, get: function() {
      return distinctUntilKeyChanged_1.distinctUntilKeyChanged;
    } });
    var elementAt_1 = require_elementAt();
    Object.defineProperty(exports, "elementAt", { enumerable: true, get: function() {
      return elementAt_1.elementAt;
    } });
    var endWith_1 = require_endWith();
    Object.defineProperty(exports, "endWith", { enumerable: true, get: function() {
      return endWith_1.endWith;
    } });
    var every_1 = require_every();
    Object.defineProperty(exports, "every", { enumerable: true, get: function() {
      return every_1.every;
    } });
    var exhaust_1 = require_exhaust();
    Object.defineProperty(exports, "exhaust", { enumerable: true, get: function() {
      return exhaust_1.exhaust;
    } });
    var exhaustAll_1 = require_exhaustAll();
    Object.defineProperty(exports, "exhaustAll", { enumerable: true, get: function() {
      return exhaustAll_1.exhaustAll;
    } });
    var exhaustMap_1 = require_exhaustMap();
    Object.defineProperty(exports, "exhaustMap", { enumerable: true, get: function() {
      return exhaustMap_1.exhaustMap;
    } });
    var expand_1 = require_expand();
    Object.defineProperty(exports, "expand", { enumerable: true, get: function() {
      return expand_1.expand;
    } });
    var filter_1 = require_filter();
    Object.defineProperty(exports, "filter", { enumerable: true, get: function() {
      return filter_1.filter;
    } });
    var finalize_1 = require_finalize();
    Object.defineProperty(exports, "finalize", { enumerable: true, get: function() {
      return finalize_1.finalize;
    } });
    var find_1 = require_find();
    Object.defineProperty(exports, "find", { enumerable: true, get: function() {
      return find_1.find;
    } });
    var findIndex_1 = require_findIndex();
    Object.defineProperty(exports, "findIndex", { enumerable: true, get: function() {
      return findIndex_1.findIndex;
    } });
    var first_1 = require_first();
    Object.defineProperty(exports, "first", { enumerable: true, get: function() {
      return first_1.first;
    } });
    var groupBy_1 = require_groupBy();
    Object.defineProperty(exports, "groupBy", { enumerable: true, get: function() {
      return groupBy_1.groupBy;
    } });
    var ignoreElements_1 = require_ignoreElements();
    Object.defineProperty(exports, "ignoreElements", { enumerable: true, get: function() {
      return ignoreElements_1.ignoreElements;
    } });
    var isEmpty_1 = require_isEmpty();
    Object.defineProperty(exports, "isEmpty", { enumerable: true, get: function() {
      return isEmpty_1.isEmpty;
    } });
    var last_1 = require_last();
    Object.defineProperty(exports, "last", { enumerable: true, get: function() {
      return last_1.last;
    } });
    var map_1 = require_map();
    Object.defineProperty(exports, "map", { enumerable: true, get: function() {
      return map_1.map;
    } });
    var mapTo_1 = require_mapTo();
    Object.defineProperty(exports, "mapTo", { enumerable: true, get: function() {
      return mapTo_1.mapTo;
    } });
    var materialize_1 = require_materialize();
    Object.defineProperty(exports, "materialize", { enumerable: true, get: function() {
      return materialize_1.materialize;
    } });
    var max_1 = require_max();
    Object.defineProperty(exports, "max", { enumerable: true, get: function() {
      return max_1.max;
    } });
    var mergeAll_1 = require_mergeAll();
    Object.defineProperty(exports, "mergeAll", { enumerable: true, get: function() {
      return mergeAll_1.mergeAll;
    } });
    var flatMap_1 = require_flatMap();
    Object.defineProperty(exports, "flatMap", { enumerable: true, get: function() {
      return flatMap_1.flatMap;
    } });
    var mergeMap_1 = require_mergeMap();
    Object.defineProperty(exports, "mergeMap", { enumerable: true, get: function() {
      return mergeMap_1.mergeMap;
    } });
    var mergeMapTo_1 = require_mergeMapTo();
    Object.defineProperty(exports, "mergeMapTo", { enumerable: true, get: function() {
      return mergeMapTo_1.mergeMapTo;
    } });
    var mergeScan_1 = require_mergeScan();
    Object.defineProperty(exports, "mergeScan", { enumerable: true, get: function() {
      return mergeScan_1.mergeScan;
    } });
    var mergeWith_1 = require_mergeWith();
    Object.defineProperty(exports, "mergeWith", { enumerable: true, get: function() {
      return mergeWith_1.mergeWith;
    } });
    var min_1 = require_min();
    Object.defineProperty(exports, "min", { enumerable: true, get: function() {
      return min_1.min;
    } });
    var multicast_1 = require_multicast();
    Object.defineProperty(exports, "multicast", { enumerable: true, get: function() {
      return multicast_1.multicast;
    } });
    var observeOn_1 = require_observeOn();
    Object.defineProperty(exports, "observeOn", { enumerable: true, get: function() {
      return observeOn_1.observeOn;
    } });
    var onErrorResumeNextWith_1 = require_onErrorResumeNextWith();
    Object.defineProperty(exports, "onErrorResumeNextWith", { enumerable: true, get: function() {
      return onErrorResumeNextWith_1.onErrorResumeNextWith;
    } });
    var pairwise_1 = require_pairwise();
    Object.defineProperty(exports, "pairwise", { enumerable: true, get: function() {
      return pairwise_1.pairwise;
    } });
    var pluck_1 = require_pluck();
    Object.defineProperty(exports, "pluck", { enumerable: true, get: function() {
      return pluck_1.pluck;
    } });
    var publish_1 = require_publish();
    Object.defineProperty(exports, "publish", { enumerable: true, get: function() {
      return publish_1.publish;
    } });
    var publishBehavior_1 = require_publishBehavior();
    Object.defineProperty(exports, "publishBehavior", { enumerable: true, get: function() {
      return publishBehavior_1.publishBehavior;
    } });
    var publishLast_1 = require_publishLast();
    Object.defineProperty(exports, "publishLast", { enumerable: true, get: function() {
      return publishLast_1.publishLast;
    } });
    var publishReplay_1 = require_publishReplay();
    Object.defineProperty(exports, "publishReplay", { enumerable: true, get: function() {
      return publishReplay_1.publishReplay;
    } });
    var raceWith_1 = require_raceWith();
    Object.defineProperty(exports, "raceWith", { enumerable: true, get: function() {
      return raceWith_1.raceWith;
    } });
    var reduce_1 = require_reduce();
    Object.defineProperty(exports, "reduce", { enumerable: true, get: function() {
      return reduce_1.reduce;
    } });
    var repeat_1 = require_repeat();
    Object.defineProperty(exports, "repeat", { enumerable: true, get: function() {
      return repeat_1.repeat;
    } });
    var repeatWhen_1 = require_repeatWhen();
    Object.defineProperty(exports, "repeatWhen", { enumerable: true, get: function() {
      return repeatWhen_1.repeatWhen;
    } });
    var retry_1 = require_retry();
    Object.defineProperty(exports, "retry", { enumerable: true, get: function() {
      return retry_1.retry;
    } });
    var retryWhen_1 = require_retryWhen();
    Object.defineProperty(exports, "retryWhen", { enumerable: true, get: function() {
      return retryWhen_1.retryWhen;
    } });
    var refCount_1 = require_refCount();
    Object.defineProperty(exports, "refCount", { enumerable: true, get: function() {
      return refCount_1.refCount;
    } });
    var sample_1 = require_sample();
    Object.defineProperty(exports, "sample", { enumerable: true, get: function() {
      return sample_1.sample;
    } });
    var sampleTime_1 = require_sampleTime();
    Object.defineProperty(exports, "sampleTime", { enumerable: true, get: function() {
      return sampleTime_1.sampleTime;
    } });
    var scan_1 = require_scan();
    Object.defineProperty(exports, "scan", { enumerable: true, get: function() {
      return scan_1.scan;
    } });
    var sequenceEqual_1 = require_sequenceEqual();
    Object.defineProperty(exports, "sequenceEqual", { enumerable: true, get: function() {
      return sequenceEqual_1.sequenceEqual;
    } });
    var share_1 = require_share();
    Object.defineProperty(exports, "share", { enumerable: true, get: function() {
      return share_1.share;
    } });
    var shareReplay_1 = require_shareReplay();
    Object.defineProperty(exports, "shareReplay", { enumerable: true, get: function() {
      return shareReplay_1.shareReplay;
    } });
    var single_1 = require_single();
    Object.defineProperty(exports, "single", { enumerable: true, get: function() {
      return single_1.single;
    } });
    var skip_1 = require_skip();
    Object.defineProperty(exports, "skip", { enumerable: true, get: function() {
      return skip_1.skip;
    } });
    var skipLast_1 = require_skipLast();
    Object.defineProperty(exports, "skipLast", { enumerable: true, get: function() {
      return skipLast_1.skipLast;
    } });
    var skipUntil_1 = require_skipUntil();
    Object.defineProperty(exports, "skipUntil", { enumerable: true, get: function() {
      return skipUntil_1.skipUntil;
    } });
    var skipWhile_1 = require_skipWhile();
    Object.defineProperty(exports, "skipWhile", { enumerable: true, get: function() {
      return skipWhile_1.skipWhile;
    } });
    var startWith_1 = require_startWith();
    Object.defineProperty(exports, "startWith", { enumerable: true, get: function() {
      return startWith_1.startWith;
    } });
    var subscribeOn_1 = require_subscribeOn();
    Object.defineProperty(exports, "subscribeOn", { enumerable: true, get: function() {
      return subscribeOn_1.subscribeOn;
    } });
    var switchAll_1 = require_switchAll();
    Object.defineProperty(exports, "switchAll", { enumerable: true, get: function() {
      return switchAll_1.switchAll;
    } });
    var switchMap_1 = require_switchMap();
    Object.defineProperty(exports, "switchMap", { enumerable: true, get: function() {
      return switchMap_1.switchMap;
    } });
    var switchMapTo_1 = require_switchMapTo();
    Object.defineProperty(exports, "switchMapTo", { enumerable: true, get: function() {
      return switchMapTo_1.switchMapTo;
    } });
    var switchScan_1 = require_switchScan();
    Object.defineProperty(exports, "switchScan", { enumerable: true, get: function() {
      return switchScan_1.switchScan;
    } });
    var take_1 = require_take();
    Object.defineProperty(exports, "take", { enumerable: true, get: function() {
      return take_1.take;
    } });
    var takeLast_1 = require_takeLast();
    Object.defineProperty(exports, "takeLast", { enumerable: true, get: function() {
      return takeLast_1.takeLast;
    } });
    var takeUntil_1 = require_takeUntil();
    Object.defineProperty(exports, "takeUntil", { enumerable: true, get: function() {
      return takeUntil_1.takeUntil;
    } });
    var takeWhile_1 = require_takeWhile();
    Object.defineProperty(exports, "takeWhile", { enumerable: true, get: function() {
      return takeWhile_1.takeWhile;
    } });
    var tap_1 = require_tap();
    Object.defineProperty(exports, "tap", { enumerable: true, get: function() {
      return tap_1.tap;
    } });
    var throttle_1 = require_throttle();
    Object.defineProperty(exports, "throttle", { enumerable: true, get: function() {
      return throttle_1.throttle;
    } });
    var throttleTime_1 = require_throttleTime();
    Object.defineProperty(exports, "throttleTime", { enumerable: true, get: function() {
      return throttleTime_1.throttleTime;
    } });
    var throwIfEmpty_1 = require_throwIfEmpty();
    Object.defineProperty(exports, "throwIfEmpty", { enumerable: true, get: function() {
      return throwIfEmpty_1.throwIfEmpty;
    } });
    var timeInterval_1 = require_timeInterval();
    Object.defineProperty(exports, "timeInterval", { enumerable: true, get: function() {
      return timeInterval_1.timeInterval;
    } });
    var timeout_2 = require_timeout();
    Object.defineProperty(exports, "timeout", { enumerable: true, get: function() {
      return timeout_2.timeout;
    } });
    var timeoutWith_1 = require_timeoutWith();
    Object.defineProperty(exports, "timeoutWith", { enumerable: true, get: function() {
      return timeoutWith_1.timeoutWith;
    } });
    var timestamp_1 = require_timestamp();
    Object.defineProperty(exports, "timestamp", { enumerable: true, get: function() {
      return timestamp_1.timestamp;
    } });
    var toArray_1 = require_toArray();
    Object.defineProperty(exports, "toArray", { enumerable: true, get: function() {
      return toArray_1.toArray;
    } });
    var window_1 = require_window();
    Object.defineProperty(exports, "window", { enumerable: true, get: function() {
      return window_1.window;
    } });
    var windowCount_1 = require_windowCount();
    Object.defineProperty(exports, "windowCount", { enumerable: true, get: function() {
      return windowCount_1.windowCount;
    } });
    var windowTime_1 = require_windowTime();
    Object.defineProperty(exports, "windowTime", { enumerable: true, get: function() {
      return windowTime_1.windowTime;
    } });
    var windowToggle_1 = require_windowToggle();
    Object.defineProperty(exports, "windowToggle", { enumerable: true, get: function() {
      return windowToggle_1.windowToggle;
    } });
    var windowWhen_1 = require_windowWhen();
    Object.defineProperty(exports, "windowWhen", { enumerable: true, get: function() {
      return windowWhen_1.windowWhen;
    } });
    var withLatestFrom_1 = require_withLatestFrom();
    Object.defineProperty(exports, "withLatestFrom", { enumerable: true, get: function() {
      return withLatestFrom_1.withLatestFrom;
    } });
    var zipAll_1 = require_zipAll();
    Object.defineProperty(exports, "zipAll", { enumerable: true, get: function() {
      return zipAll_1.zipAll;
    } });
    var zipWith_1 = require_zipWith();
    Object.defineProperty(exports, "zipWith", { enumerable: true, get: function() {
      return zipWith_1.zipWith;
    } });
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/partition.js
var require_partition2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var not_1 = require_not();
    var filter_1 = require_filter();
    function partition(predicate, thisArg) {
      return function(source) {
        return [filter_1.filter(predicate, thisArg)(source), filter_1.filter(not_1.not(predicate, thisArg))(source)];
      };
    }
    exports.partition = partition;
  }
});

// node_modules/rxjs/dist/cjs/internal/operators/race.js
var require_race2 = __commonJS({
  "node_modules/rxjs/dist/cjs/internal/operators/race.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.race = void 0;
    var argsOrArgArray_1 = require_argsOrArgArray();
    var raceWith_1 = require_raceWith();
    function race() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return raceWith_1.raceWith.apply(void 0, __spreadArray([], __read(argsOrArgArray_1.argsOrArgArray(args))));
    }
    exports.race = race;
  }
});

// node_modules/rxjs/dist/cjs/operators/index.js
var require_operators = __commonJS({
  "node_modules/rxjs/dist/cjs/operators/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeAll = exports.merge = exports.max = exports.materialize = exports.mapTo = exports.map = exports.last = exports.isEmpty = exports.ignoreElements = exports.groupBy = exports.first = exports.findIndex = exports.find = exports.finalize = exports.filter = exports.expand = exports.exhaustMap = exports.exhaustAll = exports.exhaust = exports.every = exports.endWith = exports.elementAt = exports.distinctUntilKeyChanged = exports.distinctUntilChanged = exports.distinct = exports.dematerialize = exports.delayWhen = exports.delay = exports.defaultIfEmpty = exports.debounceTime = exports.debounce = exports.count = exports.connect = exports.concatWith = exports.concatMapTo = exports.concatMap = exports.concatAll = exports.concat = exports.combineLatestWith = exports.combineLatest = exports.combineLatestAll = exports.combineAll = exports.catchError = exports.bufferWhen = exports.bufferToggle = exports.bufferTime = exports.bufferCount = exports.buffer = exports.auditTime = exports.audit = void 0;
    exports.timeInterval = exports.throwIfEmpty = exports.throttleTime = exports.throttle = exports.tap = exports.takeWhile = exports.takeUntil = exports.takeLast = exports.take = exports.switchScan = exports.switchMapTo = exports.switchMap = exports.switchAll = exports.subscribeOn = exports.startWith = exports.skipWhile = exports.skipUntil = exports.skipLast = exports.skip = exports.single = exports.shareReplay = exports.share = exports.sequenceEqual = exports.scan = exports.sampleTime = exports.sample = exports.refCount = exports.retryWhen = exports.retry = exports.repeatWhen = exports.repeat = exports.reduce = exports.raceWith = exports.race = exports.publishReplay = exports.publishLast = exports.publishBehavior = exports.publish = exports.pluck = exports.partition = exports.pairwise = exports.onErrorResumeNext = exports.observeOn = exports.multicast = exports.min = exports.mergeWith = exports.mergeScan = exports.mergeMapTo = exports.mergeMap = exports.flatMap = void 0;
    exports.zipWith = exports.zipAll = exports.zip = exports.withLatestFrom = exports.windowWhen = exports.windowToggle = exports.windowTime = exports.windowCount = exports.window = exports.toArray = exports.timestamp = exports.timeoutWith = exports.timeout = void 0;
    var audit_1 = require_audit();
    Object.defineProperty(exports, "audit", { enumerable: true, get: function() {
      return audit_1.audit;
    } });
    var auditTime_1 = require_auditTime();
    Object.defineProperty(exports, "auditTime", { enumerable: true, get: function() {
      return auditTime_1.auditTime;
    } });
    var buffer_1 = require_buffer();
    Object.defineProperty(exports, "buffer", { enumerable: true, get: function() {
      return buffer_1.buffer;
    } });
    var bufferCount_1 = require_bufferCount();
    Object.defineProperty(exports, "bufferCount", { enumerable: true, get: function() {
      return bufferCount_1.bufferCount;
    } });
    var bufferTime_1 = require_bufferTime();
    Object.defineProperty(exports, "bufferTime", { enumerable: true, get: function() {
      return bufferTime_1.bufferTime;
    } });
    var bufferToggle_1 = require_bufferToggle();
    Object.defineProperty(exports, "bufferToggle", { enumerable: true, get: function() {
      return bufferToggle_1.bufferToggle;
    } });
    var bufferWhen_1 = require_bufferWhen();
    Object.defineProperty(exports, "bufferWhen", { enumerable: true, get: function() {
      return bufferWhen_1.bufferWhen;
    } });
    var catchError_1 = require_catchError();
    Object.defineProperty(exports, "catchError", { enumerable: true, get: function() {
      return catchError_1.catchError;
    } });
    var combineAll_1 = require_combineAll();
    Object.defineProperty(exports, "combineAll", { enumerable: true, get: function() {
      return combineAll_1.combineAll;
    } });
    var combineLatestAll_1 = require_combineLatestAll();
    Object.defineProperty(exports, "combineLatestAll", { enumerable: true, get: function() {
      return combineLatestAll_1.combineLatestAll;
    } });
    var combineLatest_1 = require_combineLatest2();
    Object.defineProperty(exports, "combineLatest", { enumerable: true, get: function() {
      return combineLatest_1.combineLatest;
    } });
    var combineLatestWith_1 = require_combineLatestWith();
    Object.defineProperty(exports, "combineLatestWith", { enumerable: true, get: function() {
      return combineLatestWith_1.combineLatestWith;
    } });
    var concat_1 = require_concat2();
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return concat_1.concat;
    } });
    var concatAll_1 = require_concatAll();
    Object.defineProperty(exports, "concatAll", { enumerable: true, get: function() {
      return concatAll_1.concatAll;
    } });
    var concatMap_1 = require_concatMap();
    Object.defineProperty(exports, "concatMap", { enumerable: true, get: function() {
      return concatMap_1.concatMap;
    } });
    var concatMapTo_1 = require_concatMapTo();
    Object.defineProperty(exports, "concatMapTo", { enumerable: true, get: function() {
      return concatMapTo_1.concatMapTo;
    } });
    var concatWith_1 = require_concatWith();
    Object.defineProperty(exports, "concatWith", { enumerable: true, get: function() {
      return concatWith_1.concatWith;
    } });
    var connect_1 = require_connect();
    Object.defineProperty(exports, "connect", { enumerable: true, get: function() {
      return connect_1.connect;
    } });
    var count_1 = require_count();
    Object.defineProperty(exports, "count", { enumerable: true, get: function() {
      return count_1.count;
    } });
    var debounce_1 = require_debounce();
    Object.defineProperty(exports, "debounce", { enumerable: true, get: function() {
      return debounce_1.debounce;
    } });
    var debounceTime_1 = require_debounceTime();
    Object.defineProperty(exports, "debounceTime", { enumerable: true, get: function() {
      return debounceTime_1.debounceTime;
    } });
    var defaultIfEmpty_1 = require_defaultIfEmpty();
    Object.defineProperty(exports, "defaultIfEmpty", { enumerable: true, get: function() {
      return defaultIfEmpty_1.defaultIfEmpty;
    } });
    var delay_1 = require_delay();
    Object.defineProperty(exports, "delay", { enumerable: true, get: function() {
      return delay_1.delay;
    } });
    var delayWhen_1 = require_delayWhen();
    Object.defineProperty(exports, "delayWhen", { enumerable: true, get: function() {
      return delayWhen_1.delayWhen;
    } });
    var dematerialize_1 = require_dematerialize();
    Object.defineProperty(exports, "dematerialize", { enumerable: true, get: function() {
      return dematerialize_1.dematerialize;
    } });
    var distinct_1 = require_distinct();
    Object.defineProperty(exports, "distinct", { enumerable: true, get: function() {
      return distinct_1.distinct;
    } });
    var distinctUntilChanged_1 = require_distinctUntilChanged();
    Object.defineProperty(exports, "distinctUntilChanged", { enumerable: true, get: function() {
      return distinctUntilChanged_1.distinctUntilChanged;
    } });
    var distinctUntilKeyChanged_1 = require_distinctUntilKeyChanged();
    Object.defineProperty(exports, "distinctUntilKeyChanged", { enumerable: true, get: function() {
      return distinctUntilKeyChanged_1.distinctUntilKeyChanged;
    } });
    var elementAt_1 = require_elementAt();
    Object.defineProperty(exports, "elementAt", { enumerable: true, get: function() {
      return elementAt_1.elementAt;
    } });
    var endWith_1 = require_endWith();
    Object.defineProperty(exports, "endWith", { enumerable: true, get: function() {
      return endWith_1.endWith;
    } });
    var every_1 = require_every();
    Object.defineProperty(exports, "every", { enumerable: true, get: function() {
      return every_1.every;
    } });
    var exhaust_1 = require_exhaust();
    Object.defineProperty(exports, "exhaust", { enumerable: true, get: function() {
      return exhaust_1.exhaust;
    } });
    var exhaustAll_1 = require_exhaustAll();
    Object.defineProperty(exports, "exhaustAll", { enumerable: true, get: function() {
      return exhaustAll_1.exhaustAll;
    } });
    var exhaustMap_1 = require_exhaustMap();
    Object.defineProperty(exports, "exhaustMap", { enumerable: true, get: function() {
      return exhaustMap_1.exhaustMap;
    } });
    var expand_1 = require_expand();
    Object.defineProperty(exports, "expand", { enumerable: true, get: function() {
      return expand_1.expand;
    } });
    var filter_1 = require_filter();
    Object.defineProperty(exports, "filter", { enumerable: true, get: function() {
      return filter_1.filter;
    } });
    var finalize_1 = require_finalize();
    Object.defineProperty(exports, "finalize", { enumerable: true, get: function() {
      return finalize_1.finalize;
    } });
    var find_1 = require_find();
    Object.defineProperty(exports, "find", { enumerable: true, get: function() {
      return find_1.find;
    } });
    var findIndex_1 = require_findIndex();
    Object.defineProperty(exports, "findIndex", { enumerable: true, get: function() {
      return findIndex_1.findIndex;
    } });
    var first_1 = require_first();
    Object.defineProperty(exports, "first", { enumerable: true, get: function() {
      return first_1.first;
    } });
    var groupBy_1 = require_groupBy();
    Object.defineProperty(exports, "groupBy", { enumerable: true, get: function() {
      return groupBy_1.groupBy;
    } });
    var ignoreElements_1 = require_ignoreElements();
    Object.defineProperty(exports, "ignoreElements", { enumerable: true, get: function() {
      return ignoreElements_1.ignoreElements;
    } });
    var isEmpty_1 = require_isEmpty();
    Object.defineProperty(exports, "isEmpty", { enumerable: true, get: function() {
      return isEmpty_1.isEmpty;
    } });
    var last_1 = require_last();
    Object.defineProperty(exports, "last", { enumerable: true, get: function() {
      return last_1.last;
    } });
    var map_1 = require_map();
    Object.defineProperty(exports, "map", { enumerable: true, get: function() {
      return map_1.map;
    } });
    var mapTo_1 = require_mapTo();
    Object.defineProperty(exports, "mapTo", { enumerable: true, get: function() {
      return mapTo_1.mapTo;
    } });
    var materialize_1 = require_materialize();
    Object.defineProperty(exports, "materialize", { enumerable: true, get: function() {
      return materialize_1.materialize;
    } });
    var max_1 = require_max();
    Object.defineProperty(exports, "max", { enumerable: true, get: function() {
      return max_1.max;
    } });
    var merge_1 = require_merge2();
    Object.defineProperty(exports, "merge", { enumerable: true, get: function() {
      return merge_1.merge;
    } });
    var mergeAll_1 = require_mergeAll();
    Object.defineProperty(exports, "mergeAll", { enumerable: true, get: function() {
      return mergeAll_1.mergeAll;
    } });
    var flatMap_1 = require_flatMap();
    Object.defineProperty(exports, "flatMap", { enumerable: true, get: function() {
      return flatMap_1.flatMap;
    } });
    var mergeMap_1 = require_mergeMap();
    Object.defineProperty(exports, "mergeMap", { enumerable: true, get: function() {
      return mergeMap_1.mergeMap;
    } });
    var mergeMapTo_1 = require_mergeMapTo();
    Object.defineProperty(exports, "mergeMapTo", { enumerable: true, get: function() {
      return mergeMapTo_1.mergeMapTo;
    } });
    var mergeScan_1 = require_mergeScan();
    Object.defineProperty(exports, "mergeScan", { enumerable: true, get: function() {
      return mergeScan_1.mergeScan;
    } });
    var mergeWith_1 = require_mergeWith();
    Object.defineProperty(exports, "mergeWith", { enumerable: true, get: function() {
      return mergeWith_1.mergeWith;
    } });
    var min_1 = require_min();
    Object.defineProperty(exports, "min", { enumerable: true, get: function() {
      return min_1.min;
    } });
    var multicast_1 = require_multicast();
    Object.defineProperty(exports, "multicast", { enumerable: true, get: function() {
      return multicast_1.multicast;
    } });
    var observeOn_1 = require_observeOn();
    Object.defineProperty(exports, "observeOn", { enumerable: true, get: function() {
      return observeOn_1.observeOn;
    } });
    var onErrorResumeNextWith_1 = require_onErrorResumeNextWith();
    Object.defineProperty(exports, "onErrorResumeNext", { enumerable: true, get: function() {
      return onErrorResumeNextWith_1.onErrorResumeNext;
    } });
    var pairwise_1 = require_pairwise();
    Object.defineProperty(exports, "pairwise", { enumerable: true, get: function() {
      return pairwise_1.pairwise;
    } });
    var partition_1 = require_partition2();
    Object.defineProperty(exports, "partition", { enumerable: true, get: function() {
      return partition_1.partition;
    } });
    var pluck_1 = require_pluck();
    Object.defineProperty(exports, "pluck", { enumerable: true, get: function() {
      return pluck_1.pluck;
    } });
    var publish_1 = require_publish();
    Object.defineProperty(exports, "publish", { enumerable: true, get: function() {
      return publish_1.publish;
    } });
    var publishBehavior_1 = require_publishBehavior();
    Object.defineProperty(exports, "publishBehavior", { enumerable: true, get: function() {
      return publishBehavior_1.publishBehavior;
    } });
    var publishLast_1 = require_publishLast();
    Object.defineProperty(exports, "publishLast", { enumerable: true, get: function() {
      return publishLast_1.publishLast;
    } });
    var publishReplay_1 = require_publishReplay();
    Object.defineProperty(exports, "publishReplay", { enumerable: true, get: function() {
      return publishReplay_1.publishReplay;
    } });
    var race_1 = require_race2();
    Object.defineProperty(exports, "race", { enumerable: true, get: function() {
      return race_1.race;
    } });
    var raceWith_1 = require_raceWith();
    Object.defineProperty(exports, "raceWith", { enumerable: true, get: function() {
      return raceWith_1.raceWith;
    } });
    var reduce_1 = require_reduce();
    Object.defineProperty(exports, "reduce", { enumerable: true, get: function() {
      return reduce_1.reduce;
    } });
    var repeat_1 = require_repeat();
    Object.defineProperty(exports, "repeat", { enumerable: true, get: function() {
      return repeat_1.repeat;
    } });
    var repeatWhen_1 = require_repeatWhen();
    Object.defineProperty(exports, "repeatWhen", { enumerable: true, get: function() {
      return repeatWhen_1.repeatWhen;
    } });
    var retry_1 = require_retry();
    Object.defineProperty(exports, "retry", { enumerable: true, get: function() {
      return retry_1.retry;
    } });
    var retryWhen_1 = require_retryWhen();
    Object.defineProperty(exports, "retryWhen", { enumerable: true, get: function() {
      return retryWhen_1.retryWhen;
    } });
    var refCount_1 = require_refCount();
    Object.defineProperty(exports, "refCount", { enumerable: true, get: function() {
      return refCount_1.refCount;
    } });
    var sample_1 = require_sample();
    Object.defineProperty(exports, "sample", { enumerable: true, get: function() {
      return sample_1.sample;
    } });
    var sampleTime_1 = require_sampleTime();
    Object.defineProperty(exports, "sampleTime", { enumerable: true, get: function() {
      return sampleTime_1.sampleTime;
    } });
    var scan_1 = require_scan();
    Object.defineProperty(exports, "scan", { enumerable: true, get: function() {
      return scan_1.scan;
    } });
    var sequenceEqual_1 = require_sequenceEqual();
    Object.defineProperty(exports, "sequenceEqual", { enumerable: true, get: function() {
      return sequenceEqual_1.sequenceEqual;
    } });
    var share_1 = require_share();
    Object.defineProperty(exports, "share", { enumerable: true, get: function() {
      return share_1.share;
    } });
    var shareReplay_1 = require_shareReplay();
    Object.defineProperty(exports, "shareReplay", { enumerable: true, get: function() {
      return shareReplay_1.shareReplay;
    } });
    var single_1 = require_single();
    Object.defineProperty(exports, "single", { enumerable: true, get: function() {
      return single_1.single;
    } });
    var skip_1 = require_skip();
    Object.defineProperty(exports, "skip", { enumerable: true, get: function() {
      return skip_1.skip;
    } });
    var skipLast_1 = require_skipLast();
    Object.defineProperty(exports, "skipLast", { enumerable: true, get: function() {
      return skipLast_1.skipLast;
    } });
    var skipUntil_1 = require_skipUntil();
    Object.defineProperty(exports, "skipUntil", { enumerable: true, get: function() {
      return skipUntil_1.skipUntil;
    } });
    var skipWhile_1 = require_skipWhile();
    Object.defineProperty(exports, "skipWhile", { enumerable: true, get: function() {
      return skipWhile_1.skipWhile;
    } });
    var startWith_1 = require_startWith();
    Object.defineProperty(exports, "startWith", { enumerable: true, get: function() {
      return startWith_1.startWith;
    } });
    var subscribeOn_1 = require_subscribeOn();
    Object.defineProperty(exports, "subscribeOn", { enumerable: true, get: function() {
      return subscribeOn_1.subscribeOn;
    } });
    var switchAll_1 = require_switchAll();
    Object.defineProperty(exports, "switchAll", { enumerable: true, get: function() {
      return switchAll_1.switchAll;
    } });
    var switchMap_1 = require_switchMap();
    Object.defineProperty(exports, "switchMap", { enumerable: true, get: function() {
      return switchMap_1.switchMap;
    } });
    var switchMapTo_1 = require_switchMapTo();
    Object.defineProperty(exports, "switchMapTo", { enumerable: true, get: function() {
      return switchMapTo_1.switchMapTo;
    } });
    var switchScan_1 = require_switchScan();
    Object.defineProperty(exports, "switchScan", { enumerable: true, get: function() {
      return switchScan_1.switchScan;
    } });
    var take_1 = require_take();
    Object.defineProperty(exports, "take", { enumerable: true, get: function() {
      return take_1.take;
    } });
    var takeLast_1 = require_takeLast();
    Object.defineProperty(exports, "takeLast", { enumerable: true, get: function() {
      return takeLast_1.takeLast;
    } });
    var takeUntil_1 = require_takeUntil();
    Object.defineProperty(exports, "takeUntil", { enumerable: true, get: function() {
      return takeUntil_1.takeUntil;
    } });
    var takeWhile_1 = require_takeWhile();
    Object.defineProperty(exports, "takeWhile", { enumerable: true, get: function() {
      return takeWhile_1.takeWhile;
    } });
    var tap_1 = require_tap();
    Object.defineProperty(exports, "tap", { enumerable: true, get: function() {
      return tap_1.tap;
    } });
    var throttle_1 = require_throttle();
    Object.defineProperty(exports, "throttle", { enumerable: true, get: function() {
      return throttle_1.throttle;
    } });
    var throttleTime_1 = require_throttleTime();
    Object.defineProperty(exports, "throttleTime", { enumerable: true, get: function() {
      return throttleTime_1.throttleTime;
    } });
    var throwIfEmpty_1 = require_throwIfEmpty();
    Object.defineProperty(exports, "throwIfEmpty", { enumerable: true, get: function() {
      return throwIfEmpty_1.throwIfEmpty;
    } });
    var timeInterval_1 = require_timeInterval();
    Object.defineProperty(exports, "timeInterval", { enumerable: true, get: function() {
      return timeInterval_1.timeInterval;
    } });
    var timeout_1 = require_timeout();
    Object.defineProperty(exports, "timeout", { enumerable: true, get: function() {
      return timeout_1.timeout;
    } });
    var timeoutWith_1 = require_timeoutWith();
    Object.defineProperty(exports, "timeoutWith", { enumerable: true, get: function() {
      return timeoutWith_1.timeoutWith;
    } });
    var timestamp_1 = require_timestamp();
    Object.defineProperty(exports, "timestamp", { enumerable: true, get: function() {
      return timestamp_1.timestamp;
    } });
    var toArray_1 = require_toArray();
    Object.defineProperty(exports, "toArray", { enumerable: true, get: function() {
      return toArray_1.toArray;
    } });
    var window_1 = require_window();
    Object.defineProperty(exports, "window", { enumerable: true, get: function() {
      return window_1.window;
    } });
    var windowCount_1 = require_windowCount();
    Object.defineProperty(exports, "windowCount", { enumerable: true, get: function() {
      return windowCount_1.windowCount;
    } });
    var windowTime_1 = require_windowTime();
    Object.defineProperty(exports, "windowTime", { enumerable: true, get: function() {
      return windowTime_1.windowTime;
    } });
    var windowToggle_1 = require_windowToggle();
    Object.defineProperty(exports, "windowToggle", { enumerable: true, get: function() {
      return windowToggle_1.windowToggle;
    } });
    var windowWhen_1 = require_windowWhen();
    Object.defineProperty(exports, "windowWhen", { enumerable: true, get: function() {
      return windowWhen_1.windowWhen;
    } });
    var withLatestFrom_1 = require_withLatestFrom();
    Object.defineProperty(exports, "withLatestFrom", { enumerable: true, get: function() {
      return withLatestFrom_1.withLatestFrom;
    } });
    var zip_1 = require_zip2();
    Object.defineProperty(exports, "zip", { enumerable: true, get: function() {
      return zip_1.zip;
    } });
    var zipAll_1 = require_zipAll();
    Object.defineProperty(exports, "zipAll", { enumerable: true, get: function() {
      return zipAll_1.zipAll;
    } });
    var zipWith_1 = require_zipWith();
    Object.defineProperty(exports, "zipWith", { enumerable: true, get: function() {
      return zipWith_1.zipWith;
    } });
  }
});

// node_modules/neo4j-driver/lib/result-rx.js
var require_result_rx = __commonJS({
  "node_modules/neo4j-driver/lib/result-rx.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var rxjs_1 = require_cjs();
    var operators_1 = require_operators();
    var States = {
      READY: 0,
      STREAMING: 1,
      COMPLETED: 2
    };
    var RxResult = (
      /** @class */
      function() {
        function RxResult2(result, state) {
          var replayedResult = result.pipe((0, operators_1.publishReplay)(1), (0, operators_1.refCount)());
          this._result = replayedResult;
          this._keys = replayedResult.pipe((0, operators_1.mergeMap)(function(r) {
            return (0, rxjs_1.from)(r.keys());
          }), (0, operators_1.publishReplay)(1), (0, operators_1.refCount)());
          this._records = void 0;
          this._controls = new StreamControl();
          this._summary = new rxjs_1.ReplaySubject();
          this._state = state || States.READY;
        }
        RxResult2.prototype.keys = function() {
          return this._keys;
        };
        RxResult2.prototype.records = function() {
          var _this = this;
          var result = this._result.pipe((0, operators_1.mergeMap)(function(result2) {
            return new rxjs_1.Observable(function(recordsObserver) {
              return _this._startStreaming({ result: result2, recordsObserver });
            });
          }));
          result.push = function() {
            return _this._push();
          };
          return result;
        };
        RxResult2.prototype.consume = function() {
          var _this = this;
          return this._result.pipe((0, operators_1.mergeMap)(function(result) {
            return new rxjs_1.Observable(function(summaryObserver) {
              return _this._startStreaming({ result, summaryObserver });
            });
          }));
        };
        RxResult2.prototype.pause = function() {
          this._controls.pause();
        };
        RxResult2.prototype.resume = function() {
          return this._controls.resume();
        };
        RxResult2.prototype.push = function() {
          return this._controls.push();
        };
        RxResult2.prototype._startStreaming = function(_a) {
          var _b = _a === void 0 ? {} : _a, result = _b.result, _c = _b.recordsObserver, recordsObserver = _c === void 0 ? null : _c, _d = _b.summaryObserver, summaryObserver = _d === void 0 ? null : _d;
          var subscriptions = [];
          if (summaryObserver) {
            subscriptions.push(this._summary.subscribe(summaryObserver));
          }
          if (this._state < States.STREAMING) {
            this._state = States.STREAMING;
            this._setupRecordsStream(result);
            if (recordsObserver) {
              subscriptions.push(this._records.subscribe(recordsObserver));
            } else {
              result._cancel();
            }
            subscriptions.push({
              unsubscribe: function() {
                if (result._cancel) {
                  result._cancel();
                }
              }
            });
          } else if (recordsObserver) {
            recordsObserver.error((0, neo4j_driver_core_1.newError)("Streaming has already started/consumed with a previous records or summary subscription."));
          }
          return function() {
            subscriptions.forEach(function(s) {
              return s.unsubscribe();
            });
          };
        };
        RxResult2.prototype._toObservable = function() {
          var _this = this;
          function wrap(result) {
            return new rxjs_1.Observable(function(observer) {
              observer.next(result);
              observer.complete();
            });
          }
          return new rxjs_1.Observable(function(observer) {
            _this._result.subscribe({
              complete: function() {
                return observer.complete();
              },
              next: function(result) {
                return observer.next(new RxResult2(wrap(result)), _this._state);
              },
              error: function(e) {
                return observer.error(e);
              }
            });
          });
        };
        RxResult2.prototype._setupRecordsStream = function(result) {
          var _this = this;
          if (this._records) {
            return this._records;
          }
          this._records = createFullyControlledSubject(result[Symbol.asyncIterator](), {
            complete: function() {
              return __awaiter(_this, void 0, void 0, function() {
                var _a, _b;
                return __generator(this, function(_c) {
                  switch (_c.label) {
                    case 0:
                      this._state = States.COMPLETED;
                      _b = (_a = this._summary).next;
                      return [4, result.summary()];
                    case 1:
                      _b.apply(_a, [_c.sent()]);
                      this._summary.complete();
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            },
            error: function(error) {
              _this._state = States.COMPLETED;
              _this._summary.error(error);
            }
          }, this._controls);
          return this._records;
        };
        return RxResult2;
      }()
    );
    exports.default = RxResult;
    function createFullyControlledSubject(iterator, completeObserver, streamControl) {
      var _this = this;
      if (streamControl === void 0) {
        streamControl = new StreamControl();
      }
      var subject = new rxjs_1.Subject();
      var pushNextValue = function(result) {
        return __awaiter(_this, void 0, void 0, function() {
          var _a, done, value, error_1;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                _b.trys.push([0, 2, 3, 4]);
                streamControl.pushing = true;
                return [4, result];
              case 1:
                _a = _b.sent(), done = _a.done, value = _a.value;
                if (done) {
                  subject.complete();
                  completeObserver.complete();
                } else {
                  subject.next(value);
                  if (!streamControl.paused) {
                    pushNextValue(iterator.next()).catch(function() {
                    });
                  }
                }
                return [3, 4];
              case 2:
                error_1 = _b.sent();
                subject.error(error_1);
                completeObserver.error(error_1);
                return [3, 4];
              case 3:
                streamControl.pushing = false;
                return [
                  7
                  /*endfinally*/
                ];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      function push(value) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, pushNextValue(iterator.next(value))];
              case 1:
                _a.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
      streamControl.pusher = push;
      push();
      return subject;
    }
    var StreamControl = (
      /** @class */
      function() {
        function StreamControl2(push) {
          if (push === void 0) {
            push = function() {
              return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                  return [
                    2
                    /*return*/
                  ];
                });
              });
            };
          }
          var _this = this;
          this._paused = false;
          this._pushing = false;
          this._push = push;
        }
        StreamControl2.prototype.pause = function() {
          this._paused = true;
        };
        Object.defineProperty(StreamControl2.prototype, "paused", {
          get: function() {
            return this._paused;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(StreamControl2.prototype, "pushing", {
          get: function() {
            return this._pushing;
          },
          set: function(pushing) {
            this._pushing = pushing;
          },
          enumerable: false,
          configurable: true
        });
        StreamControl2.prototype.resume = function() {
          return __awaiter(this, void 0, void 0, function() {
            var wasPaused;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  wasPaused = this._paused;
                  this._paused = false;
                  if (!(wasPaused && !this._pushing)) return [3, 2];
                  return [4, this._push()];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        StreamControl2.prototype.push = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this.pause();
                  return [4, this._push()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Object.defineProperty(StreamControl2.prototype, "pusher", {
          get: function() {
            return this._push;
          },
          set: function(push) {
            this._push = push;
          },
          enumerable: false,
          configurable: true
        });
        return StreamControl2;
      }()
    );
  }
});

// node_modules/neo4j-driver/lib/transaction-rx.js
var require_transaction_rx = __commonJS({
  "node_modules/neo4j-driver/lib/transaction-rx.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var rxjs_1 = require_cjs();
    var result_rx_1 = __importDefault(require_result_rx());
    var neo4j_driver_core_1 = __importDefault(require_lib());
    var RxTransaction = (
      /** @class */
      function() {
        function RxTransaction2(txc) {
          this._txc = txc;
        }
        RxTransaction2.prototype.run = function(query, parameters) {
          var _this = this;
          return new result_rx_1.default(new rxjs_1.Observable(function(observer) {
            try {
              observer.next(_this._txc.run(query, parameters));
              observer.complete();
            } catch (err) {
              observer.error(err);
            }
            return function() {
            };
          }));
        };
        RxTransaction2.prototype.commit = function() {
          var _this = this;
          return new rxjs_1.Observable(function(observer) {
            _this._txc.commit().then(function() {
              observer.complete();
            }).catch(function(err) {
              return observer.error(err);
            });
          });
        };
        RxTransaction2.prototype.rollback = function() {
          var _this = this;
          return new rxjs_1.Observable(function(observer) {
            _this._txc.rollback().then(function() {
              observer.complete();
            }).catch(function(err) {
              return observer.error(err);
            });
          });
        };
        RxTransaction2.prototype.isOpen = function() {
          return this._txc.isOpen();
        };
        RxTransaction2.prototype.close = function() {
          var _this = this;
          return new rxjs_1.Observable(function(observer) {
            _this._txc.close().then(function() {
              observer.complete();
            }).catch(function(err) {
              return observer.error(err);
            });
          });
        };
        return RxTransaction2;
      }()
    );
    exports.default = RxTransaction;
  }
});

// node_modules/neo4j-driver/lib/transaction-managed-rx.js
var require_transaction_managed_rx = __commonJS({
  "node_modules/neo4j-driver/lib/transaction-managed-rx.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var result_rx_1 = __importDefault(require_result_rx());
    var transaction_rx_1 = __importDefault(require_transaction_rx());
    var RxManagedTransaction = (
      /** @class */
      function() {
        function RxManagedTransaction2(_a) {
          var run = _a.run;
          this._run = run;
        }
        RxManagedTransaction2.fromTransaction = function(txc) {
          return new RxManagedTransaction2({
            run: txc.run.bind(txc)
          });
        };
        RxManagedTransaction2.prototype.run = function(query, parameters) {
          return this._run(query, parameters);
        };
        return RxManagedTransaction2;
      }()
    );
    exports.default = RxManagedTransaction;
  }
});

// node_modules/neo4j-driver/lib/internal/retry-logic-rx.js
var require_retry_logic_rx = __commonJS({
  "node_modules/neo4j-driver/lib/internal/retry-logic-rx.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var rxjs_1 = require_cjs();
    var operators_1 = require_operators();
    var Logger = neo4j_driver_core_1.internal.logger.Logger;
    var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
    var DEFAULT_MAX_RETRY_TIME_MS = 30 * 1e3;
    var DEFAULT_INITIAL_RETRY_DELAY_MS = 1e3;
    var DEFAULT_RETRY_DELAY_MULTIPLIER = 2;
    var DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;
    var RxRetryLogic = (
      /** @class */
      function() {
        function RxRetryLogic2(_a) {
          var _b = _a === void 0 ? {} : _a, _c = _b.maxRetryTimeout, maxRetryTimeout = _c === void 0 ? DEFAULT_MAX_RETRY_TIME_MS : _c, _d = _b.initialDelay, initialDelay = _d === void 0 ? DEFAULT_INITIAL_RETRY_DELAY_MS : _d, _e = _b.delayMultiplier, delayMultiplier = _e === void 0 ? DEFAULT_RETRY_DELAY_MULTIPLIER : _e, _f = _b.delayJitter, delayJitter = _f === void 0 ? DEFAULT_RETRY_DELAY_JITTER_FACTOR : _f, _g = _b.logger, logger = _g === void 0 ? null : _g;
          this._maxRetryTimeout = valueOrDefault(maxRetryTimeout, DEFAULT_MAX_RETRY_TIME_MS);
          this._initialDelay = valueOrDefault(initialDelay, DEFAULT_INITIAL_RETRY_DELAY_MS);
          this._delayMultiplier = valueOrDefault(delayMultiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);
          this._delayJitter = valueOrDefault(delayJitter, DEFAULT_RETRY_DELAY_JITTER_FACTOR);
          this._logger = logger;
        }
        RxRetryLogic2.prototype.retry = function(work) {
          var _this = this;
          return work.pipe((0, operators_1.retryWhen)(function(failedWork) {
            var handledExceptions = [];
            var startTime = Date.now();
            var retryCount = 1;
            var delayDuration = _this._initialDelay;
            return failedWork.pipe((0, operators_1.mergeMap)(function(err) {
              if (!(0, neo4j_driver_core_1.isRetriableError)(err)) {
                return (0, rxjs_1.throwError)(function() {
                  return err;
                });
              }
              handledExceptions.push(err);
              if (retryCount >= 2 && Date.now() - startTime >= _this._maxRetryTimeout) {
                var error_1 = (0, neo4j_driver_core_1.newError)("Failed after retried for ".concat(retryCount, " times in ").concat(_this._maxRetryTimeout, " ms. Make sure that your database is online and retry again."), SERVICE_UNAVAILABLE);
                error_1.seenErrors = handledExceptions;
                return (0, rxjs_1.throwError)(function() {
                  return error_1;
                });
              }
              var nextDelayDuration = _this._computeNextDelay(delayDuration);
              delayDuration = delayDuration * _this._delayMultiplier;
              retryCount++;
              if (_this._logger) {
                _this._logger.warn("Transaction failed and will be retried in ".concat(nextDelayDuration));
              }
              return (0, rxjs_1.of)(1).pipe((0, operators_1.delay)(nextDelayDuration));
            }));
          }));
        };
        RxRetryLogic2.prototype._computeNextDelay = function(delay) {
          var jitter = delay * this._delayJitter;
          return delay - jitter + 2 * jitter * Math.random();
        };
        return RxRetryLogic2;
      }()
    );
    exports.default = RxRetryLogic;
    function valueOrDefault(value, defaultValue) {
      if (value || value === 0) {
        return value;
      }
      return defaultValue;
    }
  }
});

// node_modules/neo4j-driver/lib/session-rx.js
var require_session_rx = __commonJS({
  "node_modules/neo4j-driver/lib/session-rx.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var rxjs_1 = require_cjs();
    var operators_1 = require_operators();
    var result_rx_1 = __importDefault(require_result_rx());
    var neo4j_driver_core_1 = require_lib();
    var transaction_rx_1 = __importDefault(require_transaction_rx());
    var transaction_managed_rx_1 = __importDefault(require_transaction_managed_rx());
    var retry_logic_rx_1 = __importDefault(require_retry_logic_rx());
    var _a = neo4j_driver_core_1.internal.constants;
    var ACCESS_MODE_READ = _a.ACCESS_MODE_READ;
    var ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE;
    var TELEMETRY_APIS = _a.TELEMETRY_APIS;
    var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
    var RxSession = (
      /** @class */
      function() {
        function RxSession2(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, session = _b.session, config = _b.config, log = _b.log;
          this._session = session;
          this._retryLogic = _createRetryLogic(config);
          this._log = log;
        }
        RxSession2.prototype.run = function(query, parameters, transactionConfig) {
          var _this = this;
          return new result_rx_1.default(new rxjs_1.Observable(function(observer) {
            try {
              observer.next(_this._session.run(query, parameters, transactionConfig));
              observer.complete();
            } catch (err) {
              observer.error(err);
            }
            return function() {
            };
          }));
        };
        RxSession2.prototype.beginTransaction = function(transactionConfig) {
          return this._beginTransaction(this._session._mode, transactionConfig, { api: TELEMETRY_APIS.UNMANAGED_TRANSACTION });
        };
        RxSession2.prototype.readTransaction = function(work, transactionConfig) {
          return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);
        };
        RxSession2.prototype.writeTransaction = function(work, transactionConfig) {
          return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);
        };
        RxSession2.prototype.executeRead = function(work, transactionConfig) {
          return this._executeInTransaction(ACCESS_MODE_READ, work, transactionConfig);
        };
        RxSession2.prototype.executeWrite = function(work, transactionConfig) {
          return this._executeInTransaction(ACCESS_MODE_WRITE, work, transactionConfig);
        };
        RxSession2.prototype._executeInTransaction = function(accessMode, work, transactionConfig) {
          var wrapper = function(txc) {
            return new transaction_managed_rx_1.default({
              run: txc.run.bind(txc)
            });
          };
          return this._runTransaction(accessMode, work, transactionConfig, wrapper);
        };
        RxSession2.prototype.close = function() {
          var _this = this;
          return new rxjs_1.Observable(function(observer) {
            _this._session.close().then(function() {
              observer.complete();
            }).catch(function(err) {
              return observer.error(err);
            });
          });
        };
        RxSession2.prototype[Symbol.asyncDispose] = function() {
          return this.close();
        };
        RxSession2.prototype.lastBookmark = function() {
          return this.lastBookmarks();
        };
        RxSession2.prototype.lastBookmarks = function() {
          return this._session.lastBookmarks();
        };
        RxSession2.prototype._beginTransaction = function(accessMode, transactionConfig, apiTelemetryConfig) {
          var _this = this;
          var txConfig = TxConfig.empty();
          if (transactionConfig) {
            txConfig = new TxConfig(transactionConfig, this._log);
          }
          return new rxjs_1.Observable(function(observer) {
            try {
              _this._session._beginTransaction(accessMode, txConfig, apiTelemetryConfig).then(function(tx) {
                observer.next(new transaction_rx_1.default(tx));
                observer.complete();
              }).catch(function(err) {
                return observer.error(err);
              });
            } catch (err) {
              observer.error(err);
            }
            return function() {
            };
          });
        };
        RxSession2.prototype._runTransaction = function(accessMode, work, transactionConfig, transactionWrapper) {
          var _this = this;
          if (transactionWrapper === void 0) {
            transactionWrapper = function(tx) {
              return tx;
            };
          }
          var txConfig = TxConfig.empty();
          if (transactionConfig) {
            txConfig = new TxConfig(transactionConfig);
          }
          var context = {
            apiTelemetryConfig: {
              api: TELEMETRY_APIS.MANAGED_TRANSACTION,
              onTelemetrySuccess: function() {
                context.apiTelemetryConfig = void 0;
              }
            }
          };
          return this._retryLogic.retry((0, rxjs_1.of)(1).pipe((0, operators_1.mergeMap)(function() {
            return _this._beginTransaction(accessMode, txConfig, context.apiTelemetryConfig);
          }), (0, operators_1.mergeMap)(function(txc) {
            return (0, rxjs_1.defer)(function() {
              try {
                return work(transactionWrapper(txc));
              } catch (err) {
                return (0, rxjs_1.throwError)(function() {
                  return err;
                });
              }
            }).pipe((0, operators_1.catchError)(function(err) {
              return txc.rollback().pipe((0, operators_1.concatWith)((0, rxjs_1.throwError)(function() {
                return err;
              })));
            }), (0, operators_1.concatWith)(txc.commit()));
          })));
        };
        return RxSession2;
      }()
    );
    exports.default = RxSession;
    function _createRetryLogic(config) {
      var maxRetryTimeout = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;
      return new retry_logic_rx_1.default({ maxRetryTimeout });
    }
  }
});

// node_modules/neo4j-driver/lib/driver.js
var require_driver2 = __commonJS({
  "node_modules/neo4j-driver/lib/driver.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WRITE = exports.READ = exports.Driver = void 0;
    var neo4j_driver_core_1 = require_lib();
    var session_rx_1 = __importDefault(require_session_rx());
    var FETCH_ALL = neo4j_driver_core_1.internal.constants.FETCH_ALL;
    var READ = neo4j_driver_core_1.driver.READ;
    var WRITE = neo4j_driver_core_1.driver.WRITE;
    exports.READ = READ;
    exports.WRITE = WRITE;
    var Driver = (
      /** @class */
      function(_super) {
        __extends(Driver2, _super);
        function Driver2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Driver2.prototype.rxSession = function(_a) {
          var _b = _a === void 0 ? {} : _a, _c = _b.defaultAccessMode, defaultAccessMode = _c === void 0 ? WRITE : _c, bookmarks = _b.bookmarks, _d = _b.database, database = _d === void 0 ? "" : _d, fetchSize = _b.fetchSize, impersonatedUser = _b.impersonatedUser, bookmarkManager = _b.bookmarkManager, notificationFilter = _b.notificationFilter, auth = _b.auth;
          return new session_rx_1.default({
            session: this._newSession({
              defaultAccessMode,
              bookmarkOrBookmarks: bookmarks,
              database,
              impersonatedUser,
              auth,
              reactive: false,
              fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize),
              bookmarkManager,
              notificationFilter,
              log: this._log
            }),
            config: this._config,
            log: this._log
          });
        };
        return Driver2;
      }(neo4j_driver_core_1.Driver)
    );
    exports.Driver = Driver;
    function validateFetchSizeValue(rawValue, defaultWhenAbsent) {
      var fetchSize = parseInt(rawValue, 10);
      if (fetchSize > 0 || fetchSize === FETCH_ALL) {
        return fetchSize;
      } else if (fetchSize === 0 || fetchSize < 0) {
        throw new Error("The fetch size can only be a positive value or ".concat(FETCH_ALL, " for ALL. However fetchSize = ").concat(fetchSize));
      } else {
        return defaultWhenAbsent;
      }
    }
    exports.default = Driver;
  }
});

// node_modules/neo4j-driver/lib/version.js
var require_version = __commonJS({
  "node_modules/neo4j-driver/lib/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "5.28.1";
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/load-balancing/load-balancing-strategy.js
var require_load_balancing_strategy = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/load-balancing/load-balancing-strategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LoadBalancingStrategy = (
      /** @class */
      function() {
        function LoadBalancingStrategy2() {
        }
        LoadBalancingStrategy2.prototype.selectReader = function(knownReaders) {
          throw new Error("Abstract function");
        };
        LoadBalancingStrategy2.prototype.selectWriter = function(knownWriters) {
          throw new Error("Abstract function");
        };
        return LoadBalancingStrategy2;
      }()
    );
    exports.default = LoadBalancingStrategy;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/load-balancing/round-robin-array-index.js
var require_round_robin_array_index = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/load-balancing/round-robin-array-index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RoundRobinArrayIndex = (
      /** @class */
      function() {
        function RoundRobinArrayIndex2(initialOffset) {
          this._offset = initialOffset || 0;
        }
        RoundRobinArrayIndex2.prototype.next = function(arrayLength) {
          if (arrayLength === 0) {
            return -1;
          }
          var nextOffset = this._offset;
          this._offset += 1;
          if (this._offset === Number.MAX_SAFE_INTEGER) {
            this._offset = 0;
          }
          return nextOffset % arrayLength;
        };
        return RoundRobinArrayIndex2;
      }()
    );
    exports.default = RoundRobinArrayIndex;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/load-balancing/least-connected-load-balancing-strategy.js
var require_least_connected_load_balancing_strategy = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/load-balancing/least-connected-load-balancing-strategy.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var round_robin_array_index_1 = __importDefault(require_round_robin_array_index());
    var load_balancing_strategy_1 = __importDefault(require_load_balancing_strategy());
    var LeastConnectedLoadBalancingStrategy = (
      /** @class */
      function(_super) {
        __extends(LeastConnectedLoadBalancingStrategy2, _super);
        function LeastConnectedLoadBalancingStrategy2(connectionPool) {
          var _this = _super.call(this) || this;
          _this._readersIndex = new round_robin_array_index_1.default();
          _this._writersIndex = new round_robin_array_index_1.default();
          _this._connectionPool = connectionPool;
          return _this;
        }
        LeastConnectedLoadBalancingStrategy2.prototype.selectReader = function(knownReaders) {
          return this._select(knownReaders, this._readersIndex);
        };
        LeastConnectedLoadBalancingStrategy2.prototype.selectWriter = function(knownWriters) {
          return this._select(knownWriters, this._writersIndex);
        };
        LeastConnectedLoadBalancingStrategy2.prototype._select = function(addresses, roundRobinIndex) {
          var length = addresses.length;
          if (length === 0) {
            return null;
          }
          var startIndex = roundRobinIndex.next(length);
          var index = startIndex;
          var leastConnectedAddress = null;
          var leastActiveConnections = Number.MAX_SAFE_INTEGER;
          do {
            var address = addresses[index];
            var activeConnections = this._connectionPool.activeResourceCount(address);
            if (activeConnections < leastActiveConnections) {
              leastConnectedAddress = address;
              leastActiveConnections = activeConnections;
            }
            if (index === length - 1) {
              index = 0;
            } else {
              index++;
            }
          } while (index !== startIndex);
          return leastConnectedAddress;
        };
        return LeastConnectedLoadBalancingStrategy2;
      }(load_balancing_strategy_1.default)
    );
    exports.default = LeastConnectedLoadBalancingStrategy;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/load-balancing/index.js
var require_load_balancing = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/load-balancing/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LeastConnectedLoadBalancingStrategy = exports.LoadBalancingStrategy = void 0;
    var load_balancing_strategy_1 = __importDefault(require_load_balancing_strategy());
    exports.LoadBalancingStrategy = load_balancing_strategy_1.default;
    var least_connected_load_balancing_strategy_1 = __importDefault(require_least_connected_load_balancing_strategy());
    exports.LeastConnectedLoadBalancingStrategy = least_connected_load_balancing_strategy_1.default;
    exports.default = least_connected_load_balancing_strategy_1.default;
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer2 = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf;
    }
    function Buffer(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer.alloc(+length);
    }
    Buffer.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer.prototype;
    };
    Buffer.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      let x = a.length;
      let y = b.length;
      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer = Buffer.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer.prototype.toLocaleString = Buffer.prototype.toString;
    Buffer.prototype.equals = function equals(b) {
      if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer.compare(this, b) === 0;
    };
    Buffer.prototype.inspect = function inspect() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }
    Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer.from(val, encoding);
      }
      if (Buffer.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i;
        }
      }
      return -1;
    }
    Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let i = byteLength2;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors = {};
    function E(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength2) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/buf/base-buf.js
var require_base_buf = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/buf/base-buf.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseBuffer = (
      /** @class */
      function() {
        function BaseBuffer2(size) {
          this.position = 0;
          this.length = size;
        }
        BaseBuffer2.prototype.getUInt8 = function(position) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.getInt8 = function(position) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.getFloat64 = function(position) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.getVarInt = function(position) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.putUInt8 = function(position, val) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.putInt8 = function(position, val) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.putFloat64 = function(position, val) {
          throw new Error("Not implemented");
        };
        BaseBuffer2.prototype.getInt16 = function(p) {
          return this.getInt8(p) << 8 | this.getUInt8(p + 1);
        };
        BaseBuffer2.prototype.getUInt16 = function(p) {
          return this.getUInt8(p) << 8 | this.getUInt8(p + 1);
        };
        BaseBuffer2.prototype.getInt32 = function(p) {
          return this.getInt8(p) << 24 | this.getUInt8(p + 1) << 16 | this.getUInt8(p + 2) << 8 | this.getUInt8(p + 3);
        };
        BaseBuffer2.prototype.getUInt32 = function(p) {
          return this.getUInt8(p) << 24 | this.getUInt8(p + 1) << 16 | this.getUInt8(p + 2) << 8 | this.getUInt8(p + 3);
        };
        BaseBuffer2.prototype.getInt64 = function(p) {
          return this.getInt8(p) << 56 | this.getUInt8(p + 1) << 48 | this.getUInt8(p + 2) << 40 | this.getUInt8(p + 3) << 32 | this.getUInt8(p + 4) << 24 | this.getUInt8(p + 5) << 16 | this.getUInt8(p + 6) << 8 | this.getUInt8(p + 7);
        };
        BaseBuffer2.prototype.getSlice = function(start, length) {
          return new SliceBuffer(start, length, this);
        };
        BaseBuffer2.prototype.putInt16 = function(p, val) {
          this.putInt8(p, val >> 8);
          this.putUInt8(p + 1, val & 255);
        };
        BaseBuffer2.prototype.putUInt16 = function(p, val) {
          this.putUInt8(p, val >> 8 & 255);
          this.putUInt8(p + 1, val & 255);
        };
        BaseBuffer2.prototype.putInt32 = function(p, val) {
          this.putInt8(p, val >> 24);
          this.putUInt8(p + 1, val >> 16 & 255);
          this.putUInt8(p + 2, val >> 8 & 255);
          this.putUInt8(p + 3, val & 255);
        };
        BaseBuffer2.prototype.putUInt32 = function(p, val) {
          this.putUInt8(p, val >> 24 & 255);
          this.putUInt8(p + 1, val >> 16 & 255);
          this.putUInt8(p + 2, val >> 8 & 255);
          this.putUInt8(p + 3, val & 255);
        };
        BaseBuffer2.prototype.putInt64 = function(p, val) {
          this.putInt8(p, val >> 48);
          this.putUInt8(p + 1, val >> 42 & 255);
          this.putUInt8(p + 2, val >> 36 & 255);
          this.putUInt8(p + 3, val >> 30 & 255);
          this.putUInt8(p + 4, val >> 24 & 255);
          this.putUInt8(p + 5, val >> 16 & 255);
          this.putUInt8(p + 6, val >> 8 & 255);
          this.putUInt8(p + 7, val & 255);
        };
        BaseBuffer2.prototype.putVarInt = function(p, val) {
          var length = 0;
          while (val > 1) {
            var int = val % 128;
            if (val >= 128) {
              int += 128;
            }
            val = val / 128;
            this.putUInt8(p + length, int);
            length += 1;
          }
          return length;
        };
        BaseBuffer2.prototype.putBytes = function(position, other) {
          for (var i = 0, end = other.remaining(); i < end; i++) {
            this.putUInt8(position + i, other.readUInt8());
          }
        };
        BaseBuffer2.prototype.readUInt8 = function() {
          return this.getUInt8(this._updatePos(1));
        };
        BaseBuffer2.prototype.readInt8 = function() {
          return this.getInt8(this._updatePos(1));
        };
        BaseBuffer2.prototype.readUInt16 = function() {
          return this.getUInt16(this._updatePos(2));
        };
        BaseBuffer2.prototype.readUInt32 = function() {
          return this.getUInt32(this._updatePos(4));
        };
        BaseBuffer2.prototype.readInt16 = function() {
          return this.getInt16(this._updatePos(2));
        };
        BaseBuffer2.prototype.readInt32 = function() {
          return this.getInt32(this._updatePos(4));
        };
        BaseBuffer2.prototype.readInt64 = function() {
          return this.getInt32(this._updatePos(8));
        };
        BaseBuffer2.prototype.readFloat64 = function() {
          return this.getFloat64(this._updatePos(8));
        };
        BaseBuffer2.prototype.readVarInt = function() {
          var int = this.getVarInt(this.position);
          this._updatePos(int.length);
          return int.value;
        };
        BaseBuffer2.prototype.writeUInt8 = function(val) {
          this.putUInt8(this._updatePos(1), val);
        };
        BaseBuffer2.prototype.writeInt8 = function(val) {
          this.putInt8(this._updatePos(1), val);
        };
        BaseBuffer2.prototype.writeInt16 = function(val) {
          this.putInt16(this._updatePos(2), val);
        };
        BaseBuffer2.prototype.writeInt32 = function(val) {
          this.putInt32(this._updatePos(4), val);
        };
        BaseBuffer2.prototype.writeUInt32 = function(val) {
          this.putUInt32(this._updatePos(4), val);
        };
        BaseBuffer2.prototype.writeInt64 = function(val) {
          this.putInt64(this._updatePos(8), val);
        };
        BaseBuffer2.prototype.writeFloat64 = function(val) {
          this.putFloat64(this._updatePos(8), val);
        };
        BaseBuffer2.prototype.writeVarInt = function(val) {
          var length = this.putVarInt(this.position, val);
          this._updatePos(length);
        };
        BaseBuffer2.prototype.writeBytes = function(val) {
          this.putBytes(this._updatePos(val.remaining()), val);
        };
        BaseBuffer2.prototype.readSlice = function(length) {
          return this.getSlice(this._updatePos(length), length);
        };
        BaseBuffer2.prototype._updatePos = function(length) {
          var p = this.position;
          this.position += length;
          return p;
        };
        BaseBuffer2.prototype.remaining = function() {
          return this.length - this.position;
        };
        BaseBuffer2.prototype.hasRemaining = function() {
          return this.remaining() > 0;
        };
        BaseBuffer2.prototype.reset = function() {
          this.position = 0;
        };
        BaseBuffer2.prototype.toString = function() {
          return this.constructor.name + "( position=" + this.position + " )\n  " + this.toHex();
        };
        BaseBuffer2.prototype.toHex = function() {
          var out = "";
          for (var i = 0; i < this.length; i++) {
            var hexByte = this.getUInt8(i).toString(16);
            if (hexByte.length === 1) {
              hexByte = "0" + hexByte;
            }
            out += hexByte;
            if (i !== this.length - 1) {
              out += " ";
            }
          }
          return out;
        };
        return BaseBuffer2;
      }()
    );
    exports.default = BaseBuffer;
    var SliceBuffer = (
      /** @class */
      function(_super) {
        __extends(SliceBuffer2, _super);
        function SliceBuffer2(start, length, inner) {
          var _this = _super.call(this, length) || this;
          _this._start = start;
          _this._inner = inner;
          return _this;
        }
        SliceBuffer2.prototype.putUInt8 = function(position, val) {
          this._inner.putUInt8(this._start + position, val);
        };
        SliceBuffer2.prototype.getUInt8 = function(position) {
          return this._inner.getUInt8(this._start + position);
        };
        SliceBuffer2.prototype.putInt8 = function(position, val) {
          this._inner.putInt8(this._start + position, val);
        };
        SliceBuffer2.prototype.putFloat64 = function(position, val) {
          this._inner.putFloat64(this._start + position, val);
        };
        SliceBuffer2.prototype.getInt8 = function(position) {
          return this._inner.getInt8(this._start + position);
        };
        SliceBuffer2.prototype.getFloat64 = function(position) {
          return this._inner.getFloat64(this._start + position);
        };
        return SliceBuffer2;
      }(BaseBuffer)
    );
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/buf/index.js
var require_buf = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/buf/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseBuffer = void 0;
    var base_buf_1 = __importDefault(require_base_buf());
    exports.BaseBuffer = base_buf_1.default;
    exports.default = base_buf_1.default;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/channel-buf.js
var require_channel_buf = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/channel-buf.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.alloc = void 0;
    var buffer_1 = __importDefault(require_buffer2());
    var buf_1 = __importDefault(require_buf());
    var ChannelBuffer = (
      /** @class */
      function(_super) {
        __extends(ChannelBuffer2, _super);
        function ChannelBuffer2(arg) {
          var _this = this;
          var buffer = newChannelJSBuffer(arg);
          _this = _super.call(this, buffer.length) || this;
          _this._buffer = buffer;
          return _this;
        }
        ChannelBuffer2.prototype.getUInt8 = function(position) {
          return this._buffer.readUInt8(position);
        };
        ChannelBuffer2.prototype.getInt8 = function(position) {
          return this._buffer.readInt8(position);
        };
        ChannelBuffer2.prototype.getFloat64 = function(position) {
          return this._buffer.readDoubleBE(position);
        };
        ChannelBuffer2.prototype.getVarInt = function(position) {
          var i = 0;
          var currentValue = this._buffer.readInt8(position + i);
          var total = currentValue % 128;
          while (currentValue / 128 >= 1) {
            i += 1;
            currentValue = this._buffer.readInt8(position + i);
            total += currentValue % 128;
          }
          return { length: i + 1, value: total };
        };
        ChannelBuffer2.prototype.putUInt8 = function(position, val) {
          this._buffer.writeUInt8(val, position);
        };
        ChannelBuffer2.prototype.putInt8 = function(position, val) {
          this._buffer.writeInt8(val, position);
        };
        ChannelBuffer2.prototype.putFloat64 = function(position, val) {
          this._buffer.writeDoubleBE(val, position);
        };
        ChannelBuffer2.prototype.putBytes = function(position, val) {
          if (val instanceof ChannelBuffer2) {
            var bytesToCopy = Math.min(val.length - val.position, this.length - position);
            val._buffer.copy(this._buffer, position, val.position, val.position + bytesToCopy);
            val.position += bytesToCopy;
          } else {
            _super.prototype.putBytes.call(this, position, val);
          }
        };
        ChannelBuffer2.prototype.getSlice = function(start, length) {
          return new ChannelBuffer2(this._buffer.slice(start, start + length));
        };
        return ChannelBuffer2;
      }(buf_1.default)
    );
    exports.default = ChannelBuffer;
    function alloc(size) {
      return new ChannelBuffer(size);
    }
    exports.alloc = alloc;
    function newChannelJSBuffer(arg) {
      if (arg instanceof buffer_1.default.Buffer) {
        return arg;
      } else if (typeof arg === "number" && typeof buffer_1.default.Buffer.alloc === "function") {
        return buffer_1.default.Buffer.alloc(arg);
      } else {
        return new buffer_1.default.Buffer(arg);
      }
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-channel.js
var require_browser_channel = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-channel.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var channel_buf_1 = __importDefault(require_channel_buf());
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.util;
    var ENCRYPTION_OFF = _a.ENCRYPTION_OFF;
    var ENCRYPTION_ON = _a.ENCRYPTION_ON;
    var WS_OPEN = 1;
    var WS_CLOSED = 3;
    var WebSocketChannel = (
      /** @class */
      function() {
        function WebSocketChannel2(config, protocolSupplier, socketFactory) {
          if (protocolSupplier === void 0) {
            protocolSupplier = detectWebPageProtocol;
          }
          if (socketFactory === void 0) {
            socketFactory = function(url) {
              return new WebSocket(url);
            };
          }
          var _this = this;
          this._open = true;
          this._pending = [];
          this._error = null;
          this._handleConnectionError = this._handleConnectionError.bind(this);
          this._config = config;
          this._receiveTimeout = null;
          this._receiveTimeoutStarted = false;
          this._receiveTimeoutId = null;
          this._closingPromise = null;
          var _a2 = determineWebSocketScheme(config, protocolSupplier), scheme = _a2.scheme, error = _a2.error;
          if (error) {
            this._error = error;
            return;
          }
          this._ws = createWebSocket(scheme, config.address, socketFactory);
          this._ws.binaryType = "arraybuffer";
          var self = this;
          this._ws.onclose = function(e) {
            if (e && !e.wasClean) {
              self._handleConnectionError();
            }
            self._open = false;
          };
          this._ws.onopen = function() {
            self._clearConnectionTimeout();
            var pending = self._pending;
            self._pending = null;
            for (var i = 0; i < pending.length; i++) {
              self.write(pending[i]);
            }
          };
          this._ws.onmessage = function(event) {
            _this._resetTimeout();
            if (self.onmessage) {
              var b = new channel_buf_1.default(event.data);
              self.onmessage(b);
            }
          };
          this._ws.onerror = this._handleConnectionError;
          this._connectionTimeoutFired = false;
          this._connectionTimeoutId = this._setupConnectionTimeout();
        }
        WebSocketChannel2.prototype._handleConnectionError = function() {
          if (this._connectionTimeoutFired) {
            this._error = (0, neo4j_driver_core_1.newError)("Failed to establish connection in ".concat(this._config.connectionTimeout, "ms"), this._config.connectionErrorCode);
            if (this.onerror) {
              this.onerror(this._error);
            }
            return;
          }
          if (this._open && !this._timedout) {
            this._error = (0, neo4j_driver_core_1.newError)("WebSocket connection failure. Due to security constraints in your web browser, the reason for the failure is not available to this Neo4j Driver. Please use your browsers development console to determine the root cause of the failure. Common reasons include the database being unavailable, using the wrong connection URL or temporary network problems. If you have enabled encryption, ensure your browser is configured to trust the certificate Neo4j is configured to use. WebSocket `readyState` is: " + this._ws.readyState, this._config.connectionErrorCode);
            if (this.onerror) {
              this.onerror(this._error);
            }
          }
        };
        WebSocketChannel2.prototype.write = function(buffer) {
          if (this._pending !== null) {
            this._pending.push(buffer);
          } else if (buffer instanceof channel_buf_1.default) {
            try {
              this._ws.send(buffer._buffer);
            } catch (error) {
              if (this._ws.readyState !== WS_OPEN) {
                this._handleConnectionError();
              } else {
                throw error;
              }
            }
          } else {
            throw (0, neo4j_driver_core_1.newError)("Don't know how to send buffer: " + buffer);
          }
        };
        WebSocketChannel2.prototype.close = function() {
          var _this = this;
          if (this._closingPromise === null) {
            this._closingPromise = new Promise(function(resolve, reject) {
              _this._clearConnectionTimeout();
              if (_this._ws && _this._ws.readyState !== WS_CLOSED) {
                _this._open = false;
                _this.stopReceiveTimeout();
                _this._ws.onclose = function() {
                  resolve();
                };
                _this._ws.close();
              } else {
                resolve();
              }
            });
          }
          return this._closingPromise;
        };
        WebSocketChannel2.prototype.setupReceiveTimeout = function(receiveTimeout) {
          this._receiveTimeout = receiveTimeout;
        };
        WebSocketChannel2.prototype.stopReceiveTimeout = function() {
          if (this._receiveTimeout !== null && this._receiveTimeoutStarted) {
            this._receiveTimeoutStarted = false;
            if (this._receiveTimeoutId != null) {
              clearTimeout(this._receiveTimeoutId);
            }
            this._receiveTimeoutId = null;
          }
        };
        WebSocketChannel2.prototype.startReceiveTimeout = function() {
          if (this._open && this._receiveTimeout !== null && !this._receiveTimeoutStarted) {
            this._receiveTimeoutStarted = true;
            this._resetTimeout();
          }
        };
        WebSocketChannel2.prototype._resetTimeout = function() {
          var _this = this;
          if (!this._receiveTimeoutStarted) {
            return;
          }
          if (this._receiveTimeoutId !== null) {
            clearTimeout(this._receiveTimeoutId);
          }
          this._receiveTimeoutId = setTimeout(function() {
            _this._receiveTimeoutId = null;
            _this._timedout = true;
            _this.stopReceiveTimeout();
            _this._error = (0, neo4j_driver_core_1.newError)("Connection lost. Server didn't respond in ".concat(_this._receiveTimeout, "ms"), _this._config.connectionErrorCode);
            _this.close();
            if (_this.onerror) {
              _this.onerror(_this._error);
            }
          }, this._receiveTimeout);
        };
        WebSocketChannel2.prototype._setupConnectionTimeout = function() {
          var _this = this;
          var timeout = this._config.connectionTimeout;
          if (timeout) {
            var webSocket_1 = this._ws;
            return setTimeout(function() {
              if (webSocket_1.readyState !== WS_OPEN) {
                _this._connectionTimeoutFired = true;
                webSocket_1.close();
              }
            }, timeout);
          }
          return null;
        };
        WebSocketChannel2.prototype._clearConnectionTimeout = function() {
          var timeoutId = this._connectionTimeoutId;
          if (timeoutId || timeoutId === 0) {
            this._connectionTimeoutFired = false;
            this._connectionTimeoutId = null;
            clearTimeout(timeoutId);
          }
        };
        return WebSocketChannel2;
      }()
    );
    exports.default = WebSocketChannel;
    function createWebSocket(scheme, address, socketFactory) {
      var url = scheme + "://" + address.asHostPort();
      try {
        return socketFactory(url);
      } catch (error) {
        if (isIPv6AddressIssueOnWindows(error, address)) {
          var windowsFriendlyUrl = asWindowsFriendlyIPv6Address(scheme, address);
          return socketFactory(windowsFriendlyUrl);
        } else {
          throw error;
        }
      }
    }
    function isIPv6AddressIssueOnWindows(error, address) {
      return error.name === "SyntaxError" && isIPv6Address(address.asHostPort());
    }
    function isIPv6Address(hostAndPort) {
      return hostAndPort.charAt(0) === "[" && hostAndPort.indexOf("]") !== -1;
    }
    function asWindowsFriendlyIPv6Address(scheme, address) {
      var hostWithoutColons = address.host().replace(/:/g, "-");
      var hostWithoutPercent = hostWithoutColons.replace("%", "s");
      var ipv6Host = hostWithoutPercent + ".ipv6-literal.net";
      return "".concat(scheme, "://").concat(ipv6Host, ":").concat(address.port());
    }
    function determineWebSocketScheme(config, protocolSupplier) {
      var encryptionOn = isEncryptionExplicitlyTurnedOn(config);
      var encryptionOff = isEncryptionExplicitlyTurnedOff(config);
      var trust = config.trust;
      var secureProtocol = isProtocolSecure(protocolSupplier);
      verifyEncryptionSettings(encryptionOn, encryptionOff, secureProtocol);
      if (encryptionOff) {
        return { scheme: "ws", error: null };
      }
      if (secureProtocol) {
        return { scheme: "wss", error: null };
      }
      if (encryptionOn) {
        if (!trust || trust === "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES") {
          return { scheme: "wss", error: null };
        } else {
          var error = (0, neo4j_driver_core_1.newError)("The browser version of this driver only supports one trust strategy, 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'. " + trust + ' is not supported. Please either use TRUST_SYSTEM_CA_SIGNED_CERTIFICATES or disable encryption by setting `encrypted:"' + ENCRYPTION_OFF + '"` in the driver configuration.');
          return { scheme: null, error };
        }
      }
      return { scheme: "ws", error: null };
    }
    function isEncryptionExplicitlyTurnedOn(config) {
      return config.encrypted === true || config.encrypted === ENCRYPTION_ON;
    }
    function isEncryptionExplicitlyTurnedOff(config) {
      return config.encrypted === false || config.encrypted === ENCRYPTION_OFF;
    }
    function isProtocolSecure(protocolSupplier) {
      var protocol = typeof protocolSupplier === "function" ? protocolSupplier() : "";
      return protocol && protocol.toLowerCase().indexOf("https") >= 0;
    }
    function verifyEncryptionSettings(encryptionOn, encryptionOff, secureProtocol) {
      if (secureProtocol === null) {
      } else if (encryptionOn && !secureProtocol) {
        console.warn("Neo4j driver is configured to use secure WebSocket on a HTTP web page. WebSockets might not work in a mixed content environment. Please consider configuring driver to not use encryption.");
      } else if (encryptionOff && secureProtocol) {
        console.warn("Neo4j driver is configured to use insecure WebSocket on a HTTPS web page. WebSockets might not work in a mixed content environment. Please consider configuring driver to use encryption.");
      }
    }
    function detectWebPageProtocol() {
      return typeof window !== "undefined" && window.location ? window.location.protocol : null;
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-host-name-resolver.js
var require_browser_host_name_resolver = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-host-name-resolver.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var BaseHostNameResolver = neo4j_driver_core_1.internal.resolver.BaseHostNameResolver;
    var BrowserHostNameResolver = (
      /** @class */
      function(_super) {
        __extends(BrowserHostNameResolver2, _super);
        function BrowserHostNameResolver2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        BrowserHostNameResolver2.prototype.resolve = function(address) {
          return this._resolveToItself(address);
        };
        return BrowserHostNameResolver2;
      }(BaseHostNameResolver)
    );
    exports.default = BrowserHostNameResolver;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-client-certificates-loader.js
var require_browser_client_certificates_loader = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-client-certificates-loader.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      load: function(clientCertificate) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, clientCertificate];
          });
        });
      }
    };
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/browser/index.js
var require_browser2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/browser/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientCertificatesLoader = exports.HostNameResolver = exports.Channel = void 0;
    var browser_channel_1 = __importDefault(require_browser_channel());
    var browser_host_name_resolver_1 = __importDefault(require_browser_host_name_resolver());
    var browser_client_certificates_loader_1 = __importDefault(require_browser_client_certificates_loader());
    exports.Channel = browser_channel_1.default;
    exports.HostNameResolver = browser_host_name_resolver_1.default;
    exports.ClientCertificatesLoader = browser_client_certificates_loader_1.default;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/combined-buf.js
var require_combined_buf = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/combined-buf.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var buf_1 = require_buf();
    var channel_buf_1 = require_channel_buf();
    var CombinedBuffer = (
      /** @class */
      function(_super) {
        __extends(CombinedBuffer2, _super);
        function CombinedBuffer2(buffers) {
          var _this = this;
          var length = 0;
          for (var i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
          }
          _this = _super.call(this, length) || this;
          _this._buffers = buffers;
          return _this;
        }
        CombinedBuffer2.prototype.getUInt8 = function(position) {
          for (var i = 0; i < this._buffers.length; i++) {
            var buffer = this._buffers[i];
            if (position >= buffer.length) {
              position -= buffer.length;
            } else {
              return buffer.getUInt8(position);
            }
          }
        };
        CombinedBuffer2.prototype.getInt8 = function(position) {
          for (var i = 0; i < this._buffers.length; i++) {
            var buffer = this._buffers[i];
            if (position >= buffer.length) {
              position -= buffer.length;
            } else {
              return buffer.getInt8(position);
            }
          }
        };
        CombinedBuffer2.prototype.getFloat64 = function(position) {
          var b = (0, channel_buf_1.alloc)(8);
          for (var i = 0; i < 8; i++) {
            b.putUInt8(i, this.getUInt8(position + i));
          }
          return b.getFloat64(0);
        };
        return CombinedBuffer2;
      }(buf_1.BaseBuffer)
    );
    exports.default = CombinedBuffer;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js
var require_chunking = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Dechunker = exports.Chunker = void 0;
    var base_buf_1 = __importDefault(require_base_buf());
    var channel_buf_1 = require_channel_buf();
    var combined_buf_1 = __importDefault(require_combined_buf());
    var _CHUNK_HEADER_SIZE = 2;
    var _MESSAGE_BOUNDARY = 0;
    var _DEFAULT_BUFFER_SIZE = 1400;
    var Chunker = (
      /** @class */
      function(_super) {
        __extends(Chunker2, _super);
        function Chunker2(channel, bufferSize) {
          var _this = _super.call(this, 0) || this;
          _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;
          _this._ch = channel;
          _this._buffer = (0, channel_buf_1.alloc)(_this._bufferSize);
          _this._currentChunkStart = 0;
          _this._chunkOpen = false;
          return _this;
        }
        Chunker2.prototype.putUInt8 = function(position, val) {
          this._ensure(1);
          this._buffer.writeUInt8(val);
        };
        Chunker2.prototype.putInt8 = function(position, val) {
          this._ensure(1);
          this._buffer.writeInt8(val);
        };
        Chunker2.prototype.putFloat64 = function(position, val) {
          this._ensure(8);
          this._buffer.writeFloat64(val);
        };
        Chunker2.prototype.putBytes = function(position, data) {
          while (data.remaining() > 0) {
            this._ensure(1);
            if (this._buffer.remaining() > data.remaining()) {
              this._buffer.writeBytes(data);
            } else {
              this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));
            }
          }
          return this;
        };
        Chunker2.prototype.flush = function() {
          if (this._buffer.position > 0) {
            this._closeChunkIfOpen();
            var out = this._buffer;
            this._buffer = null;
            this._ch.write(out.getSlice(0, out.position));
            this._buffer = (0, channel_buf_1.alloc)(this._bufferSize);
            this._chunkOpen = false;
          }
          return this;
        };
        Chunker2.prototype.messageBoundary = function() {
          this._closeChunkIfOpen();
          if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {
            this.flush();
          }
          this._buffer.writeInt16(_MESSAGE_BOUNDARY);
        };
        Chunker2.prototype._ensure = function(size) {
          var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;
          if (this._buffer.remaining() < toWriteSize) {
            this.flush();
          }
          if (!this._chunkOpen) {
            this._currentChunkStart = this._buffer.position;
            this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;
            this._chunkOpen = true;
          }
        };
        Chunker2.prototype._closeChunkIfOpen = function() {
          if (this._chunkOpen) {
            var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);
            this._buffer.putUInt16(this._currentChunkStart, chunkSize);
            this._chunkOpen = false;
          }
        };
        return Chunker2;
      }(base_buf_1.default)
    );
    exports.Chunker = Chunker;
    var Dechunker = (
      /** @class */
      function() {
        function Dechunker2() {
          this._currentMessage = [];
          this._partialChunkHeader = 0;
          this._state = this.AWAITING_CHUNK;
        }
        Dechunker2.prototype.AWAITING_CHUNK = function(buf) {
          if (buf.remaining() >= 2) {
            return this._onHeader(buf.readUInt16());
          } else {
            this._partialChunkHeader = buf.readUInt8() << 8;
            return this.IN_HEADER;
          }
        };
        Dechunker2.prototype.IN_HEADER = function(buf) {
          return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 65535);
        };
        Dechunker2.prototype.IN_CHUNK = function(buf) {
          if (this._chunkSize <= buf.remaining()) {
            this._currentMessage.push(buf.readSlice(this._chunkSize));
            return this.AWAITING_CHUNK;
          } else {
            this._chunkSize -= buf.remaining();
            this._currentMessage.push(buf.readSlice(buf.remaining()));
            return this.IN_CHUNK;
          }
        };
        Dechunker2.prototype.CLOSED = function(buf) {
        };
        Dechunker2.prototype._onHeader = function(header) {
          if (header === 0) {
            var message = void 0;
            switch (this._currentMessage.length) {
              case 0:
                return this.AWAITING_CHUNK;
              case 1:
                message = this._currentMessage[0];
                break;
              default:
                message = new combined_buf_1.default(this._currentMessage);
                break;
            }
            this._currentMessage = [];
            this.onmessage(message);
            return this.AWAITING_CHUNK;
          } else {
            this._chunkSize = header;
            return this.IN_CHUNK;
          }
        };
        Dechunker2.prototype.write = function(buf) {
          while (buf.hasRemaining()) {
            this._state = this._state(buf);
          }
        };
        return Dechunker2;
      }()
    );
    exports.Dechunker = Dechunker;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js
var require_channel_config = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.util;
    var ENCRYPTION_OFF = _a.ENCRYPTION_OFF;
    var ENCRYPTION_ON = _a.ENCRYPTION_ON;
    var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
    var ALLOWED_VALUES_ENCRYPTED = [
      null,
      void 0,
      true,
      false,
      ENCRYPTION_ON,
      ENCRYPTION_OFF
    ];
    var ALLOWED_VALUES_TRUST = [
      null,
      void 0,
      "TRUST_ALL_CERTIFICATES",
      "TRUST_CUSTOM_CA_SIGNED_CERTIFICATES",
      "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES"
    ];
    var ChannelConfig = (
      /** @class */
      /* @__PURE__ */ function() {
        function ChannelConfig2(address, driverConfig, connectionErrorCode, clientCertificate) {
          this.address = address;
          this.encrypted = extractEncrypted(driverConfig);
          this.trust = extractTrust(driverConfig);
          this.trustedCertificates = extractTrustedCertificates(driverConfig);
          this.knownHostsPath = extractKnownHostsPath(driverConfig);
          this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;
          this.connectionTimeout = driverConfig.connectionTimeout;
          this.clientCertificate = clientCertificate;
        }
        return ChannelConfig2;
      }()
    );
    exports.default = ChannelConfig;
    function extractEncrypted(driverConfig) {
      var value = driverConfig.encrypted;
      if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {
        throw (0, neo4j_driver_core_1.newError)("Illegal value of the encrypted setting ".concat(value, ". Expected one of ").concat(ALLOWED_VALUES_ENCRYPTED));
      }
      return value;
    }
    function extractTrust(driverConfig) {
      var value = driverConfig.trust;
      if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {
        throw (0, neo4j_driver_core_1.newError)("Illegal value of the trust setting ".concat(value, ". Expected one of ").concat(ALLOWED_VALUES_TRUST));
      }
      return value;
    }
    function extractTrustedCertificates(driverConfig) {
      return driverConfig.trustedCertificates || [];
    }
    function extractKnownHostsPath(driverConfig) {
      return driverConfig.knownHosts || null;
    }
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports, module) {
    var buffer = require_buffer2();
    var Buffer = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer.prototype);
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    var Buffer = require_safe_buffer().Buffer;
    var isEncoding = Buffer.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc) return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried) return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0) return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127) return 0;
      else if (byte >> 5 === 6) return 2;
      else if (byte >> 4 === 14) return 3;
      else if (byte >> 3 === 30) return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;
          else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return "�";
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self.lastNeed = 1;
          return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self.lastNeed = 2;
            return "�";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r + "�";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/utf8.js
var require_utf8 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/utf8.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var channel_buf_1 = __importDefault(require_channel_buf());
    var neo4j_driver_core_1 = require_lib();
    var buffer_1 = __importDefault(require_buffer2());
    var string_decoder_1 = require_string_decoder();
    var decoder = new string_decoder_1.StringDecoder("utf8");
    function encode(str) {
      return new channel_buf_1.default(newBuffer(str));
    }
    function decode(buffer, length) {
      if (Object.prototype.hasOwnProperty.call(buffer, "_buffer")) {
        return decodeChannelBuffer(buffer, length);
      } else if (Object.prototype.hasOwnProperty.call(buffer, "_buffers")) {
        return decodeCombinedBuffer(buffer, length);
      } else {
        throw (0, neo4j_driver_core_1.newError)("Don't know how to decode strings from '".concat(buffer, "'"));
      }
    }
    function decodeChannelBuffer(buffer, length) {
      var start = buffer.position;
      var end = start + length;
      buffer.position = Math.min(end, buffer.length);
      return buffer._buffer.toString("utf8", start, end);
    }
    function decodeCombinedBuffer(buffer, length) {
      return streamDecodeCombinedBuffer(buffer, length, function(partBuffer) {
        return decoder.write(partBuffer._buffer);
      }, function() {
        return decoder.end();
      });
    }
    function streamDecodeCombinedBuffer(combinedBuffers, length, decodeFn, endFn) {
      var remainingBytesToRead = length;
      var position = combinedBuffers.position;
      combinedBuffers._updatePos(Math.min(length, combinedBuffers.length - position));
      var out = combinedBuffers._buffers.reduce(function(last, partBuffer) {
        if (remainingBytesToRead <= 0) {
          return last;
        } else if (position >= partBuffer.length) {
          position -= partBuffer.length;
          return "";
        } else {
          partBuffer._updatePos(position - partBuffer.position);
          var bytesToRead = Math.min(partBuffer.length - position, remainingBytesToRead);
          var lastSlice = partBuffer.readSlice(bytesToRead);
          partBuffer._updatePos(bytesToRead);
          remainingBytesToRead = Math.max(remainingBytesToRead - lastSlice.length, 0);
          position = 0;
          return last + decodeFn(lastSlice);
        }
      }, "");
      return out + endFn();
    }
    function newBuffer(str) {
      if (typeof buffer_1.default.Buffer.from === "function") {
        return buffer_1.default.Buffer.from(str, "utf8");
      } else {
        return new buffer_1.default.Buffer(str, "utf8");
      }
    }
    exports.default = {
      encode,
      decode
    };
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/channel/index.js
var require_channel = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/channel/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.utf8 = exports.alloc = exports.ChannelConfig = void 0;
    __exportStar(require_browser2(), exports);
    __exportStar(require_chunking(), exports);
    var channel_config_1 = require_channel_config();
    Object.defineProperty(exports, "ChannelConfig", { enumerable: true, get: function() {
      return __importDefault(channel_config_1).default;
    } });
    var channel_buf_1 = require_channel_buf();
    Object.defineProperty(exports, "alloc", { enumerable: true, get: function() {
      return channel_buf_1.alloc;
    } });
    var utf8_1 = require_utf8();
    Object.defineProperty(exports, "utf8", { enumerable: true, get: function() {
      return __importDefault(utf8_1).default;
    } });
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/handshake.js
var require_handshake = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/handshake.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var channel_1 = require_channel();
    var neo4j_driver_core_1 = require_lib();
    var BOLT_MAGIC_PREAMBLE = 1616949271;
    var AVAILABLE_BOLT_PROTOCOLS = ["5.8", "5.7", "5.6", "5.4", "5.3", "5.2", "5.1", "5.0", "4.4", "4.3", "4.2", "3.0"];
    var DESIRED_CAPABILITES = 0;
    function version(major, minor) {
      return {
        major,
        minor
      };
    }
    function createHandshakeMessage(versions) {
      if (versions.length > 4) {
        throw (0, neo4j_driver_core_1.newError)("It should not have more than 4 versions of the protocol");
      }
      var handshakeBuffer = (0, channel_1.alloc)(5 * 4);
      handshakeBuffer.writeInt32(BOLT_MAGIC_PREAMBLE);
      versions.forEach(function(version2) {
        if (version2 instanceof Array) {
          var _a = version2[0], major = _a.major, minor = _a.minor;
          var minMinor = version2[1].minor;
          var range = minor - minMinor;
          handshakeBuffer.writeInt32(range << 16 | minor << 8 | major);
        } else {
          var major = version2.major, minor = version2.minor;
          handshakeBuffer.writeInt32(minor << 8 | major);
        }
      });
      handshakeBuffer.reset();
      return handshakeBuffer;
    }
    function parseNegotiatedResponse(buffer, log) {
      var h = [
        buffer.readUInt8(),
        buffer.readUInt8(),
        buffer.readUInt8(),
        buffer.readUInt8()
      ];
      if (h[0] === 72 && h[1] === 84 && h[2] === 84 && h[3] === 80) {
        log.error("Handshake failed since server responded with HTTP.");
        throw (0, neo4j_driver_core_1.newError)("Server responded HTTP. Make sure you are not trying to connect to the http endpoint (HTTP defaults to port 7474 whereas BOLT defaults to port 7687)");
      }
      return Number(h[3] + "." + h[2]);
    }
    function handshakeNegotiationV2(channel, buffer, log) {
      var numVersions = buffer.readVarInt();
      var versions = [];
      for (var i = 0; i < numVersions; i++) {
        var versionRange = [
          buffer.readUInt8(),
          buffer.readUInt8(),
          buffer.readUInt8(),
          buffer.readUInt8()
        ];
        versions = versions.concat(getVersions(versionRange));
      }
      var capabilityBitMask = buffer.readVarInt();
      var capabilites = selectCapabilites(capabilityBitMask);
      var major = 0;
      var minor = 0;
      versions.sort(function(a, b) {
        if (Number(a.major) !== Number(b.major)) {
          return Number(b.major) - Number(a.major);
        } else {
          return Number(b.minor) - Number(a.minor);
        }
      });
      for (var i = 0; i < versions.length; i++) {
        var version_1 = versions[i];
        if (AVAILABLE_BOLT_PROTOCOLS.includes(version_1.major + "." + version_1.minor)) {
          major = version_1.major;
          minor = version_1.minor;
          break;
        }
      }
      return new Promise(function(resolve, reject) {
        try {
          var selectionBuffer = (0, channel_1.alloc)(5);
          selectionBuffer.writeInt32(minor << 8 | major);
          selectionBuffer.writeVarInt(capabilites);
          channel.write(selectionBuffer);
          resolve({
            protocolVersion: Number(major + "." + minor),
            capabilites,
            consumeRemainingBuffer: function(consumer) {
              if (buffer.hasRemaining()) {
                consumer(buffer.readSlice(buffer.remaining()));
              }
            }
          });
        } catch (e) {
          reject(e);
        }
      });
    }
    function newHandshakeBuffer() {
      return createHandshakeMessage([
        version(255, 1),
        [version(5, 8), version(5, 0)],
        [version(4, 4), version(4, 2)],
        version(3, 0)
      ]);
    }
    function handshake(channel, log) {
      return initialHandshake(channel, log).then(function(result) {
        if (result.protocolVersion === 255.1) {
          return handshakeNegotiationV2(channel, result.buffer, log);
        } else {
          return result;
        }
      });
    }
    exports.default = handshake;
    function initialHandshake(channel, log) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        var handshakeErrorHandler = function(error) {
          reject(error);
        };
        channel.onerror = handshakeErrorHandler.bind(_this);
        if (channel._error) {
          handshakeErrorHandler(channel._error);
        }
        channel.onmessage = function(buffer) {
          try {
            var protocolVersion = parseNegotiatedResponse(buffer, log);
            resolve({
              protocolVersion,
              capabilites: 0,
              buffer,
              consumeRemainingBuffer: function(consumer) {
                if (buffer.hasRemaining()) {
                  consumer(buffer.readSlice(buffer.remaining()));
                }
              }
            });
          } catch (e) {
            reject(e);
          }
        };
        channel.write(newHandshakeBuffer());
      });
    }
    function getVersions(versionArray) {
      var resultArr = [];
      var major = versionArray[3];
      var minor = versionArray[2];
      for (var i = 0; i <= versionArray[1]; i++) {
        resultArr.push({ major, minor: minor - i });
      }
      return resultArr;
    }
    function selectCapabilites(capabilityBitMask) {
      return DESIRED_CAPABILITES;
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/routing-table-raw.js
var require_routing_table_raw = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/routing-table-raw.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = __importDefault(require_lib());
    var RawRoutingTable = (
      /** @class */
      function() {
        function RawRoutingTable2() {
        }
        RawRoutingTable2.ofRecord = function(record) {
          if (record === null) {
            return RawRoutingTable2.ofNull();
          }
          return new RecordRawRoutingTable(record);
        };
        RawRoutingTable2.ofMessageResponse = function(response) {
          if (response === null) {
            return RawRoutingTable2.ofNull();
          }
          return new ResponseRawRoutingTable(response);
        };
        RawRoutingTable2.ofNull = function() {
          return new NullRawRoutingTable();
        };
        Object.defineProperty(RawRoutingTable2.prototype, "ttl", {
          /**
           * Get raw ttl
           *
           * @returns {number|string} ttl Time to live
           */
          get: function() {
            throw new Error("Not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RawRoutingTable2.prototype, "db", {
          /**
           * Get raw db
           *
           * @returns {string?} The database name
           */
          get: function() {
            throw new Error("Not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RawRoutingTable2.prototype, "servers", {
          /**
           *
           * @typedef {Object} ServerRole
           * @property {string} role the role of the address on the cluster
           * @property {string[]} addresses the address within the role
           *
           * @return {ServerRole[]} list of servers addresses
           */
          get: function() {
            throw new Error("Not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RawRoutingTable2.prototype, "isNull", {
          /**
           * Indicates the result is null
           *
           * @returns {boolean} Is null
           */
          get: function() {
            throw new Error("Not implemented");
          },
          enumerable: false,
          configurable: true
        });
        return RawRoutingTable2;
      }()
    );
    exports.default = RawRoutingTable;
    var ResponseRawRoutingTable = (
      /** @class */
      function(_super) {
        __extends(ResponseRawRoutingTable2, _super);
        function ResponseRawRoutingTable2(response) {
          var _this = _super.call(this) || this;
          _this._response = response;
          return _this;
        }
        Object.defineProperty(ResponseRawRoutingTable2.prototype, "ttl", {
          get: function() {
            return this._response.rt.ttl;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ResponseRawRoutingTable2.prototype, "servers", {
          get: function() {
            return this._response.rt.servers;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ResponseRawRoutingTable2.prototype, "db", {
          get: function() {
            return this._response.rt.db;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ResponseRawRoutingTable2.prototype, "isNull", {
          get: function() {
            return this._response === null;
          },
          enumerable: false,
          configurable: true
        });
        return ResponseRawRoutingTable2;
      }(RawRoutingTable)
    );
    var NullRawRoutingTable = (
      /** @class */
      function(_super) {
        __extends(NullRawRoutingTable2, _super);
        function NullRawRoutingTable2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NullRawRoutingTable2.prototype, "isNull", {
          get: function() {
            return true;
          },
          enumerable: false,
          configurable: true
        });
        return NullRawRoutingTable2;
      }(RawRoutingTable)
    );
    var RecordRawRoutingTable = (
      /** @class */
      function(_super) {
        __extends(RecordRawRoutingTable2, _super);
        function RecordRawRoutingTable2(record) {
          var _this = _super.call(this) || this;
          _this._record = record;
          return _this;
        }
        Object.defineProperty(RecordRawRoutingTable2.prototype, "ttl", {
          get: function() {
            return this._record.get("ttl");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RecordRawRoutingTable2.prototype, "servers", {
          get: function() {
            return this._record.get("servers");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RecordRawRoutingTable2.prototype, "db", {
          get: function() {
            return this._record.has("db") ? this._record.get("db") : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(RecordRawRoutingTable2.prototype, "isNull", {
          get: function() {
            return this._record === null;
          },
          enumerable: false,
          configurable: true
        });
        return RecordRawRoutingTable2;
      }(RawRoutingTable)
    );
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/lang/functional.js
var require_functional = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/lang/functional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reuseOngoingRequest = exports.identity = void 0;
    var neo4j_driver_core_1 = require_lib();
    function identity(x) {
      return x;
    }
    exports.identity = identity;
    function reuseOngoingRequest(func, thisArg) {
      if (thisArg === void 0) {
        thisArg = null;
      }
      var ongoingRequests = /* @__PURE__ */ new Map();
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var key = neo4j_driver_core_1.json.stringify(args);
        if (ongoingRequests.has(key)) {
          return ongoingRequests.get(key);
        }
        var promise = func.apply(thisArg, args);
        ongoingRequests.set(key, promise);
        return promise.finally(function() {
          ongoingRequests.delete(key);
        });
      };
    }
    exports.reuseOngoingRequest = reuseOngoingRequest;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/lang/object.js
var require_object = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/lang/object.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.equals = void 0;
    function equals(a, b) {
      var e_1, _a;
      if (a === b) {
        return true;
      }
      if (a === null || b === null) {
        return false;
      }
      if (typeof a === "object" && typeof b === "object") {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        if (keysA.length !== keysB.length) {
          return false;
        }
        try {
          for (var keysA_1 = __values(keysA), keysA_1_1 = keysA_1.next(); !keysA_1_1.done; keysA_1_1 = keysA_1.next()) {
            var key = keysA_1_1.value;
            if (a[key] !== b[key]) {
              return false;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (keysA_1_1 && !keysA_1_1.done && (_a = keysA_1.return)) _a.call(keysA_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return true;
      }
      return false;
    }
    exports.equals = equals;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/lang/index.js
var require_lang = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/lang/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.object = exports.functional = void 0;
    exports.functional = __importStar(require_functional());
    exports.object = __importStar(require_object());
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/stream-observers.js
var require_stream_observers = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/stream-observers.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TelemetryObserver = exports.ProcedureRouteObserver = exports.RouteObserver = exports.CompletedObserver = exports.FailedObserver = exports.ResetObserver = exports.LogoffObserver = exports.LoginObserver = exports.ResultStreamObserver = exports.StreamObserver = void 0;
    var neo4j_driver_core_1 = require_lib();
    var routing_table_raw_1 = __importDefault(require_routing_table_raw());
    var lang_1 = require_lang();
    var FETCH_ALL = neo4j_driver_core_1.internal.constants.FETCH_ALL;
    var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
    var StreamObserver = (
      /** @class */
      function() {
        function StreamObserver2() {
        }
        StreamObserver2.prototype.onNext = function(rawRecord) {
        };
        StreamObserver2.prototype.onError = function(_error) {
        };
        StreamObserver2.prototype.onCompleted = function(meta) {
        };
        return StreamObserver2;
      }()
    );
    exports.StreamObserver = StreamObserver;
    var ResultStreamObserver = (
      /** @class */
      function(_super) {
        __extends(ResultStreamObserver2, _super);
        function ResultStreamObserver2(_a) {
          var _b = _a === void 0 ? {} : _a, _c = _b.reactive, reactive = _c === void 0 ? false : _c, moreFunction = _b.moreFunction, discardFunction = _b.discardFunction, _d = _b.fetchSize, fetchSize = _d === void 0 ? FETCH_ALL : _d, beforeError = _b.beforeError, afterError = _b.afterError, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, server = _b.server, _e = _b.highRecordWatermark, highRecordWatermark = _e === void 0 ? Number.MAX_VALUE : _e, _f = _b.lowRecordWatermark, lowRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, enrichMetadata = _b.enrichMetadata, onDb = _b.onDb;
          var _this = _super.call(this) || this;
          _this._fieldKeys = null;
          _this._fieldLookup = null;
          _this._head = null;
          _this._queuedRecords = [];
          _this._tail = null;
          _this._error = null;
          _this._observers = [];
          _this._meta = {};
          _this._server = server;
          _this._beforeError = beforeError;
          _this._afterError = afterError;
          _this._beforeKeys = beforeKeys;
          _this._afterKeys = afterKeys;
          _this._beforeComplete = beforeComplete;
          _this._afterComplete = afterComplete;
          _this._enrichMetadata = enrichMetadata || lang_1.functional.identity;
          _this._queryId = null;
          _this._moreFunction = moreFunction;
          _this._discardFunction = discardFunction;
          _this._discard = false;
          _this._fetchSize = fetchSize;
          _this._lowRecordWatermark = lowRecordWatermark;
          _this._highRecordWatermark = highRecordWatermark;
          _this._setState(reactive ? _states.READY : _states.READY_STREAMING);
          _this._setupAutoPull();
          _this._paused = false;
          _this._pulled = !reactive;
          _this._haveRecordStreamed = false;
          _this._onDb = onDb;
          return _this;
        }
        ResultStreamObserver2.prototype.pause = function() {
          this._paused = true;
        };
        ResultStreamObserver2.prototype.resume = function() {
          this._paused = false;
          this._setupAutoPull(true);
          this._state.pull(this);
        };
        ResultStreamObserver2.prototype.onNext = function(rawRecord) {
          this._haveRecordStreamed = true;
          var record = new neo4j_driver_core_1.Record(this._fieldKeys, rawRecord, this._fieldLookup);
          if (this._observers.some(function(o) {
            return o.onNext;
          })) {
            this._observers.forEach(function(o) {
              if (o.onNext) {
                o.onNext(record);
              }
            });
          } else {
            this._queuedRecords.push(record);
            if (this._queuedRecords.length > this._highRecordWatermark) {
              this._autoPull = false;
            }
          }
        };
        ResultStreamObserver2.prototype.onCompleted = function(meta) {
          this._state.onSuccess(this, meta);
        };
        ResultStreamObserver2.prototype.onError = function(error) {
          this._state.onError(this, error);
        };
        ResultStreamObserver2.prototype.cancel = function() {
          this._discard = true;
        };
        ResultStreamObserver2.prototype.prepareToHandleSingleResponse = function() {
          this._head = [];
          this._fieldKeys = [];
          this._setState(_states.STREAMING);
        };
        ResultStreamObserver2.prototype.markCompleted = function() {
          this._head = [];
          this._fieldKeys = [];
          this._tail = {};
          this._setState(_states.SUCCEEDED);
        };
        ResultStreamObserver2.prototype.subscribe = function(observer) {
          if (this._head && observer.onKeys) {
            observer.onKeys(this._head);
          }
          if (this._queuedRecords.length > 0 && observer.onNext) {
            for (var i = 0; i < this._queuedRecords.length; i++) {
              observer.onNext(this._queuedRecords[i]);
              if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {
                this._autoPull = true;
                if (this._state === _states.READY) {
                  this._handleStreaming();
                }
              }
            }
          }
          if (this._tail && observer.onCompleted) {
            observer.onCompleted(this._tail);
          }
          if (this._error) {
            observer.onError(this._error);
          }
          this._observers.push(observer);
          if (this._state === _states.READY) {
            this._handleStreaming();
          }
        };
        ResultStreamObserver2.prototype._handleHasMore = function(meta) {
          this._setState(_states.READY);
          this._handleStreaming();
          delete meta.has_more;
        };
        ResultStreamObserver2.prototype._handlePullSuccess = function(meta) {
          var _this = this;
          var completionMetadata = this._enrichMetadata(Object.assign(this._server ? { server: this._server } : {}, this._meta, {
            stream_summary: {
              have_records_streamed: this._haveRecordStreamed,
              pulled: this._pulled,
              has_keys: this._fieldKeys.length > 0
            }
          }, meta));
          if (![void 0, null, "r", "w", "rw", "s"].includes(completionMetadata.type)) {
            this.onError((0, neo4j_driver_core_1.newError)(`Server returned invalid query type. Expected one of [undefined, null, "r", "w", "rw", "s"] but got '`.concat(completionMetadata.type, "'"), PROTOCOL_ERROR));
            return;
          }
          this._setState(_states.SUCCEEDED);
          var beforeHandlerResult = null;
          if (this._beforeComplete) {
            beforeHandlerResult = this._beforeComplete(completionMetadata);
          }
          var continuation = function() {
            _this._tail = completionMetadata;
            if (_this._observers.some(function(o) {
              return o.onCompleted;
            })) {
              _this._observers.forEach(function(o) {
                if (o.onCompleted) {
                  o.onCompleted(completionMetadata);
                }
              });
            }
            if (_this._afterComplete) {
              _this._afterComplete(completionMetadata);
            }
          };
          if (beforeHandlerResult) {
            Promise.resolve(beforeHandlerResult).then(function() {
              return continuation();
            });
          } else {
            continuation();
          }
        };
        ResultStreamObserver2.prototype._handleRunSuccess = function(meta, afterSuccess) {
          var _this = this;
          if (this._fieldKeys === null) {
            this._fieldKeys = [];
            this._fieldLookup = {};
            if (meta.fields && meta.fields.length > 0) {
              this._fieldKeys = meta.fields;
              for (var i = 0; i < meta.fields.length; i++) {
                this._fieldLookup[meta.fields[i]] = i;
              }
            }
            if (meta.db !== null && this._onDb !== void 0) {
              this._onDb(meta.db);
            }
            if (meta.fields != null) {
              delete meta.fields;
            }
            if (meta.qid !== null && meta.qid !== void 0) {
              this._queryId = meta.qid;
              delete meta.qid;
            }
            this._storeMetadataForCompletion(meta);
            var beforeHandlerResult = null;
            if (this._beforeKeys) {
              beforeHandlerResult = this._beforeKeys(this._fieldKeys);
            }
            var continuation_1 = function() {
              _this._head = _this._fieldKeys;
              if (_this._observers.some(function(o) {
                return o.onKeys;
              })) {
                _this._observers.forEach(function(o) {
                  if (o.onKeys) {
                    o.onKeys(_this._fieldKeys);
                  }
                });
              }
              if (_this._afterKeys) {
                _this._afterKeys(_this._fieldKeys);
              }
              afterSuccess();
            };
            if (beforeHandlerResult) {
              Promise.resolve(beforeHandlerResult).then(function() {
                return continuation_1();
              });
            } else {
              continuation_1();
            }
          }
        };
        ResultStreamObserver2.prototype._handleError = function(error) {
          var _this = this;
          this._setState(_states.FAILED);
          this._error = error;
          var beforeHandlerResult = null;
          if (this._beforeError) {
            beforeHandlerResult = this._beforeError(error);
          }
          var continuation = function() {
            if (_this._observers.some(function(o) {
              return o.onError;
            })) {
              _this._observers.forEach(function(o) {
                if (o.onError) {
                  o.onError(error);
                }
              });
            }
            if (_this._afterError) {
              _this._afterError(error);
            }
          };
          if (beforeHandlerResult) {
            Promise.resolve(beforeHandlerResult).then(function() {
              return continuation();
            });
          } else {
            continuation();
          }
        };
        ResultStreamObserver2.prototype._handleStreaming = function() {
          if (this._head && this._observers.some(function(o) {
            return o.onNext || o.onCompleted;
          })) {
            if (!this._paused && (this._discard || this._autoPull)) {
              this._more();
            }
          }
        };
        ResultStreamObserver2.prototype._more = function() {
          if (this._discard) {
            this._discardFunction(this._queryId, this);
          } else {
            this._pulled = true;
            this._moreFunction(this._queryId, this._fetchSize, this);
          }
          this._setState(_states.STREAMING);
        };
        ResultStreamObserver2.prototype._storeMetadataForCompletion = function(meta) {
          var keys = Object.keys(meta);
          var index = keys.length;
          var key = "";
          while (index--) {
            key = keys[index];
            this._meta[key] = meta[key];
          }
        };
        ResultStreamObserver2.prototype._setState = function(state) {
          this._state = state;
        };
        ResultStreamObserver2.prototype._setupAutoPull = function() {
          this._autoPull = true;
        };
        return ResultStreamObserver2;
      }(StreamObserver)
    );
    exports.ResultStreamObserver = ResultStreamObserver;
    var LoginObserver = (
      /** @class */
      function(_super) {
        __extends(LoginObserver2, _super);
        function LoginObserver2(_a) {
          var _b = _a === void 0 ? {} : _a, onError = _b.onError, onCompleted = _b.onCompleted;
          var _this = _super.call(this) || this;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          return _this;
        }
        LoginObserver2.prototype.onNext = function(record) {
          this.onError((0, neo4j_driver_core_1.newError)("Received RECORD when initializing " + neo4j_driver_core_1.json.stringify(record)));
        };
        LoginObserver2.prototype.onError = function(error) {
          if (this._onError) {
            this._onError(error);
          }
        };
        LoginObserver2.prototype.onCompleted = function(metadata) {
          if (this._onCompleted) {
            this._onCompleted(metadata);
          }
        };
        return LoginObserver2;
      }(StreamObserver)
    );
    exports.LoginObserver = LoginObserver;
    var LogoffObserver = (
      /** @class */
      function(_super) {
        __extends(LogoffObserver2, _super);
        function LogoffObserver2(_a) {
          var _b = _a === void 0 ? {} : _a, onError = _b.onError, onCompleted = _b.onCompleted;
          var _this = _super.call(this) || this;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          return _this;
        }
        LogoffObserver2.prototype.onNext = function(record) {
          this.onError((0, neo4j_driver_core_1.newError)("Received RECORD when logging off " + neo4j_driver_core_1.json.stringify(record)));
        };
        LogoffObserver2.prototype.onError = function(error) {
          if (this._onError) {
            this._onError(error);
          }
        };
        LogoffObserver2.prototype.onCompleted = function(metadata) {
          if (this._onCompleted) {
            this._onCompleted(metadata);
          }
        };
        return LogoffObserver2;
      }(StreamObserver)
    );
    exports.LogoffObserver = LogoffObserver;
    var ResetObserver = (
      /** @class */
      function(_super) {
        __extends(ResetObserver2, _super);
        function ResetObserver2(_a) {
          var _b = _a === void 0 ? {} : _a, onProtocolError = _b.onProtocolError, onError = _b.onError, onComplete = _b.onComplete;
          var _this = _super.call(this) || this;
          _this._onProtocolError = onProtocolError;
          _this._onError = onError;
          _this._onComplete = onComplete;
          return _this;
        }
        ResetObserver2.prototype.onNext = function(record) {
          this.onError((0, neo4j_driver_core_1.newError)("Received RECORD when resetting: received record is: " + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));
        };
        ResetObserver2.prototype.onError = function(error) {
          if (error.code === PROTOCOL_ERROR && this._onProtocolError) {
            this._onProtocolError(error.message);
          }
          if (this._onError) {
            this._onError(error);
          }
        };
        ResetObserver2.prototype.onCompleted = function(metadata) {
          if (this._onComplete) {
            this._onComplete(metadata);
          }
        };
        return ResetObserver2;
      }(StreamObserver)
    );
    exports.ResetObserver = ResetObserver;
    var TelemetryObserver = (
      /** @class */
      function(_super) {
        __extends(TelemetryObserver2, _super);
        function TelemetryObserver2(_a) {
          var _b = _a === void 0 ? {} : _a, onError = _b.onError, onCompleted = _b.onCompleted;
          var _this = _super.call(this) || this;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          return _this;
        }
        TelemetryObserver2.prototype.onNext = function(record) {
          this.onError((0, neo4j_driver_core_1.newError)("Received RECORD when sending telemetry " + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));
        };
        TelemetryObserver2.prototype.onError = function(error) {
          if (this._onError) {
            this._onError(error);
          }
        };
        TelemetryObserver2.prototype.onCompleted = function(metadata) {
          if (this._onCompleted) {
            this._onCompleted(metadata);
          }
        };
        return TelemetryObserver2;
      }(ResultStreamObserver)
    );
    exports.TelemetryObserver = TelemetryObserver;
    var FailedObserver = (
      /** @class */
      function(_super) {
        __extends(FailedObserver2, _super);
        function FailedObserver2(_a) {
          var error = _a.error, onError = _a.onError;
          var _this = _super.call(this, { beforeError: onError }) || this;
          _this.onError(error);
          return _this;
        }
        return FailedObserver2;
      }(ResultStreamObserver)
    );
    exports.FailedObserver = FailedObserver;
    var CompletedObserver = (
      /** @class */
      function(_super) {
        __extends(CompletedObserver2, _super);
        function CompletedObserver2() {
          var _this = _super.call(this) || this;
          _super.prototype.markCompleted.call(_this);
          return _this;
        }
        return CompletedObserver2;
      }(ResultStreamObserver)
    );
    exports.CompletedObserver = CompletedObserver;
    var ProcedureRouteObserver = (
      /** @class */
      function(_super) {
        __extends(ProcedureRouteObserver2, _super);
        function ProcedureRouteObserver2(_a) {
          var resultObserver = _a.resultObserver, onProtocolError = _a.onProtocolError, onError = _a.onError, onCompleted = _a.onCompleted;
          var _this = _super.call(this) || this;
          _this._resultObserver = resultObserver;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          _this._records = [];
          _this._onProtocolError = onProtocolError;
          resultObserver.subscribe(_this);
          return _this;
        }
        ProcedureRouteObserver2.prototype.onNext = function(record) {
          this._records.push(record);
        };
        ProcedureRouteObserver2.prototype.onError = function(error) {
          if (error.code === PROTOCOL_ERROR && this._onProtocolError) {
            this._onProtocolError(error.message);
          }
          if (this._onError) {
            this._onError(error);
          }
        };
        ProcedureRouteObserver2.prototype.onCompleted = function() {
          if (this._records !== null && this._records.length !== 1) {
            this.onError((0, neo4j_driver_core_1.newError)("Illegal response from router. Received " + this._records.length + " records but expected only one.\n" + neo4j_driver_core_1.json.stringify(this._records), PROTOCOL_ERROR));
            return;
          }
          if (this._onCompleted) {
            this._onCompleted(routing_table_raw_1.default.ofRecord(this._records[0]));
          }
        };
        return ProcedureRouteObserver2;
      }(StreamObserver)
    );
    exports.ProcedureRouteObserver = ProcedureRouteObserver;
    var RouteObserver = (
      /** @class */
      function(_super) {
        __extends(RouteObserver2, _super);
        function RouteObserver2(_a) {
          var _b = _a === void 0 ? {} : _a, onProtocolError = _b.onProtocolError, onError = _b.onError, onCompleted = _b.onCompleted;
          var _this = _super.call(this) || this;
          _this._onProtocolError = onProtocolError;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          return _this;
        }
        RouteObserver2.prototype.onNext = function(record) {
          this.onError((0, neo4j_driver_core_1.newError)("Received RECORD when resetting: received record is: " + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));
        };
        RouteObserver2.prototype.onError = function(error) {
          if (error.code === PROTOCOL_ERROR && this._onProtocolError) {
            this._onProtocolError(error.message);
          }
          if (this._onError) {
            this._onError(error);
          }
        };
        RouteObserver2.prototype.onCompleted = function(metadata) {
          if (this._onCompleted) {
            this._onCompleted(routing_table_raw_1.default.ofMessageResponse(metadata));
          }
        };
        return RouteObserver2;
      }(StreamObserver)
    );
    exports.RouteObserver = RouteObserver;
    var _states = {
      READY_STREAMING: {
        // async start state
        onSuccess: function(streamObserver, meta) {
          streamObserver._handleRunSuccess(
            meta,
            function() {
              streamObserver._setState(_states.STREAMING);
            }
            // after run succeeded, async directly move to streaming
            // state
          );
        },
        onError: function(streamObserver, error) {
          streamObserver._handleError(error);
        },
        name: function() {
          return "READY_STREAMING";
        },
        pull: function() {
        }
      },
      READY: {
        // reactive start state
        onSuccess: function(streamObserver, meta) {
          streamObserver._handleRunSuccess(
            meta,
            function() {
              return streamObserver._handleStreaming();
            }
            // after run succeeded received, reactive shall start pulling
          );
        },
        onError: function(streamObserver, error) {
          streamObserver._handleError(error);
        },
        name: function() {
          return "READY";
        },
        pull: function(streamObserver) {
          return streamObserver._more();
        }
      },
      STREAMING: {
        onSuccess: function(streamObserver, meta) {
          if (meta.has_more) {
            streamObserver._handleHasMore(meta);
          } else {
            streamObserver._handlePullSuccess(meta);
          }
        },
        onError: function(streamObserver, error) {
          streamObserver._handleError(error);
        },
        name: function() {
          return "STREAMING";
        },
        pull: function() {
        }
      },
      FAILED: {
        onError: function(_error) {
        },
        name: function() {
          return "FAILED";
        },
        pull: function() {
        }
      },
      SUCCEEDED: {
        name: function() {
          return "SUCCEEDED";
        },
        pull: function() {
        }
      }
    };
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-util.js
var require_bolt_protocol_util = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertNotificationFilterIsEmpty = exports.assertImpersonatedUserIsEmpty = exports.assertTxConfigIsEmpty = exports.assertDatabaseIsEmpty = void 0;
    var neo4j_driver_core_1 = require_lib();
    var stream_observers_1 = require_stream_observers();
    function assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {
      if (onProtocolError === void 0) {
        onProtocolError = function() {
        };
      }
      if (txConfig && !txConfig.isEmpty()) {
        var error = (0, neo4j_driver_core_1.newError)("Driver is connected to the database that does not support transaction configuration. Please upgrade to neo4j 3.5.0 or later in order to use this functionality");
        onProtocolError(error.message);
        observer.onError(error);
        throw error;
      }
    }
    exports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;
    function assertDatabaseIsEmpty(database, onProtocolError, observer) {
      if (onProtocolError === void 0) {
        onProtocolError = function() {
        };
      }
      if (database) {
        var error = (0, neo4j_driver_core_1.newError)("Driver is connected to the database that does not support multiple databases. Please upgrade to neo4j 4.0.0 or later in order to use this functionality");
        onProtocolError(error.message);
        observer.onError(error);
        throw error;
      }
    }
    exports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;
    function assertImpersonatedUserIsEmpty(impersonatedUser, onProtocolError, observer) {
      if (onProtocolError === void 0) {
        onProtocolError = function() {
        };
      }
      if (impersonatedUser) {
        var error = (0, neo4j_driver_core_1.newError)("Driver is connected to the database that does not support user impersonation. Please upgrade to neo4j 4.4.0 or later in order to use this functionality. " + "Trying to impersonate ".concat(impersonatedUser, "."));
        onProtocolError(error.message);
        observer.onError(error);
        throw error;
      }
    }
    exports.assertImpersonatedUserIsEmpty = assertImpersonatedUserIsEmpty;
    function assertNotificationFilterIsEmpty(notificationFilter, onProtocolError, observer) {
      if (onProtocolError === void 0) {
        onProtocolError = function() {
        };
      }
      if (notificationFilter !== void 0) {
        var error = (0, neo4j_driver_core_1.newError)("Driver is connected to a database that does not support user notification filters. Please upgrade to Neo4j 5.7.0 or later in order to use this functionality. " + "Trying to set notifications to ".concat(neo4j_driver_core_1.json.stringify(notificationFilter), "."));
        onProtocolError(error.message);
        observer.onError(error);
        throw error;
      }
    }
    exports.assertNotificationFilterIsEmpty = assertNotificationFilterIsEmpty;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/packstream/structure.js
var require_structure = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/packstream/structure.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyStructSize = exports.Structure = void 0;
    var neo4j_driver_core_1 = require_lib();
    var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
    var Structure = (
      /** @class */
      function() {
        function Structure2(signature, fields) {
          this.signature = signature;
          this.fields = fields;
        }
        Object.defineProperty(Structure2.prototype, "size", {
          get: function() {
            return this.fields.length;
          },
          enumerable: false,
          configurable: true
        });
        Structure2.prototype.toString = function() {
          var fieldStr = "";
          for (var i = 0; i < this.fields.length; i++) {
            if (i > 0) {
              fieldStr += ", ";
            }
            fieldStr += this.fields[i];
          }
          return "Structure(" + this.signature + ", [" + fieldStr + "])";
        };
        return Structure2;
      }()
    );
    exports.Structure = Structure;
    function verifyStructSize(structName, expectedSize, actualSize) {
      if (expectedSize !== actualSize) {
        throw (0, neo4j_driver_core_1.newError)("Wrong struct size for ".concat(structName, ", expected ").concat(expectedSize, " but was ").concat(actualSize), PROTOCOL_ERROR);
      }
    }
    exports.verifyStructSize = verifyStructSize;
    exports.default = Structure;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v1.js
var require_packstream_v1 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Unpacker = exports.Packer = void 0;
    var channel_1 = require_channel();
    var lang_1 = require_lang();
    var structure_1 = require_structure();
    var neo4j_driver_core_1 = require_lib();
    var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
    var TINY_STRING = 128;
    var TINY_LIST = 144;
    var TINY_MAP = 160;
    var TINY_STRUCT = 176;
    var NULL = 192;
    var FLOAT_64 = 193;
    var FALSE = 194;
    var TRUE = 195;
    var INT_8 = 200;
    var INT_16 = 201;
    var INT_32 = 202;
    var INT_64 = 203;
    var STRING_8 = 208;
    var STRING_16 = 209;
    var STRING_32 = 210;
    var LIST_8 = 212;
    var LIST_16 = 213;
    var LIST_32 = 214;
    var BYTES_8 = 204;
    var BYTES_16 = 205;
    var BYTES_32 = 206;
    var MAP_8 = 216;
    var MAP_16 = 217;
    var MAP_32 = 218;
    var STRUCT_8 = 220;
    var STRUCT_16 = 221;
    var Packer = (
      /** @class */
      function() {
        function Packer2(channel) {
          this._ch = channel;
          this._byteArraysSupported = true;
        }
        Packer2.prototype.packable = function(x, dehydrateStruct) {
          var _this = this;
          if (dehydrateStruct === void 0) {
            dehydrateStruct = lang_1.functional.identity;
          }
          try {
            x = dehydrateStruct(x);
          } catch (ex) {
            return function() {
              throw ex;
            };
          }
          if (x === null) {
            return function() {
              return _this._ch.writeUInt8(NULL);
            };
          } else if (x === true) {
            return function() {
              return _this._ch.writeUInt8(TRUE);
            };
          } else if (x === false) {
            return function() {
              return _this._ch.writeUInt8(FALSE);
            };
          } else if (typeof x === "number") {
            return function() {
              return _this.packFloat(x);
            };
          } else if (typeof x === "string") {
            return function() {
              return _this.packString(x);
            };
          } else if (typeof x === "bigint") {
            return function() {
              return _this.packInteger((0, neo4j_driver_core_1.int)(x));
            };
          } else if ((0, neo4j_driver_core_1.isInt)(x)) {
            return function() {
              return _this.packInteger(x);
            };
          } else if (x instanceof Int8Array) {
            return function() {
              return _this.packBytes(x);
            };
          } else if (x instanceof Array) {
            return function() {
              _this.packListHeader(x.length);
              for (var i2 = 0; i2 < x.length; i2++) {
                _this.packable(x[i2] === void 0 ? null : x[i2], dehydrateStruct)();
              }
            };
          } else if (isIterable(x)) {
            return this.packableIterable(x, dehydrateStruct);
          } else if (x instanceof structure_1.Structure) {
            var packableFields_1 = [];
            for (var i = 0; i < x.fields.length; i++) {
              packableFields_1[i] = this.packable(x.fields[i], dehydrateStruct);
            }
            return function() {
              return _this.packStruct(x.signature, packableFields_1);
            };
          } else if (typeof x === "object") {
            return function() {
              var keys = Object.keys(x);
              var count = 0;
              for (var i2 = 0; i2 < keys.length; i2++) {
                if (x[keys[i2]] !== void 0) {
                  count++;
                }
              }
              _this.packMapHeader(count);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (x[key] !== void 0) {
                  _this.packString(key);
                  _this.packable(x[key], dehydrateStruct)();
                }
              }
            };
          } else {
            return this._nonPackableValue("Unable to pack the given value: ".concat(x));
          }
        };
        Packer2.prototype.packableIterable = function(iterable, dehydrateStruct) {
          try {
            var array = Array.from(iterable);
            return this.packable(array, dehydrateStruct);
          } catch (e) {
            throw (0, neo4j_driver_core_1.newError)("Cannot pack given iterable, ".concat(e.message, ": ").concat(iterable));
          }
        };
        Packer2.prototype.packStruct = function(signature, packableFields) {
          packableFields = packableFields || [];
          this.packStructHeader(packableFields.length, signature);
          for (var i = 0; i < packableFields.length; i++) {
            packableFields[i]();
          }
        };
        Packer2.prototype.packInteger = function(x) {
          var high = x.high;
          var low = x.low;
          if (x.greaterThanOrEqual(-16) && x.lessThan(128)) {
            this._ch.writeInt8(low);
          } else if (x.greaterThanOrEqual(-128) && x.lessThan(-16)) {
            this._ch.writeUInt8(INT_8);
            this._ch.writeInt8(low);
          } else if (x.greaterThanOrEqual(-32768) && x.lessThan(32768)) {
            this._ch.writeUInt8(INT_16);
            this._ch.writeInt16(low);
          } else if (x.greaterThanOrEqual(-2147483648) && x.lessThan(2147483648)) {
            this._ch.writeUInt8(INT_32);
            this._ch.writeInt32(low);
          } else {
            this._ch.writeUInt8(INT_64);
            this._ch.writeInt32(high);
            this._ch.writeInt32(low);
          }
        };
        Packer2.prototype.packFloat = function(x) {
          this._ch.writeUInt8(FLOAT_64);
          this._ch.writeFloat64(x);
        };
        Packer2.prototype.packString = function(x) {
          var bytes = channel_1.utf8.encode(x);
          var size = bytes.length;
          if (size < 16) {
            this._ch.writeUInt8(TINY_STRING | size);
            this._ch.writeBytes(bytes);
          } else if (size < 256) {
            this._ch.writeUInt8(STRING_8);
            this._ch.writeUInt8(size);
            this._ch.writeBytes(bytes);
          } else if (size < 65536) {
            this._ch.writeUInt8(STRING_16);
            this._ch.writeUInt8(size / 256 >> 0);
            this._ch.writeUInt8(size % 256);
            this._ch.writeBytes(bytes);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(STRING_32);
            this._ch.writeUInt8((size / 16777216 >> 0) % 256);
            this._ch.writeUInt8((size / 65536 >> 0) % 256);
            this._ch.writeUInt8((size / 256 >> 0) % 256);
            this._ch.writeUInt8(size % 256);
            this._ch.writeBytes(bytes);
          } else {
            throw (0, neo4j_driver_core_1.newError)("UTF-8 strings of size " + size + " are not supported");
          }
        };
        Packer2.prototype.packListHeader = function(size) {
          if (size < 16) {
            this._ch.writeUInt8(TINY_LIST | size);
          } else if (size < 256) {
            this._ch.writeUInt8(LIST_8);
            this._ch.writeUInt8(size);
          } else if (size < 65536) {
            this._ch.writeUInt8(LIST_16);
            this._ch.writeUInt8((size / 256 >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(LIST_32);
            this._ch.writeUInt8((size / 16777216 >> 0) % 256);
            this._ch.writeUInt8((size / 65536 >> 0) % 256);
            this._ch.writeUInt8((size / 256 >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)("Lists of size " + size + " are not supported");
          }
        };
        Packer2.prototype.packBytes = function(array) {
          if (this._byteArraysSupported) {
            this.packBytesHeader(array.length);
            for (var i = 0; i < array.length; i++) {
              this._ch.writeInt8(array[i]);
            }
          } else {
            throw (0, neo4j_driver_core_1.newError)("Byte arrays are not supported by the database this driver is connected to");
          }
        };
        Packer2.prototype.packBytesHeader = function(size) {
          if (size < 256) {
            this._ch.writeUInt8(BYTES_8);
            this._ch.writeUInt8(size);
          } else if (size < 65536) {
            this._ch.writeUInt8(BYTES_16);
            this._ch.writeUInt8((size / 256 >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(BYTES_32);
            this._ch.writeUInt8((size / 16777216 >> 0) % 256);
            this._ch.writeUInt8((size / 65536 >> 0) % 256);
            this._ch.writeUInt8((size / 256 >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)("Byte arrays of size " + size + " are not supported");
          }
        };
        Packer2.prototype.packMapHeader = function(size) {
          if (size < 16) {
            this._ch.writeUInt8(TINY_MAP | size);
          } else if (size < 256) {
            this._ch.writeUInt8(MAP_8);
            this._ch.writeUInt8(size);
          } else if (size < 65536) {
            this._ch.writeUInt8(MAP_16);
            this._ch.writeUInt8(size / 256 >> 0);
            this._ch.writeUInt8(size % 256);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(MAP_32);
            this._ch.writeUInt8((size / 16777216 >> 0) % 256);
            this._ch.writeUInt8((size / 65536 >> 0) % 256);
            this._ch.writeUInt8((size / 256 >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)("Maps of size " + size + " are not supported");
          }
        };
        Packer2.prototype.packStructHeader = function(size, signature) {
          if (size < 16) {
            this._ch.writeUInt8(TINY_STRUCT | size);
            this._ch.writeUInt8(signature);
          } else if (size < 256) {
            this._ch.writeUInt8(STRUCT_8);
            this._ch.writeUInt8(size);
            this._ch.writeUInt8(signature);
          } else if (size < 65536) {
            this._ch.writeUInt8(STRUCT_16);
            this._ch.writeUInt8(size / 256 >> 0);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)("Structures of size " + size + " are not supported");
          }
        };
        Packer2.prototype.disableByteArrays = function() {
          this._byteArraysSupported = false;
        };
        Packer2.prototype._nonPackableValue = function(message) {
          return function() {
            throw (0, neo4j_driver_core_1.newError)(message, PROTOCOL_ERROR);
          };
        };
        return Packer2;
      }()
    );
    exports.Packer = Packer;
    var Unpacker = (
      /** @class */
      function() {
        function Unpacker2(disableLosslessIntegers, useBigInt) {
          if (disableLosslessIntegers === void 0) {
            disableLosslessIntegers = false;
          }
          if (useBigInt === void 0) {
            useBigInt = false;
          }
          this._disableLosslessIntegers = disableLosslessIntegers;
          this._useBigInt = useBigInt;
        }
        Unpacker2.prototype.unpack = function(buffer, hydrateStructure) {
          if (hydrateStructure === void 0) {
            hydrateStructure = lang_1.functional.identity;
          }
          var marker = buffer.readUInt8();
          var markerHigh = marker & 240;
          var markerLow = marker & 15;
          if (marker === NULL) {
            return null;
          }
          var boolean = this._unpackBoolean(marker);
          if (boolean !== null) {
            return boolean;
          }
          var numberOrInteger = this._unpackNumberOrInteger(marker, buffer);
          if (numberOrInteger !== null) {
            if ((0, neo4j_driver_core_1.isInt)(numberOrInteger)) {
              if (this._useBigInt) {
                return numberOrInteger.toBigInt();
              } else if (this._disableLosslessIntegers) {
                return numberOrInteger.toNumberOrInfinity();
              }
            }
            return numberOrInteger;
          }
          var string = this._unpackString(marker, markerHigh, markerLow, buffer);
          if (string !== null) {
            return string;
          }
          var list = this._unpackList(marker, markerHigh, markerLow, buffer, hydrateStructure);
          if (list !== null) {
            return list;
          }
          var byteArray = this._unpackByteArray(marker, buffer);
          if (byteArray !== null) {
            return byteArray;
          }
          var map = this._unpackMap(marker, markerHigh, markerLow, buffer, hydrateStructure);
          if (map !== null) {
            return map;
          }
          var struct = this._unpackStruct(marker, markerHigh, markerLow, buffer, hydrateStructure);
          if (struct !== null) {
            return struct;
          }
          throw (0, neo4j_driver_core_1.newError)("Unknown packed value with marker " + marker.toString(16));
        };
        Unpacker2.prototype.unpackInteger = function(buffer) {
          var marker = buffer.readUInt8();
          var result = this._unpackInteger(marker, buffer);
          if (result == null) {
            throw (0, neo4j_driver_core_1.newError)("Unable to unpack integer value with marker " + marker.toString(16));
          }
          return result;
        };
        Unpacker2.prototype._unpackBoolean = function(marker) {
          if (marker === TRUE) {
            return true;
          } else if (marker === FALSE) {
            return false;
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackNumberOrInteger = function(marker, buffer) {
          if (marker === FLOAT_64) {
            return buffer.readFloat64();
          } else {
            return this._unpackInteger(marker, buffer);
          }
        };
        Unpacker2.prototype._unpackInteger = function(marker, buffer) {
          if (marker >= 0 && marker < 128) {
            return (0, neo4j_driver_core_1.int)(marker);
          } else if (marker >= 240 && marker < 256) {
            return (0, neo4j_driver_core_1.int)(marker - 256);
          } else if (marker === INT_8) {
            return (0, neo4j_driver_core_1.int)(buffer.readInt8());
          } else if (marker === INT_16) {
            return (0, neo4j_driver_core_1.int)(buffer.readInt16());
          } else if (marker === INT_32) {
            var b = buffer.readInt32();
            return (0, neo4j_driver_core_1.int)(b);
          } else if (marker === INT_64) {
            var high = buffer.readInt32();
            var low = buffer.readInt32();
            return new neo4j_driver_core_1.Integer(low, high);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackString = function(marker, markerHigh, markerLow, buffer) {
          if (markerHigh === TINY_STRING) {
            return channel_1.utf8.decode(buffer, markerLow);
          } else if (marker === STRING_8) {
            return channel_1.utf8.decode(buffer, buffer.readUInt8());
          } else if (marker === STRING_16) {
            return channel_1.utf8.decode(buffer, buffer.readUInt16());
          } else if (marker === STRING_32) {
            return channel_1.utf8.decode(buffer, buffer.readUInt32());
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackList = function(marker, markerHigh, markerLow, buffer, hydrateStructure) {
          if (markerHigh === TINY_LIST) {
            return this._unpackListWithSize(markerLow, buffer, hydrateStructure);
          } else if (marker === LIST_8) {
            return this._unpackListWithSize(buffer.readUInt8(), buffer, hydrateStructure);
          } else if (marker === LIST_16) {
            return this._unpackListWithSize(buffer.readUInt16(), buffer, hydrateStructure);
          } else if (marker === LIST_32) {
            return this._unpackListWithSize(buffer.readUInt32(), buffer, hydrateStructure);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackListWithSize = function(size, buffer, hydrateStructure) {
          var value = [];
          for (var i = 0; i < size; i++) {
            value.push(this.unpack(buffer, hydrateStructure));
          }
          return value;
        };
        Unpacker2.prototype._unpackByteArray = function(marker, buffer) {
          if (marker === BYTES_8) {
            return this._unpackByteArrayWithSize(buffer.readUInt8(), buffer);
          } else if (marker === BYTES_16) {
            return this._unpackByteArrayWithSize(buffer.readUInt16(), buffer);
          } else if (marker === BYTES_32) {
            return this._unpackByteArrayWithSize(buffer.readUInt32(), buffer);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackByteArrayWithSize = function(size, buffer) {
          var value = new Int8Array(size);
          for (var i = 0; i < size; i++) {
            value[i] = buffer.readInt8();
          }
          return value;
        };
        Unpacker2.prototype._unpackMap = function(marker, markerHigh, markerLow, buffer, hydrateStructure) {
          if (markerHigh === TINY_MAP) {
            return this._unpackMapWithSize(markerLow, buffer, hydrateStructure);
          } else if (marker === MAP_8) {
            return this._unpackMapWithSize(buffer.readUInt8(), buffer, hydrateStructure);
          } else if (marker === MAP_16) {
            return this._unpackMapWithSize(buffer.readUInt16(), buffer, hydrateStructure);
          } else if (marker === MAP_32) {
            return this._unpackMapWithSize(buffer.readUInt32(), buffer, hydrateStructure);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackMapWithSize = function(size, buffer, hydrateStructure) {
          var value = {};
          for (var i = 0; i < size; i++) {
            var key = this.unpack(buffer, hydrateStructure);
            value[key] = this.unpack(buffer, hydrateStructure);
          }
          return value;
        };
        Unpacker2.prototype._unpackStruct = function(marker, markerHigh, markerLow, buffer, hydrateStructure) {
          if (markerHigh === TINY_STRUCT) {
            return this._unpackStructWithSize(markerLow, buffer, hydrateStructure);
          } else if (marker === STRUCT_8) {
            return this._unpackStructWithSize(buffer.readUInt8(), buffer, hydrateStructure);
          } else if (marker === STRUCT_16) {
            return this._unpackStructWithSize(buffer.readUInt16(), buffer, hydrateStructure);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackStructWithSize = function(structSize, buffer, hydrateStructure) {
          var signature = buffer.readUInt8();
          var structure = new structure_1.Structure(signature, []);
          for (var i = 0; i < structSize; i++) {
            structure.fields.push(this.unpack(buffer, hydrateStructure));
          }
          return hydrateStructure(structure);
        };
        return Unpacker2;
      }()
    );
    exports.Unpacker = Unpacker;
    function isIterable(obj) {
      if (obj == null) {
        return false;
      }
      return typeof obj[Symbol.iterator] === "function";
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v2.js
var require_packstream_v2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v2.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Unpacker = exports.Packer = void 0;
    var v1 = __importStar(require_packstream_v1());
    var Packer = (
      /** @class */
      function(_super) {
        __extends(Packer2, _super);
        function Packer2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Packer2.prototype.disableByteArrays = function() {
          throw new Error("Bolt V2 should always support byte arrays");
        };
        return Packer2;
      }(v1.Packer)
    );
    exports.Packer = Packer;
    var Unpacker = (
      /** @class */
      function(_super) {
        __extends(Unpacker2, _super);
        function Unpacker2(disableLosslessIntegers, useBigInt) {
          if (disableLosslessIntegers === void 0) {
            disableLosslessIntegers = false;
          }
          if (useBigInt === void 0) {
            useBigInt = false;
          }
          return _super.call(this, disableLosslessIntegers, useBigInt) || this;
        }
        return Unpacker2;
      }(v1.Unpacker)
    );
    exports.Unpacker = Unpacker;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/packstream/index.js
var require_packstream = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/packstream/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.structure = exports.v2 = exports.v1 = void 0;
    var v1 = __importStar(require_packstream_v1());
    exports.v1 = v1;
    var v2 = __importStar(require_packstream_v2());
    exports.v2 = v2;
    var structure = __importStar(require_structure());
    exports.structure = structure;
    exports.default = v2;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js
var require_request_message = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SIGNATURES = void 0;
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.constants;
    var ACCESS_MODE_READ = _a.ACCESS_MODE_READ;
    var FETCH_ALL = _a.FETCH_ALL;
    var assertString = neo4j_driver_core_1.internal.util.assertString;
    var INIT = 1;
    var RESET = 15;
    var RUN = 16;
    var PULL_ALL = 63;
    var HELLO = 1;
    var GOODBYE = 2;
    var BEGIN = 17;
    var COMMIT = 18;
    var ROLLBACK = 19;
    var TELEMETRY = 84;
    var ROUTE = 102;
    var LOGON = 106;
    var LOGOFF = 107;
    var DISCARD = 47;
    var PULL = 63;
    var READ_MODE = "r";
    var NO_STATEMENT_ID = -1;
    var SIGNATURES = Object.freeze({
      INIT,
      RESET,
      RUN,
      PULL_ALL,
      HELLO,
      GOODBYE,
      BEGIN,
      COMMIT,
      ROLLBACK,
      TELEMETRY,
      ROUTE,
      LOGON,
      LOGOFF,
      DISCARD,
      PULL
    });
    exports.SIGNATURES = SIGNATURES;
    var RequestMessage = (
      /** @class */
      function() {
        function RequestMessage2(signature, fields, toString) {
          this.signature = signature;
          this.fields = fields;
          this.toString = toString;
        }
        RequestMessage2.init = function(clientName, authToken) {
          return new RequestMessage2(INIT, [clientName, authToken], function() {
            return "INIT ".concat(clientName, " {...}");
          });
        };
        RequestMessage2.run = function(query, parameters) {
          return new RequestMessage2(RUN, [query, parameters], function() {
            return "RUN ".concat(query, " ").concat(neo4j_driver_core_1.json.stringify(parameters));
          });
        };
        RequestMessage2.pullAll = function() {
          return PULL_ALL_MESSAGE;
        };
        RequestMessage2.reset = function() {
          return RESET_MESSAGE;
        };
        RequestMessage2.hello = function(userAgent, authToken, routing, patchs) {
          if (routing === void 0) {
            routing = null;
          }
          if (patchs === void 0) {
            patchs = null;
          }
          var metadata = Object.assign({ user_agent: userAgent }, authToken);
          if (routing) {
            metadata.routing = routing;
          }
          if (patchs) {
            metadata.patch_bolt = patchs;
          }
          return new RequestMessage2(HELLO, [metadata], function() {
            return "HELLO {user_agent: '".concat(userAgent, "', ...}");
          });
        };
        RequestMessage2.hello5x1 = function(userAgent, routing) {
          if (routing === void 0) {
            routing = null;
          }
          var metadata = { user_agent: userAgent };
          if (routing) {
            metadata.routing = routing;
          }
          return new RequestMessage2(HELLO, [metadata], function() {
            return "HELLO {user_agent: '".concat(userAgent, "', ...}");
          });
        };
        RequestMessage2.hello5x2 = function(userAgent, notificationFilter, routing) {
          if (notificationFilter === void 0) {
            notificationFilter = null;
          }
          if (routing === void 0) {
            routing = null;
          }
          var metadata = { user_agent: userAgent };
          appendLegacyNotificationFilterToMetadata(metadata, notificationFilter);
          if (routing) {
            metadata.routing = routing;
          }
          return new RequestMessage2(HELLO, [metadata], function() {
            return "HELLO ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.hello5x3 = function(userAgent, boltAgent, notificationFilter, routing) {
          if (notificationFilter === void 0) {
            notificationFilter = null;
          }
          if (routing === void 0) {
            routing = null;
          }
          var metadata = {};
          if (userAgent) {
            metadata.user_agent = userAgent;
          }
          if (boltAgent) {
            metadata.bolt_agent = {
              product: boltAgent.product,
              platform: boltAgent.platform,
              language: boltAgent.language,
              language_details: boltAgent.languageDetails
            };
          }
          appendLegacyNotificationFilterToMetadata(metadata, notificationFilter);
          if (routing) {
            metadata.routing = routing;
          }
          return new RequestMessage2(HELLO, [metadata], function() {
            return "HELLO ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.hello5x5 = function(userAgent, boltAgent, notificationFilter, routing) {
          if (notificationFilter === void 0) {
            notificationFilter = null;
          }
          if (routing === void 0) {
            routing = null;
          }
          var metadata = {};
          if (userAgent) {
            metadata.user_agent = userAgent;
          }
          if (boltAgent) {
            metadata.bolt_agent = {
              product: boltAgent.product,
              platform: boltAgent.platform,
              language: boltAgent.language,
              language_details: boltAgent.languageDetails
            };
          }
          appendGqlNotificationFilterToMetadata(metadata, notificationFilter);
          if (routing) {
            metadata.routing = routing;
          }
          return new RequestMessage2(HELLO, [metadata], function() {
            return "HELLO ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.logon = function(authToken) {
          return new RequestMessage2(LOGON, [authToken], function() {
            return "LOGON { ... }";
          });
        };
        RequestMessage2.logoff = function() {
          return new RequestMessage2(LOGOFF, [], function() {
            return "LOGOFF";
          });
        };
        RequestMessage2.begin = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;
          var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);
          return new RequestMessage2(BEGIN, [metadata], function() {
            return "BEGIN ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.begin5x5 = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;
          var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, {
            appendNotificationFilter: appendGqlNotificationFilterToMetadata
          });
          return new RequestMessage2(BEGIN, [metadata], function() {
            return "BEGIN ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.commit = function() {
          return COMMIT_MESSAGE;
        };
        RequestMessage2.rollback = function() {
          return ROLLBACK_MESSAGE;
        };
        RequestMessage2.runWithMetadata = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;
          var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);
          return new RequestMessage2(RUN, [query, parameters, metadata], function() {
            return "RUN ".concat(query, " ").concat(neo4j_driver_core_1.json.stringify(parameters), " ").concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.runWithMetadata5x5 = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;
          var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, {
            appendNotificationFilter: appendGqlNotificationFilterToMetadata
          });
          return new RequestMessage2(RUN, [query, parameters, metadata], function() {
            return "RUN ".concat(query, " ").concat(neo4j_driver_core_1.json.stringify(parameters), " ").concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.goodbye = function() {
          return GOODBYE_MESSAGE;
        };
        RequestMessage2.pull = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;
          var metadata = buildStreamMetadata(stmtId === null || stmtId === void 0 ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);
          return new RequestMessage2(PULL, [metadata], function() {
            return "PULL ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.discard = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;
          var metadata = buildStreamMetadata(stmtId === null || stmtId === void 0 ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);
          return new RequestMessage2(DISCARD, [metadata], function() {
            return "DISCARD ".concat(neo4j_driver_core_1.json.stringify(metadata));
          });
        };
        RequestMessage2.telemetry = function(_a2) {
          var api = _a2.api;
          var parsedApi = (0, neo4j_driver_core_1.int)(api);
          return new RequestMessage2(TELEMETRY, [parsedApi], function() {
            return "TELEMETRY ".concat(parsedApi.toString());
          });
        };
        RequestMessage2.route = function(routingContext, bookmarks, databaseName) {
          if (routingContext === void 0) {
            routingContext = {};
          }
          if (bookmarks === void 0) {
            bookmarks = [];
          }
          if (databaseName === void 0) {
            databaseName = null;
          }
          return new RequestMessage2(ROUTE, [routingContext, bookmarks, databaseName], function() {
            return "ROUTE ".concat(neo4j_driver_core_1.json.stringify(routingContext), " ").concat(neo4j_driver_core_1.json.stringify(bookmarks), " ").concat(databaseName);
          });
        };
        RequestMessage2.routeV4x4 = function(routingContext, bookmarks, databaseContext) {
          if (routingContext === void 0) {
            routingContext = {};
          }
          if (bookmarks === void 0) {
            bookmarks = [];
          }
          if (databaseContext === void 0) {
            databaseContext = {};
          }
          var dbContext = {};
          if (databaseContext.databaseName) {
            dbContext.db = databaseContext.databaseName;
          }
          if (databaseContext.impersonatedUser) {
            dbContext.imp_user = databaseContext.impersonatedUser;
          }
          return new RequestMessage2(ROUTE, [routingContext, bookmarks, dbContext], function() {
            return "ROUTE ".concat(neo4j_driver_core_1.json.stringify(routingContext), " ").concat(neo4j_driver_core_1.json.stringify(bookmarks), " ").concat(neo4j_driver_core_1.json.stringify(dbContext));
          });
        };
        return RequestMessage2;
      }()
    );
    exports.default = RequestMessage;
    function buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter, functions) {
      var _a2;
      if (functions === void 0) {
        functions = {};
      }
      var metadata = {};
      if (!bookmarks.isEmpty()) {
        metadata.bookmarks = bookmarks.values();
      }
      if (txConfig.timeout !== null) {
        metadata.tx_timeout = txConfig.timeout;
      }
      if (txConfig.metadata) {
        metadata.tx_metadata = txConfig.metadata;
      }
      if (database) {
        metadata.db = assertString(database, "database");
      }
      if (impersonatedUser) {
        metadata.imp_user = assertString(impersonatedUser, "impersonatedUser");
      }
      if (mode === ACCESS_MODE_READ) {
        metadata.mode = READ_MODE;
      }
      var appendNotificationFilter = (_a2 = functions.appendNotificationFilter) !== null && _a2 !== void 0 ? _a2 : appendLegacyNotificationFilterToMetadata;
      appendNotificationFilter(metadata, notificationFilter);
      return metadata;
    }
    function buildStreamMetadata(stmtId, n) {
      var metadata = { n: (0, neo4j_driver_core_1.int)(n) };
      if (stmtId !== NO_STATEMENT_ID) {
        metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);
      }
      return metadata;
    }
    function appendLegacyNotificationFilterToMetadata(metadata, notificationFilter) {
      if (notificationFilter) {
        if (notificationFilter.minimumSeverityLevel) {
          metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;
        }
        if (notificationFilter.disabledCategories) {
          metadata.notifications_disabled_categories = notificationFilter.disabledCategories;
        }
        if (notificationFilter.disabledClassifications) {
          metadata.notifications_disabled_categories = notificationFilter.disabledClassifications;
        }
      }
    }
    function appendGqlNotificationFilterToMetadata(metadata, notificationFilter) {
      if (notificationFilter) {
        if (notificationFilter.minimumSeverityLevel) {
          metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;
        }
        if (notificationFilter.disabledCategories) {
          metadata.notifications_disabled_classifications = notificationFilter.disabledCategories;
        }
        if (notificationFilter.disabledClassifications) {
          metadata.notifications_disabled_classifications = notificationFilter.disabledClassifications;
        }
      }
    }
    var PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function() {
      return "PULL_ALL";
    });
    var RESET_MESSAGE = new RequestMessage(RESET, [], function() {
      return "RESET";
    });
    var COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function() {
      return "COMMIT";
    });
    var ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function() {
      return "ROLLBACK";
    });
    var GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function() {
      return "GOODBYE";
    });
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/transformer.js
var require_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/transformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeTransformer = void 0;
    var packstream_1 = require_packstream();
    var neo4j_driver_core_1 = require_lib();
    var objectUtil = neo4j_driver_core_1.internal.objectUtil;
    var Transformer = (
      /** @class */
      function() {
        function Transformer2(transformers) {
          this._transformers = transformers;
          this._transformersPerSignature = new Map(transformers.map(function(typeTransformer) {
            return [typeTransformer.signature, typeTransformer];
          }));
          this.fromStructure = this.fromStructure.bind(this);
          this.toStructure = this.toStructure.bind(this);
          Object.freeze(this);
        }
        Transformer2.prototype.fromStructure = function(struct) {
          try {
            if (struct instanceof packstream_1.structure.Structure && this._transformersPerSignature.has(struct.signature)) {
              var fromStructure = this._transformersPerSignature.get(struct.signature).fromStructure;
              return fromStructure(struct);
            }
            return struct;
          } catch (error) {
            return objectUtil.createBrokenObject(error);
          }
        };
        Transformer2.prototype.toStructure = function(type) {
          var transformer = this._transformers.find(function(_a) {
            var isTypeInstance = _a.isTypeInstance;
            return isTypeInstance(type);
          });
          if (transformer !== void 0) {
            return transformer.toStructure(type);
          }
          return type;
        };
        return Transformer2;
      }()
    );
    exports.default = Transformer;
    var TypeTransformer = (
      /** @class */
      function() {
        function TypeTransformer2(_a) {
          var signature = _a.signature, fromStructure = _a.fromStructure, toStructure = _a.toStructure, isTypeInstance = _a.isTypeInstance;
          this.signature = signature;
          this.isTypeInstance = isTypeInstance;
          this.fromStructure = fromStructure;
          this.toStructure = toStructure;
          Object.freeze(this);
        }
        TypeTransformer2.prototype.extendsWith = function(_a) {
          var signature = _a.signature, fromStructure = _a.fromStructure, toStructure = _a.toStructure, isTypeInstance = _a.isTypeInstance;
          return new TypeTransformer2({
            signature: signature || this.signature,
            fromStructure: fromStructure || this.fromStructure,
            toStructure: toStructure || this.toStructure,
            isTypeInstance: isTypeInstance || this.isTypeInstance
          });
        };
        return TypeTransformer2;
      }()
    );
    exports.TypeTransformer = TypeTransformer;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.transformer.js
var require_bolt_protocol_v1_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.transformer.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var packstream_1 = require_packstream();
    var transformer_1 = require_transformer();
    var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
    var NODE = 78;
    var NODE_STRUCT_SIZE = 3;
    var RELATIONSHIP = 82;
    var RELATIONSHIP_STRUCT_SIZE = 5;
    var UNBOUND_RELATIONSHIP = 114;
    var UNBOUND_RELATIONSHIP_STRUCT_SIZE = 3;
    var PATH = 80;
    var PATH_STRUCT_SIZE = 3;
    function createNodeTransformer() {
      return new transformer_1.TypeTransformer({
        signature: NODE,
        isTypeInstance: function(object) {
          return object instanceof neo4j_driver_core_1.Node;
        },
        toStructure: function(object) {
          throw (0, neo4j_driver_core_1.newError)("It is not allowed to pass nodes in query parameters, given: ".concat(object), PROTOCOL_ERROR);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Node", NODE_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 3), identity = _a[0], labels = _a[1], properties = _a[2];
          return new neo4j_driver_core_1.Node(identity, labels, properties);
        }
      });
    }
    function createRelationshipTransformer() {
      return new transformer_1.TypeTransformer({
        signature: RELATIONSHIP,
        isTypeInstance: function(object) {
          return object instanceof neo4j_driver_core_1.Relationship;
        },
        toStructure: function(object) {
          throw (0, neo4j_driver_core_1.newError)("It is not allowed to pass relationships in query parameters, given: ".concat(object), PROTOCOL_ERROR);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Relationship", RELATIONSHIP_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 5), identity = _a[0], startNodeIdentity = _a[1], endNodeIdentity = _a[2], type = _a[3], properties = _a[4];
          return new neo4j_driver_core_1.Relationship(identity, startNodeIdentity, endNodeIdentity, type, properties);
        }
      });
    }
    function createUnboundRelationshipTransformer() {
      return new transformer_1.TypeTransformer({
        signature: UNBOUND_RELATIONSHIP,
        isTypeInstance: function(object) {
          return object instanceof neo4j_driver_core_1.UnboundRelationship;
        },
        toStructure: function(object) {
          throw (0, neo4j_driver_core_1.newError)("It is not allowed to pass unbound relationships in query parameters, given: ".concat(object), PROTOCOL_ERROR);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("UnboundRelationship", UNBOUND_RELATIONSHIP_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 3), identity = _a[0], type = _a[1], properties = _a[2];
          return new neo4j_driver_core_1.UnboundRelationship(identity, type, properties);
        }
      });
    }
    function createPathTransformer() {
      return new transformer_1.TypeTransformer({
        signature: PATH,
        isTypeInstance: function(object) {
          return object instanceof neo4j_driver_core_1.Path;
        },
        toStructure: function(object) {
          throw (0, neo4j_driver_core_1.newError)("It is not allowed to pass paths in query parameters, given: ".concat(object), PROTOCOL_ERROR);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Path", PATH_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 3), nodes = _a[0], rels = _a[1], sequence = _a[2];
          var segments = [];
          var prevNode = nodes[0];
          for (var i = 0; i < sequence.length; i += 2) {
            var nextNode = nodes[sequence[i + 1]];
            var relIndex = (0, neo4j_driver_core_1.toNumber)(sequence[i]);
            var rel = void 0;
            if (relIndex > 0) {
              rel = rels[relIndex - 1];
              if (rel instanceof neo4j_driver_core_1.UnboundRelationship) {
                rels[relIndex - 1] = rel = rel.bindTo(prevNode, nextNode);
              }
            } else {
              rel = rels[-relIndex - 1];
              if (rel instanceof neo4j_driver_core_1.UnboundRelationship) {
                rels[-relIndex - 1] = rel = rel.bindTo(nextNode, prevNode);
              }
            }
            segments.push(new neo4j_driver_core_1.PathSegment(prevNode, rel, nextNode));
            prevNode = nextNode;
          }
          return new neo4j_driver_core_1.Path(nodes[0], nodes[nodes.length - 1], segments);
        }
      });
    }
    exports.default = {
      createNodeTransformer,
      createRelationshipTransformer,
      createUnboundRelationshipTransformer,
      createPathTransformer
    };
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js
var require_bolt_protocol_v1 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var channel_1 = require_channel();
    var packstream_1 = require_packstream();
    var request_message_1 = __importStar(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_v1_transformer_1 = __importDefault(require_bolt_protocol_v1_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks;
    var _a = neo4j_driver_core_1.internal.constants;
    var ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE;
    var BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1;
    var Logger = neo4j_driver_core_1.internal.logger.Logger;
    var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
    var DEFAULT_DIAGNOSTIC_RECORD = Object.freeze({
      OPERATION: "",
      OPERATION_CODE: "0",
      CURRENT_SCHEMA: "/"
    });
    var BoltProtocol = (
      /** @class */
      function() {
        function BoltProtocol2(server, chunker, _a2, createResponseHandler, log, onProtocolError) {
          var _b = _a2 === void 0 ? {} : _a2, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt;
          if (createResponseHandler === void 0) {
            createResponseHandler = function() {
              return null;
            };
          }
          this._server = server || {};
          this._chunker = chunker;
          this._packer = this._createPacker(chunker);
          this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);
          this._responseHandler = createResponseHandler(this);
          this._log = log;
          this._onProtocolError = onProtocolError;
          this._fatalError = null;
          this._lastMessageSignature = null;
          this._config = { disableLosslessIntegers, useBigInt };
        }
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v1_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          /**
           * Returns the numerical version identifier for this protocol
           */
          get: function() {
            return BOLT_PROTOCOL_V1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "supportsReAuth", {
          /**
           * @property {boolean} supportsReAuth Either if the protocol version supports re-auth or not.
           */
          get: function() {
            return false;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "initialized", {
          /**
           * @property {boolean} initialized Either if the protocol was initialized or not
           */
          get: function() {
            return !!this._initialized;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "authToken", {
          /**
           * @property {object} authToken The token used in the last login
           */
          get: function() {
            return this._authToken;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.packer = function() {
          return this._packer;
        };
        BoltProtocol2.prototype.packable = function(x) {
          return this._packer.packable(x, this.transformer.toStructure);
        };
        BoltProtocol2.prototype.unpacker = function() {
          return this._unpacker;
        };
        BoltProtocol2.prototype.unpack = function(buf) {
          return this._unpacker.unpack(buf, this.transformer.fromStructure);
        };
        BoltProtocol2.prototype.transformMetadata = function(metadata) {
          return metadata;
        };
        BoltProtocol2.prototype.enrichErrorMetadata = function(metadata) {
          return __assign(__assign({}, metadata), { diagnostic_record: metadata.diagnostic_record !== null ? __assign(__assign({}, DEFAULT_DIAGNOSTIC_RECORD), metadata.diagnostic_record) : null });
        };
        BoltProtocol2.prototype.initialize = function(_a2) {
          var _this = this;
          var _b = _a2 === void 0 ? {} : _a2, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              return _this._onLoginCompleted(metadata, onComplete);
            }
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.init(userAgent, authToken), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.logoff = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, onComplete = _b.onComplete, onError = _b.onError, flush = _b.flush;
          var observer = new stream_observers_1.LogoffObserver({
            onCompleted: onComplete,
            onError
          });
          var error = (0, neo4j_driver_core_1.newError)("Driver is connected to a database that does not support logoff. Please upgrade to Neo4j 5.5.0 or later in order to use this functionality.");
          this._onProtocolError(error.message);
          observer.onError(error);
          throw error;
        };
        BoltProtocol2.prototype.logon = function(_a2) {
          var _this = this;
          var _b = _a2 === void 0 ? {} : _a2, authToken = _b.authToken, onComplete = _b.onComplete, onError = _b.onError, flush = _b.flush;
          var observer = new stream_observers_1.LoginObserver({
            onCompleted: function() {
              return _this._onLoginCompleted({}, authToken, onComplete);
            },
            onError: function(error2) {
              return _this._onLoginError(error2, onError);
            }
          });
          var error = (0, neo4j_driver_core_1.newError)("Driver is connected to a database that does not support logon. Please upgrade to Neo4j 5.5.0 or later in order to use this functionality.");
          this._onProtocolError(error.message);
          observer.onError(error);
          throw error;
        };
        BoltProtocol2.prototype.prepareToClose = function() {
        };
        BoltProtocol2.prototype.beginTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          return this.run("BEGIN", bookmarks ? bookmarks.asBeginTransactionParameters() : {}, {
            bookmarks,
            txConfig,
            database,
            mode,
            impersonatedUser,
            notificationFilter,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            flush: false
          });
        };
        BoltProtocol2.prototype.commitTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          return this.run("COMMIT", {}, {
            bookmarks: Bookmarks.empty(),
            txConfig: TxConfig.empty(),
            mode: ACCESS_MODE_WRITE,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
        };
        BoltProtocol2.prototype.rollbackTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          return this.run("ROLLBACK", {}, {
            bookmarks: Bookmarks.empty(),
            txConfig: TxConfig.empty(),
            mode: ACCESS_MODE_WRITE,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
        };
        BoltProtocol2.prototype.run = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.highRecordWatermark, highRecordWatermark = _d === void 0 ? Number.MAX_VALUE : _d, _e = _b.lowRecordWatermark, lowRecordWatermark = _e === void 0 ? Number.MAX_VALUE : _e;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark
          });
          (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.run(query, parameters), observer, false);
          this.write(request_message_1.default.pullAll(), observer, flush);
          return observer;
        };
        Object.defineProperty(BoltProtocol2.prototype, "currentFailure", {
          get: function() {
            return this._responseHandler.currentFailure;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.reset = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, onError = _b.onError, onComplete = _b.onComplete;
          var observer = new stream_observers_1.ResetObserver({
            onProtocolError: this._onProtocolError,
            onError,
            onComplete
          });
          this.write(request_message_1.default.reset(), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.telemetry = function(_a2, _b) {
          var api = _a2.api;
          var _c = _b === void 0 ? {} : _b, onError = _c.onError, onCompleted = _c.onCompleted;
          var observer = new stream_observers_1.CompletedObserver();
          if (onCompleted) {
            onCompleted();
          }
          return observer;
        };
        BoltProtocol2.prototype._createPacker = function(chunker) {
          return new packstream_1.v1.Packer(chunker);
        };
        BoltProtocol2.prototype._createUnpacker = function(disableLosslessIntegers, useBigInt) {
          return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);
        };
        BoltProtocol2.prototype.write = function(message, observer, flush) {
          var queued = this.queueObserverIfProtocolIsNotBroken(observer);
          if (queued) {
            if (this._log.isDebugEnabled()) {
              this._log.debug("C: ".concat(message));
            }
            this._lastMessageSignature = message.signature;
            var messageStruct = new packstream_1.structure.Structure(message.signature, message.fields);
            this.packable(messageStruct)();
            this._chunker.messageBoundary();
            if (flush) {
              this._chunker.flush();
            }
          }
        };
        BoltProtocol2.prototype.isLastMessageLogon = function() {
          return this._lastMessageSignature === request_message_1.SIGNATURES.HELLO || this._lastMessageSignature === request_message_1.SIGNATURES.LOGON;
        };
        BoltProtocol2.prototype.isLastMessageReset = function() {
          return this._lastMessageSignature === request_message_1.SIGNATURES.RESET;
        };
        BoltProtocol2.prototype.notifyFatalError = function(error) {
          this._fatalError = error;
          return this._responseHandler._notifyErrorToObservers(error);
        };
        BoltProtocol2.prototype.updateCurrentObserver = function() {
          return this._responseHandler._updateCurrentObserver();
        };
        BoltProtocol2.prototype.hasOngoingObservableRequests = function() {
          return this._responseHandler.hasOngoingObservableRequests();
        };
        BoltProtocol2.prototype.queueObserverIfProtocolIsNotBroken = function(observer) {
          if (this.isBroken()) {
            this.notifyFatalErrorToObserver(observer);
            return false;
          }
          return this._responseHandler._queueObserver(observer);
        };
        BoltProtocol2.prototype.isBroken = function() {
          return !!this._fatalError;
        };
        BoltProtocol2.prototype.notifyFatalErrorToObserver = function(observer) {
          if (observer && observer.onError) {
            observer.onError(this._fatalError);
          }
        };
        BoltProtocol2.prototype.resetFailure = function() {
          this._responseHandler._resetFailure();
        };
        BoltProtocol2.prototype._onLoginCompleted = function(metadata, authToken, onCompleted) {
          this._initialized = true;
          this._authToken = authToken;
          if (metadata) {
            var serverVersion = metadata.server;
            if (!this._server.version) {
              this._server.version = serverVersion;
            }
          }
          if (onCompleted) {
            onCompleted(metadata);
          }
        };
        BoltProtocol2.prototype._onLoginError = function(error, onError) {
          this._onProtocolError(error.message);
          if (onError) {
            onError(error);
          }
        };
        return BoltProtocol2;
      }()
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/temporal-factory.js
var require_temporal_factory = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/temporal-factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.epochSecondAndNanoToLocalDateTime = exports.nanoOfDayToLocalTime = exports.epochDayToDate = void 0;
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.temporalUtil;
    var DAYS_0000_TO_1970 = _a.DAYS_0000_TO_1970;
    var DAYS_PER_400_YEAR_CYCLE = _a.DAYS_PER_400_YEAR_CYCLE;
    var NANOS_PER_HOUR = _a.NANOS_PER_HOUR;
    var NANOS_PER_MINUTE = _a.NANOS_PER_MINUTE;
    var NANOS_PER_SECOND = _a.NANOS_PER_SECOND;
    var SECONDS_PER_DAY = _a.SECONDS_PER_DAY;
    var floorDiv = _a.floorDiv;
    var floorMod = _a.floorMod;
    function epochDayToDate(epochDay) {
      epochDay = (0, neo4j_driver_core_1.int)(epochDay);
      var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);
      var adjust = (0, neo4j_driver_core_1.int)(0);
      if (zeroDay.lessThan(0)) {
        var adjustCycles = zeroDay.add(1).div(DAYS_PER_400_YEAR_CYCLE).subtract(1);
        adjust = adjustCycles.multiply(400);
        zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));
      }
      var year = zeroDay.multiply(400).add(591).div(DAYS_PER_400_YEAR_CYCLE);
      var dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));
      if (dayOfYearEst.lessThan(0)) {
        year = year.subtract(1);
        dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));
      }
      year = year.add(adjust);
      var marchDayOfYear = dayOfYearEst;
      var marchMonth = marchDayOfYear.multiply(5).add(2).div(153);
      var month = marchMonth.add(2).modulo(12).add(1);
      var day = marchDayOfYear.subtract(marchMonth.multiply(306).add(5).div(10)).add(1);
      year = year.add(marchMonth.div(10));
      return new neo4j_driver_core_1.Date(year, month, day);
    }
    exports.epochDayToDate = epochDayToDate;
    function nanoOfDayToLocalTime(nanoOfDay) {
      nanoOfDay = (0, neo4j_driver_core_1.int)(nanoOfDay);
      var hour = nanoOfDay.div(NANOS_PER_HOUR);
      nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));
      var minute = nanoOfDay.div(NANOS_PER_MINUTE);
      nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));
      var second = nanoOfDay.div(NANOS_PER_SECOND);
      var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));
      return new neo4j_driver_core_1.LocalTime(hour, minute, second, nanosecond);
    }
    exports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;
    function epochSecondAndNanoToLocalDateTime(epochSecond, nano) {
      var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);
      var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);
      var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);
      var localDate = epochDayToDate(epochDay);
      var localTime = nanoOfDayToLocalTime(nanoOfDay);
      return new neo4j_driver_core_1.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);
    }
    exports.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v2.transformer.js
var require_bolt_protocol_v2_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v2.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var packstream_1 = require_packstream();
    var transformer_1 = require_transformer();
    var temporal_factory_1 = require_temporal_factory();
    var bolt_protocol_v1_transformer_1 = __importDefault(require_bolt_protocol_v1_transformer());
    var _a = neo4j_driver_core_1.internal.temporalUtil;
    var dateToEpochDay = _a.dateToEpochDay;
    var localDateTimeToEpochSecond = _a.localDateTimeToEpochSecond;
    var localTimeToNanoOfDay = _a.localTimeToNanoOfDay;
    var POINT_2D = 88;
    var POINT_2D_STRUCT_SIZE = 3;
    var POINT_3D = 89;
    var POINT_3D_STRUCT_SIZE = 4;
    var DURATION = 69;
    var DURATION_STRUCT_SIZE = 4;
    var LOCAL_TIME = 116;
    var LOCAL_TIME_STRUCT_SIZE = 1;
    var TIME = 84;
    var TIME_STRUCT_SIZE = 2;
    var DATE = 68;
    var DATE_STRUCT_SIZE = 1;
    var LOCAL_DATE_TIME = 100;
    var LOCAL_DATE_TIME_STRUCT_SIZE = 2;
    var DATE_TIME_WITH_ZONE_OFFSET = 70;
    var DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE = 3;
    var DATE_TIME_WITH_ZONE_ID = 102;
    var DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE = 3;
    function createPoint2DTransformer() {
      return new transformer_1.TypeTransformer({
        signature: POINT_2D,
        isTypeInstance: function(point) {
          return (0, neo4j_driver_core_1.isPoint)(point) && (point.z === null || point.z === void 0);
        },
        toStructure: function(point) {
          return new packstream_1.structure.Structure(POINT_2D, [
            (0, neo4j_driver_core_1.int)(point.srid),
            point.x,
            point.y
          ]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Point2D", POINT_2D_STRUCT_SIZE, struct.size);
          var _a2 = __read(struct.fields, 3), srid = _a2[0], x = _a2[1], y = _a2[2];
          return new neo4j_driver_core_1.Point(
            srid,
            x,
            y,
            void 0
            // z
          );
        }
      });
    }
    function createPoint3DTransformer() {
      return new transformer_1.TypeTransformer({
        signature: POINT_3D,
        isTypeInstance: function(point) {
          return (0, neo4j_driver_core_1.isPoint)(point) && point.z !== null && point.z !== void 0;
        },
        toStructure: function(point) {
          return new packstream_1.structure.Structure(POINT_3D, [
            (0, neo4j_driver_core_1.int)(point.srid),
            point.x,
            point.y,
            point.z
          ]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Point3D", POINT_3D_STRUCT_SIZE, struct.size);
          var _a2 = __read(struct.fields, 4), srid = _a2[0], x = _a2[1], y = _a2[2], z = _a2[3];
          return new neo4j_driver_core_1.Point(srid, x, y, z);
        }
      });
    }
    function createDurationTransformer() {
      return new transformer_1.TypeTransformer({
        signature: DURATION,
        isTypeInstance: neo4j_driver_core_1.isDuration,
        toStructure: function(value) {
          var months = (0, neo4j_driver_core_1.int)(value.months);
          var days = (0, neo4j_driver_core_1.int)(value.days);
          var seconds = (0, neo4j_driver_core_1.int)(value.seconds);
          var nanoseconds = (0, neo4j_driver_core_1.int)(value.nanoseconds);
          return new packstream_1.structure.Structure(DURATION, [months, days, seconds, nanoseconds]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Duration", DURATION_STRUCT_SIZE, struct.size);
          var _a2 = __read(struct.fields, 4), months = _a2[0], days = _a2[1], seconds = _a2[2], nanoseconds = _a2[3];
          return new neo4j_driver_core_1.Duration(months, days, seconds, nanoseconds);
        }
      });
    }
    function createLocalTimeTransformer(_a2) {
      var disableLosslessIntegers = _a2.disableLosslessIntegers, useBigInt = _a2.useBigInt;
      return new transformer_1.TypeTransformer({
        signature: LOCAL_TIME,
        isTypeInstance: neo4j_driver_core_1.isLocalTime,
        toStructure: function(value) {
          var nanoOfDay = localTimeToNanoOfDay(value.hour, value.minute, value.second, value.nanosecond);
          return new packstream_1.structure.Structure(LOCAL_TIME, [nanoOfDay]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("LocalTime", LOCAL_TIME_STRUCT_SIZE, struct.size);
          var _a3 = __read(struct.fields, 1), nanoOfDay = _a3[0];
          var result = (0, temporal_factory_1.nanoOfDayToLocalTime)(nanoOfDay);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function createTimeTransformer(_a2) {
      var disableLosslessIntegers = _a2.disableLosslessIntegers, useBigInt = _a2.useBigInt;
      return new transformer_1.TypeTransformer({
        signature: TIME,
        isTypeInstance: neo4j_driver_core_1.isTime,
        toStructure: function(value) {
          var nanoOfDay = localTimeToNanoOfDay(value.hour, value.minute, value.second, value.nanosecond);
          var offsetSeconds = (0, neo4j_driver_core_1.int)(value.timeZoneOffsetSeconds);
          return new packstream_1.structure.Structure(TIME, [nanoOfDay, offsetSeconds]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Time", TIME_STRUCT_SIZE, struct.size);
          var _a3 = __read(struct.fields, 2), nanoOfDay = _a3[0], offsetSeconds = _a3[1];
          var localTime = (0, temporal_factory_1.nanoOfDayToLocalTime)(nanoOfDay);
          var result = new neo4j_driver_core_1.Time(localTime.hour, localTime.minute, localTime.second, localTime.nanosecond, offsetSeconds);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function createDateTransformer(_a2) {
      var disableLosslessIntegers = _a2.disableLosslessIntegers, useBigInt = _a2.useBigInt;
      return new transformer_1.TypeTransformer({
        signature: DATE,
        isTypeInstance: neo4j_driver_core_1.isDate,
        toStructure: function(value) {
          var epochDay = dateToEpochDay(value.year, value.month, value.day);
          return new packstream_1.structure.Structure(DATE, [epochDay]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Date", DATE_STRUCT_SIZE, struct.size);
          var _a3 = __read(struct.fields, 1), epochDay = _a3[0];
          var result = (0, temporal_factory_1.epochDayToDate)(epochDay);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function createLocalDateTimeTransformer(_a2) {
      var disableLosslessIntegers = _a2.disableLosslessIntegers, useBigInt = _a2.useBigInt;
      return new transformer_1.TypeTransformer({
        signature: LOCAL_DATE_TIME,
        isTypeInstance: neo4j_driver_core_1.isLocalDateTime,
        toStructure: function(value) {
          var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
          var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
          return new packstream_1.structure.Structure(LOCAL_DATE_TIME, [epochSecond, nano]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("LocalDateTime", LOCAL_DATE_TIME_STRUCT_SIZE, struct.size);
          var _a3 = __read(struct.fields, 2), epochSecond = _a3[0], nano = _a3[1];
          var result = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function createDateTimeWithZoneIdTransformer(_a2) {
      var disableLosslessIntegers = _a2.disableLosslessIntegers, useBigInt = _a2.useBigInt;
      return new transformer_1.TypeTransformer({
        signature: DATE_TIME_WITH_ZONE_ID,
        isTypeInstance: function(object) {
          return (0, neo4j_driver_core_1.isDateTime)(object) && object.timeZoneId != null;
        },
        toStructure: function(value) {
          var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
          var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
          var timeZoneId = value.timeZoneId;
          return new packstream_1.structure.Structure(DATE_TIME_WITH_ZONE_ID, [epochSecond, nano, timeZoneId]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("DateTimeWithZoneId", DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE, struct.size);
          var _a3 = __read(struct.fields, 3), epochSecond = _a3[0], nano = _a3[1], timeZoneId = _a3[2];
          var localDateTime = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
          var result = new neo4j_driver_core_1.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond, null, timeZoneId);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function createDateTimeWithOffsetTransformer(_a2) {
      var disableLosslessIntegers = _a2.disableLosslessIntegers, useBigInt = _a2.useBigInt;
      return new transformer_1.TypeTransformer({
        signature: DATE_TIME_WITH_ZONE_OFFSET,
        isTypeInstance: function(object) {
          return (0, neo4j_driver_core_1.isDateTime)(object) && object.timeZoneId == null;
        },
        toStructure: function(value) {
          var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
          var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
          var timeZoneOffsetSeconds = (0, neo4j_driver_core_1.int)(value.timeZoneOffsetSeconds);
          return new packstream_1.structure.Structure(DATE_TIME_WITH_ZONE_OFFSET, [epochSecond, nano, timeZoneOffsetSeconds]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("DateTimeWithZoneOffset", DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE, struct.size);
          var _a3 = __read(struct.fields, 3), epochSecond = _a3[0], nano = _a3[1], timeZoneOffsetSeconds = _a3[2];
          var localDateTime = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
          var result = new neo4j_driver_core_1.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond, timeZoneOffsetSeconds, null);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function convertIntegerPropsIfNeeded(obj, disableLosslessIntegers, useBigInt) {
      if (!disableLosslessIntegers && !useBigInt) {
        return obj;
      }
      var convert = function(value2) {
        return useBigInt ? value2.toBigInt() : value2.toNumberOrInfinity();
      };
      var clone = Object.create(Object.getPrototypeOf(obj));
      for (var prop in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, prop) === true) {
          var value = obj[prop];
          clone[prop] = (0, neo4j_driver_core_1.isInt)(value) ? convert(value) : value;
        }
      }
      Object.freeze(clone);
      return clone;
    }
    exports.default = __assign(__assign({}, bolt_protocol_v1_transformer_1.default), { createPoint2DTransformer, createPoint3DTransformer, createDurationTransformer, createLocalTimeTransformer, createTimeTransformer, createDateTransformer, createLocalDateTimeTransformer, createDateTimeWithZoneIdTransformer, createDateTimeWithOffsetTransformer });
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v2.js
var require_bolt_protocol_v2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v2.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v1_1 = __importDefault(require_bolt_protocol_v1());
    var packstream_1 = __importDefault(require_packstream());
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_v2_transformer_1 = __importDefault(require_bolt_protocol_v2_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var BOLT_PROTOCOL_V2 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V2;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        BoltProtocol2.prototype._createPacker = function(chunker) {
          return new packstream_1.default.Packer(chunker);
        };
        BoltProtocol2.prototype._createUnpacker = function(disableLosslessIntegers, useBigInt) {
          return new packstream_1.default.Unpacker(disableLosslessIntegers, useBigInt);
        };
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v2_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V2;
          },
          enumerable: false,
          configurable: true
        });
        return BoltProtocol2;
      }(bolt_protocol_v1_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v3.transformer.js
var require_bolt_protocol_v3_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v3.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v2_transformer_1 = __importDefault(require_bolt_protocol_v2_transformer());
    exports.default = __assign({}, bolt_protocol_v2_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v3.js
var require_bolt_protocol_v3 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v3.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v2_1 = __importDefault(require_bolt_protocol_v2());
    var request_message_1 = __importDefault(require_request_message());
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var stream_observers_1 = require_stream_observers();
    var bolt_protocol_v3_transformer_1 = __importDefault(require_bolt_protocol_v3_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var neo4j_driver_core_1 = require_lib();
    var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks;
    var BOLT_PROTOCOL_V3 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V3;
    var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
    var CONTEXT = "context";
    var CALL_GET_ROUTING_TABLE = "CALL dbms.cluster.routing.getRoutingTable($".concat(CONTEXT, ")");
    var noOpObserver = new stream_observers_1.StreamObserver();
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V3;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v3_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.transformMetadata = function(metadata) {
          if ("t_first" in metadata) {
            metadata.result_available_after = metadata.t_first;
            delete metadata.t_first;
          }
          if ("t_last" in metadata) {
            metadata.result_consumed_after = metadata.t_last;
            delete metadata.t_last;
          }
          return metadata;
        };
        BoltProtocol2.prototype.initialize = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              return _this._onLoginCompleted(metadata, authToken, onComplete);
            }
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.hello(userAgent, authToken), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.prepareToClose = function() {
          this.write(request_message_1.default.goodbye(), noOpObserver, true);
        };
        BoltProtocol2.prototype.beginTransaction = function(_a) {
          var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, mode = _b.mode, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.begin({ bookmarks, txConfig, mode }), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.commitTransaction = function(_a) {
          var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          this.write(request_message_1.default.commit(), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.rollbackTransaction = function(_a) {
          var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          this.write(request_message_1.default.rollback(), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.run = function(query, parameters, _a) {
          var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, mode = _b.mode, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.highRecordWatermark, highRecordWatermark = _d === void 0 ? Number.MAX_VALUE : _d, _e = _b.lowRecordWatermark, lowRecordWatermark = _e === void 0 ? Number.MAX_VALUE : _e;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark
          });
          (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.runWithMetadata(query, parameters, {
            bookmarks,
            txConfig,
            mode
          }), observer, false);
          this.write(request_message_1.default.pullAll(), observer, flush);
          return observer;
        };
        BoltProtocol2.prototype.requestRoutingInformation = function(_a) {
          var _b;
          var _c = _a.routingContext, routingContext = _c === void 0 ? {} : _c, _d = _a.sessionContext, sessionContext = _d === void 0 ? {} : _d, onError = _a.onError, onCompleted = _a.onCompleted;
          var resultObserver = this.run(CALL_GET_ROUTING_TABLE, (_b = {}, _b[CONTEXT] = routingContext, _b), __assign(__assign({}, sessionContext), { txConfig: TxConfig.empty() }));
          return new stream_observers_1.ProcedureRouteObserver({
            resultObserver,
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted
          });
        };
        return BoltProtocol2;
      }(bolt_protocol_v2_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x0.transformer.js
var require_bolt_protocol_v4x0_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x0.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v3_transformer_1 = __importDefault(require_bolt_protocol_v3_transformer());
    exports.default = __assign({}, bolt_protocol_v3_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x0.js
var require_bolt_protocol_v4x0 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x0.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v3_1 = __importDefault(require_bolt_protocol_v3());
    var request_message_1 = __importDefault(require_request_message());
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var stream_observers_1 = require_stream_observers();
    var bolt_protocol_v4x0_transformer_1 = __importDefault(require_bolt_protocol_v4x0_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var neo4j_driver_core_1 = require_lib();
    var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks;
    var _a = neo4j_driver_core_1.internal.constants;
    var BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0;
    var FETCH_ALL = _a.FETCH_ALL;
    var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
    var CONTEXT = "context";
    var DATABASE = "database";
    var CALL_GET_ROUTING_TABLE_MULTI_DB = "CALL dbms.routing.getRoutingTable($".concat(CONTEXT, ", $").concat(DATABASE, ")");
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V4_0;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v4x0_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.beginTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, mode = _b.mode, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.begin({ bookmarks, txConfig, database, mode }), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.run = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, mode = _b.mode, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark
          });
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          var flushRun = reactive;
          this.write(request_message_1.default.runWithMetadata(query, parameters, {
            bookmarks,
            txConfig,
            database,
            mode
          }), observer, flushRun && flush);
          if (!reactive) {
            this.write(request_message_1.default.pull({ n: fetchSize }), observer, flush);
          }
          return observer;
        };
        BoltProtocol2.prototype._requestMore = function(stmtId, n, observer) {
          this.write(request_message_1.default.pull({ stmtId, n }), observer, true);
        };
        BoltProtocol2.prototype._requestDiscard = function(stmtId, observer) {
          this.write(request_message_1.default.discard({ stmtId }), observer, true);
        };
        BoltProtocol2.prototype._noOp = function() {
        };
        BoltProtocol2.prototype.requestRoutingInformation = function(_a2) {
          var _b;
          var _c = _a2.routingContext, routingContext = _c === void 0 ? {} : _c, _d = _a2.databaseName, databaseName = _d === void 0 ? null : _d, _e = _a2.sessionContext, sessionContext = _e === void 0 ? {} : _e, onError = _a2.onError, onCompleted = _a2.onCompleted;
          var resultObserver = this.run(CALL_GET_ROUTING_TABLE_MULTI_DB, (_b = {}, _b[CONTEXT] = routingContext, _b[DATABASE] = databaseName, _b), __assign(__assign({}, sessionContext), { txConfig: TxConfig.empty() }));
          return new stream_observers_1.ProcedureRouteObserver({
            resultObserver,
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted
          });
        };
        return BoltProtocol2;
      }(bolt_protocol_v3_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x1.transformer.js
var require_bolt_protocol_v4x1_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x1.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x0_transformer_1 = __importDefault(require_bolt_protocol_v4x0_transformer());
    exports.default = __assign({}, bolt_protocol_v4x0_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x1.js
var require_bolt_protocol_v4x1 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x1.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x0_1 = __importDefault(require_bolt_protocol_v4x0());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var bolt_protocol_v4x1_transformer_1 = __importDefault(require_bolt_protocol_v4x1_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var BOLT_PROTOCOL_V4_1 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V4_1;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2(server, chunker, packstreamConfig, createResponseHandler, log, onProtocolError, serversideRouting) {
          if (createResponseHandler === void 0) {
            createResponseHandler = function() {
              return null;
            };
          }
          var _this = _super.call(this, server, chunker, packstreamConfig, createResponseHandler, log, onProtocolError) || this;
          _this._serversideRouting = serversideRouting;
          return _this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V4_1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v4x1_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.initialize = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              return _this._onLoginCompleted(metadata, authToken, onComplete);
            }
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.hello(userAgent, authToken, this._serversideRouting), observer, true);
          return observer;
        };
        return BoltProtocol2;
      }(bolt_protocol_v4x0_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x2.transformer.js
var require_bolt_protocol_v4x2_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x2.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x1_transformer_1 = __importDefault(require_bolt_protocol_v4x1_transformer());
    exports.default = __assign({}, bolt_protocol_v4x1_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x2.js
var require_bolt_protocol_v4x2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x2.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x1_1 = __importDefault(require_bolt_protocol_v4x1());
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_v4x2_transformer_1 = __importDefault(require_bolt_protocol_v4x2_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var BOLT_PROTOCOL_V4_2 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V4_2;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V4_2;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v4x2_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        return BoltProtocol2;
      }(bolt_protocol_v4x1_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x3.transformer.js
var require_bolt_protocol_v4x3_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x3.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x2_transformer_1 = __importDefault(require_bolt_protocol_v4x2_transformer());
    exports.default = __assign({}, bolt_protocol_v4x2_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x4.transformer.js
var require_bolt_protocol_v4x4_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x4.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x3_transformer_1 = __importDefault(require_bolt_protocol_v4x3_transformer());
    exports.default = __assign({}, bolt_protocol_v4x3_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x0.utc.transformer.js
var require_bolt_protocol_v5x0_utc_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x0.utc.transformer.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var packstream_1 = require_packstream();
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_v4x4_transformer_1 = __importDefault(require_bolt_protocol_v4x4_transformer());
    var temporal_factory_1 = require_temporal_factory();
    var functional_1 = require_functional();
    var localDateTimeToEpochSecond = neo4j_driver_core_1.internal.temporalUtil.localDateTimeToEpochSecond;
    var DATE_TIME_WITH_ZONE_OFFSET = 73;
    var DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE = 3;
    var DATE_TIME_WITH_ZONE_ID = 105;
    var DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE = 3;
    function createDateTimeWithZoneIdTransformer(config, logger) {
      var disableLosslessIntegers = config.disableLosslessIntegers, useBigInt = config.useBigInt;
      var dateTimeWithZoneIdTransformer = bolt_protocol_v4x4_transformer_1.default.createDateTimeWithZoneIdTransformer(config);
      return dateTimeWithZoneIdTransformer.extendsWith({
        signature: DATE_TIME_WITH_ZONE_ID,
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("DateTimeWithZoneId", DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 3), epochSecond = _a[0], nano = _a[1], timeZoneId = _a[2];
          var localDateTime = getTimeInZoneId(timeZoneId, epochSecond, nano);
          var result = new neo4j_driver_core_1.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, (0, neo4j_driver_core_1.int)(nano), localDateTime.timeZoneOffsetSeconds, timeZoneId);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        },
        toStructure: function(value) {
          var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
          var offset = value.timeZoneOffsetSeconds != null ? value.timeZoneOffsetSeconds : getOffsetFromZoneId(value.timeZoneId, epochSecond, value.nanosecond);
          if (value.timeZoneOffsetSeconds == null) {
            logger.warn('DateTime objects without "timeZoneOffsetSeconds" property are prune to bugs related to ambiguous times. For instance, 2022-10-30T2:30:00[Europe/Berlin] could be GMT+1 or GMT+2.');
          }
          var utc = epochSecond.subtract(offset);
          var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
          var timeZoneId = value.timeZoneId;
          return new packstream_1.structure.Structure(DATE_TIME_WITH_ZONE_ID, [utc, nano, timeZoneId]);
        }
      });
    }
    function getOffsetFromZoneId(timeZoneId, epochSecond, nanosecond) {
      var dateTimeWithZoneAppliedTwice = getTimeInZoneId(timeZoneId, epochSecond, nanosecond);
      var epochWithZoneAppliedTwice = localDateTimeToEpochSecond(dateTimeWithZoneAppliedTwice.year, dateTimeWithZoneAppliedTwice.month, dateTimeWithZoneAppliedTwice.day, dateTimeWithZoneAppliedTwice.hour, dateTimeWithZoneAppliedTwice.minute, dateTimeWithZoneAppliedTwice.second, nanosecond);
      var offsetOfZoneInTheFutureUtc = epochWithZoneAppliedTwice.subtract(epochSecond);
      var guessedUtc = epochSecond.subtract(offsetOfZoneInTheFutureUtc);
      var zonedDateTimeFromGuessedUtc = getTimeInZoneId(timeZoneId, guessedUtc, nanosecond);
      var zonedEpochFromGuessedUtc = localDateTimeToEpochSecond(zonedDateTimeFromGuessedUtc.year, zonedDateTimeFromGuessedUtc.month, zonedDateTimeFromGuessedUtc.day, zonedDateTimeFromGuessedUtc.hour, zonedDateTimeFromGuessedUtc.minute, zonedDateTimeFromGuessedUtc.second, nanosecond);
      var offset = zonedEpochFromGuessedUtc.subtract(guessedUtc);
      return offset;
    }
    var dateTimeFormatCache = /* @__PURE__ */ new Map();
    function getDateTimeFormatForZoneId(timeZoneId) {
      if (!dateTimeFormatCache.has(timeZoneId)) {
        var formatter = new Intl.DateTimeFormat("en-US", {
          timeZone: timeZoneId,
          year: "numeric",
          month: "numeric",
          day: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          hour12: false,
          era: "narrow"
        });
        dateTimeFormatCache.set(timeZoneId, formatter);
      }
      return dateTimeFormatCache.get(timeZoneId);
    }
    function getTimeInZoneId(timeZoneId, epochSecond, nano) {
      var formatter = getDateTimeFormatForZoneId(timeZoneId);
      var utc = (0, neo4j_driver_core_1.int)(epochSecond).multiply(1e3).add((0, neo4j_driver_core_1.int)(nano).div(1e6)).toNumber();
      var formattedUtcParts = formatter.formatToParts(utc);
      var localDateTime = formattedUtcParts.reduce(function(obj, currentValue) {
        if (currentValue.type === "era") {
          obj.adjustEra = currentValue.value.toUpperCase() === "B" ? function(year) {
            return year.subtract(1).negate();
          } : functional_1.identity;
        } else if (currentValue.type === "hour") {
          obj.hour = (0, neo4j_driver_core_1.int)(currentValue.value).modulo(24);
        } else if (currentValue.type !== "literal") {
          obj[currentValue.type] = (0, neo4j_driver_core_1.int)(currentValue.value);
        }
        return obj;
      }, {});
      localDateTime.year = localDateTime.adjustEra(localDateTime.year);
      var epochInTimeZone = localDateTimeToEpochSecond(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond);
      localDateTime.timeZoneOffsetSeconds = epochInTimeZone.subtract(epochSecond);
      localDateTime.hour = localDateTime.hour.modulo(24);
      return localDateTime;
    }
    function createDateTimeWithOffsetTransformer(config) {
      var disableLosslessIntegers = config.disableLosslessIntegers, useBigInt = config.useBigInt;
      var dateTimeWithOffsetTransformer = bolt_protocol_v4x4_transformer_1.default.createDateTimeWithOffsetTransformer(config);
      return dateTimeWithOffsetTransformer.extendsWith({
        signature: DATE_TIME_WITH_ZONE_OFFSET,
        toStructure: function(value) {
          var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
          var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
          var timeZoneOffsetSeconds = (0, neo4j_driver_core_1.int)(value.timeZoneOffsetSeconds);
          var utcSecond = epochSecond.subtract(timeZoneOffsetSeconds);
          return new packstream_1.structure.Structure(DATE_TIME_WITH_ZONE_OFFSET, [utcSecond, nano, timeZoneOffsetSeconds]);
        },
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("DateTimeWithZoneOffset", DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 3), utcSecond = _a[0], nano = _a[1], timeZoneOffsetSeconds = _a[2];
          var epochSecond = (0, neo4j_driver_core_1.int)(utcSecond).add(timeZoneOffsetSeconds);
          var localDateTime = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
          var result = new neo4j_driver_core_1.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond, timeZoneOffsetSeconds, null);
          return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
        }
      });
    }
    function convertIntegerPropsIfNeeded(obj, disableLosslessIntegers, useBigInt) {
      if (!disableLosslessIntegers && !useBigInt) {
        return obj;
      }
      var convert = function(value2) {
        return useBigInt ? value2.toBigInt() : value2.toNumberOrInfinity();
      };
      var clone = Object.create(Object.getPrototypeOf(obj));
      for (var prop in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, prop) === true) {
          var value = obj[prop];
          clone[prop] = (0, neo4j_driver_core_1.isInt)(value) ? convert(value) : value;
        }
      }
      Object.freeze(clone);
      return clone;
    }
    exports.default = {
      createDateTimeWithZoneIdTransformer,
      createDateTimeWithOffsetTransformer
    };
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x3.js
var require_bolt_protocol_v4x3 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x3.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x2_1 = __importDefault(require_bolt_protocol_v4x2());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var bolt_protocol_v4x3_transformer_1 = __importDefault(require_bolt_protocol_v4x3_transformer());
    var bolt_protocol_v5x0_utc_transformer_1 = __importDefault(require_bolt_protocol_v5x0_utc_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var neo4j_driver_core_1 = require_lib();
    var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks;
    var BOLT_PROTOCOL_V4_3 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V4_3;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V4_3;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v4x3_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.requestRoutingInformation = function(_a) {
          var _b = _a.routingContext, routingContext = _b === void 0 ? {} : _b, _c = _a.databaseName, databaseName = _c === void 0 ? null : _c, _d = _a.sessionContext, sessionContext = _d === void 0 ? {} : _d, onError = _a.onError, onCompleted = _a.onCompleted;
          var observer = new stream_observers_1.RouteObserver({
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted
          });
          var bookmarks = sessionContext.bookmarks || Bookmarks.empty();
          this.write(request_message_1.default.route(routingContext, bookmarks.values(), databaseName), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.initialize = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              if (metadata.patch_bolt !== void 0) {
                _this._applyPatches(metadata.patch_bolt);
              }
              return _this._onLoginCompleted(metadata, authToken, onComplete);
            }
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.hello(userAgent, authToken, this._serversideRouting, ["utc"]), observer, true);
          return observer;
        };
        BoltProtocol2.prototype._applyPatches = function(patches) {
          if (patches.includes("utc")) {
            this._applyUtcPatch();
          }
        };
        BoltProtocol2.prototype._applyUtcPatch = function() {
          var _this = this;
          this._transformer = new transformer_1.default(Object.values(__assign(__assign({}, bolt_protocol_v4x3_transformer_1.default), bolt_protocol_v5x0_utc_transformer_1.default)).map(function(create) {
            return create(_this._config, _this._log);
          }));
        };
        return BoltProtocol2;
      }(bolt_protocol_v4x2_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x4.js
var require_bolt_protocol_v4x4 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x4.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x3_1 = __importDefault(require_bolt_protocol_v4x3());
    var neo4j_driver_core_1 = require_lib();
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var bolt_protocol_v4x4_transformer_1 = __importDefault(require_bolt_protocol_v4x4_transformer());
    var bolt_protocol_v5x0_utc_transformer_1 = __importDefault(require_bolt_protocol_v5x0_utc_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var _a = neo4j_driver_core_1.internal.constants;
    var BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
    var FETCH_ALL = _a.FETCH_ALL;
    var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V4_4;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v4x4_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.requestRoutingInformation = function(_a2) {
          var _b = _a2.routingContext, routingContext = _b === void 0 ? {} : _b, _c = _a2.databaseName, databaseName = _c === void 0 ? null : _c, _d = _a2.impersonatedUser, impersonatedUser = _d === void 0 ? null : _d, _e = _a2.sessionContext, sessionContext = _e === void 0 ? {} : _e, onError = _a2.onError, onCompleted = _a2.onCompleted;
          var observer = new stream_observers_1.RouteObserver({
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted
          });
          var bookmarks = sessionContext.bookmarks || Bookmarks.empty();
          this.write(request_message_1.default.routeV4x4(routingContext, bookmarks.values(), { databaseName, impersonatedUser }), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.run = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          var flushRun = reactive;
          this.write(request_message_1.default.runWithMetadata(query, parameters, {
            bookmarks,
            txConfig,
            database,
            mode,
            impersonatedUser
          }), observer, flushRun && flush);
          if (!reactive) {
            this.write(request_message_1.default.pull({ n: fetchSize }), observer, flush);
          }
          return observer;
        };
        BoltProtocol2.prototype.beginTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.begin({ bookmarks, txConfig, database, mode, impersonatedUser }), observer, true);
          return observer;
        };
        BoltProtocol2.prototype._applyUtcPatch = function() {
          var _this = this;
          this._transformer = new transformer_1.default(Object.values(__assign(__assign({}, bolt_protocol_v4x4_transformer_1.default), bolt_protocol_v5x0_utc_transformer_1.default)).map(function(create) {
            return create(_this._config, _this._log);
          }));
        };
        return BoltProtocol2;
      }(bolt_protocol_v4x3_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x0.transformer.js
var require_bolt_protocol_v5x0_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x0.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var packstream_1 = require_packstream();
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_v4x4_transformer_1 = __importDefault(require_bolt_protocol_v4x4_transformer());
    var bolt_protocol_v5x0_utc_transformer_1 = __importDefault(require_bolt_protocol_v5x0_utc_transformer());
    var NODE_STRUCT_SIZE = 4;
    var RELATIONSHIP_STRUCT_SIZE = 8;
    var UNBOUND_RELATIONSHIP_STRUCT_SIZE = 4;
    function createNodeTransformer(config) {
      var node4x4Transformer = bolt_protocol_v4x4_transformer_1.default.createNodeTransformer(config);
      return node4x4Transformer.extendsWith({
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Node", NODE_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 4), identity = _a[0], lables = _a[1], properties = _a[2], elementId = _a[3];
          return new neo4j_driver_core_1.Node(identity, lables, properties, elementId);
        }
      });
    }
    function createRelationshipTransformer(config) {
      var relationship4x4Transformer = bolt_protocol_v4x4_transformer_1.default.createRelationshipTransformer(config);
      return relationship4x4Transformer.extendsWith({
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("Relationship", RELATIONSHIP_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 8), identity = _a[0], startNodeIdentity = _a[1], endNodeIdentity = _a[2], type = _a[3], properties = _a[4], elementId = _a[5], startNodeElementId = _a[6], endNodeElementId = _a[7];
          return new neo4j_driver_core_1.Relationship(identity, startNodeIdentity, endNodeIdentity, type, properties, elementId, startNodeElementId, endNodeElementId);
        }
      });
    }
    function createUnboundRelationshipTransformer(config) {
      var unboundRelationshipTransformer = bolt_protocol_v4x4_transformer_1.default.createUnboundRelationshipTransformer(config);
      return unboundRelationshipTransformer.extendsWith({
        fromStructure: function(struct) {
          packstream_1.structure.verifyStructSize("UnboundRelationship", UNBOUND_RELATIONSHIP_STRUCT_SIZE, struct.size);
          var _a = __read(struct.fields, 4), identity = _a[0], type = _a[1], properties = _a[2], elementId = _a[3];
          return new neo4j_driver_core_1.UnboundRelationship(identity, type, properties, elementId);
        }
      });
    }
    exports.default = __assign(__assign(__assign({}, bolt_protocol_v4x4_transformer_1.default), bolt_protocol_v5x0_utc_transformer_1.default), { createNodeTransformer, createRelationshipTransformer, createUnboundRelationshipTransformer });
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x0.js
var require_bolt_protocol_v5x0 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x0.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v4x4_1 = __importDefault(require_bolt_protocol_v4x4());
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var bolt_protocol_v5x0_transformer_1 = __importDefault(require_bolt_protocol_v5x0_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var BOLT_PROTOCOL_V5_0 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V5_0;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_0;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x0_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.initialize = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              return _this._onLoginCompleted(metadata, authToken, onComplete);
            }
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.hello(userAgent, authToken, this._serversideRouting), observer, true);
          return observer;
        };
        return BoltProtocol2;
      }(bolt_protocol_v4x4_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x1.transformer.js
var require_bolt_protocol_v5x1_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x1.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x0_transformer_1 = __importDefault(require_bolt_protocol_v5x0_transformer());
    exports.default = __assign({}, bolt_protocol_v5x0_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x1.js
var require_bolt_protocol_v5x1 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x1.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x0_1 = __importDefault(require_bolt_protocol_v5x0());
    var bolt_protocol_util_1 = require_bolt_protocol_util();
    var bolt_protocol_v5x1_transformer_1 = __importDefault(require_bolt_protocol_v5x1_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var BOLT_PROTOCOL_V5_1 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V5_1;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x1_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "supportsReAuth", {
          get: function() {
            return true;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.initialize = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var state = {};
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              state.metadata = metadata;
              return _this._onLoginCompleted(metadata);
            }
          });
          (0, bolt_protocol_util_1.assertNotificationFilterIsEmpty)(notificationFilter, this._onProtocolError, observer);
          this.write(request_message_1.default.hello5x1(userAgent, this._serversideRouting), observer, false);
          return this.logon({
            authToken,
            onComplete: function(metadata) {
              return onComplete(__assign(__assign({}, metadata), state.metadata));
            },
            onError,
            flush: true
          });
        };
        BoltProtocol2.prototype.logon = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, authToken = _b.authToken, onComplete = _b.onComplete, onError = _b.onError, flush = _b.flush;
          var observer = new stream_observers_1.LoginObserver({
            onCompleted: function() {
              return _this._onLoginCompleted(null, authToken, onComplete);
            },
            onError: function(error) {
              return _this._onLoginError(error, onError);
            }
          });
          this.write(request_message_1.default.logon(authToken), observer, flush);
          return observer;
        };
        BoltProtocol2.prototype.logoff = function(_a) {
          var _b = _a === void 0 ? {} : _a, onComplete = _b.onComplete, onError = _b.onError, flush = _b.flush;
          var observer = new stream_observers_1.LogoffObserver({
            onCompleted: onComplete,
            onError
          });
          this.write(request_message_1.default.logoff(), observer, flush);
          return observer;
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x0_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x2.transformer.js
var require_bolt_protocol_v5x2_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x2.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x1_transformer_1 = __importDefault(require_bolt_protocol_v5x1_transformer());
    exports.default = __assign({}, bolt_protocol_v5x1_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x2.js
var require_bolt_protocol_v5x2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x2.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x1_1 = __importDefault(require_bolt_protocol_v5x1());
    var bolt_protocol_v5x2_transformer_1 = __importDefault(require_bolt_protocol_v5x2_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.constants;
    var BOLT_PROTOCOL_V5_2 = _a.BOLT_PROTOCOL_V5_2;
    var FETCH_ALL = _a.FETCH_ALL;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_2;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x2_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "supportsReAuth", {
          get: function() {
            return true;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.initialize = function(_a2) {
          var _this = this;
          var _b = _a2 === void 0 ? {} : _a2, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var state = {};
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              state.metadata = metadata;
              return _this._onLoginCompleted(metadata);
            }
          });
          this.write(
            // if useragent is null then for all versions before 5.3 it should be bolt agent by default
            request_message_1.default.hello5x2(userAgent, notificationFilter, this._serversideRouting),
            observer,
            false
          );
          return this.logon({
            authToken,
            onComplete: function(metadata) {
              return onComplete(__assign(__assign({}, metadata), state.metadata));
            },
            onError,
            flush: true
          });
        };
        BoltProtocol2.prototype.beginTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          this.write(request_message_1.default.begin({ bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter }), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.run = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark
          });
          var flushRun = reactive;
          this.write(request_message_1.default.runWithMetadata(query, parameters, {
            bookmarks,
            txConfig,
            database,
            mode,
            impersonatedUser,
            notificationFilter
          }), observer, flushRun && flush);
          if (!reactive) {
            this.write(request_message_1.default.pull({ n: fetchSize }), observer, flush);
          }
          return observer;
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x1_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x3.transformer.js
var require_bolt_protocol_v5x3_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x3.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x2_transformer_1 = __importDefault(require_bolt_protocol_v5x2_transformer());
    exports.default = __assign({}, bolt_protocol_v5x2_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x3.js
var require_bolt_protocol_v5x3 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x3.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x2_1 = __importDefault(require_bolt_protocol_v5x2());
    var bolt_protocol_v5x3_transformer_1 = __importDefault(require_bolt_protocol_v5x3_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var BOLT_PROTOCOL_V5_3 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V5_3;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_3;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x3_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.initialize = function(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var state = {};
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              state.metadata = metadata;
              return _this._onLoginCompleted(metadata);
            }
          });
          this.write(request_message_1.default.hello5x3(userAgent, boltAgent, notificationFilter, this._serversideRouting), observer, false);
          return this.logon({
            authToken,
            onComplete: function(metadata) {
              return onComplete(__assign(__assign({}, metadata), state.metadata));
            },
            onError,
            flush: true
          });
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x2_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x4.transformer.js
var require_bolt_protocol_v5x4_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x4.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x3_transformer_1 = __importDefault(require_bolt_protocol_v5x3_transformer());
    exports.default = __assign({}, bolt_protocol_v5x3_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x4.js
var require_bolt_protocol_v5x4 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x4.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x3_1 = __importDefault(require_bolt_protocol_v5x3());
    var bolt_protocol_v5x4_transformer_1 = __importDefault(require_bolt_protocol_v5x4_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var transformer_1 = __importDefault(require_transformer());
    var neo4j_driver_core_1 = require_lib();
    var BOLT_PROTOCOL_V5_4 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V5_4;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_4;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x4_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.telemetry = function(_a, _b) {
          var api = _a.api;
          var _c = _b === void 0 ? {} : _b, onError = _c.onError, onCompleted = _c.onCompleted;
          var observer = new stream_observers_1.TelemetryObserver({ onCompleted, onError });
          this.write(request_message_1.default.telemetry({ api }), observer, false);
          return observer;
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x3_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x5.transformer.js
var require_bolt_protocol_v5x5_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x5.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x4_transformer_1 = __importDefault(require_bolt_protocol_v5x4_transformer());
    exports.default = __assign({}, bolt_protocol_v5x4_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x5.js
var require_bolt_protocol_v5x5 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x5.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x4_1 = __importDefault(require_bolt_protocol_v5x4());
    var bolt_protocol_v5x5_transformer_1 = __importDefault(require_bolt_protocol_v5x5_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.constants;
    var BOLT_PROTOCOL_V5_5 = _a.BOLT_PROTOCOL_V5_5;
    var FETCH_ALL = _a.FETCH_ALL;
    var DEFAULT_DIAGNOSTIC_RECORD = Object.freeze({
      OPERATION: "",
      OPERATION_CODE: "0",
      CURRENT_SCHEMA: "/"
    });
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_5;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x5_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.initialize = function(_a2) {
          var _this = this;
          var _b = _a2 === void 0 ? {} : _a2, userAgent = _b.userAgent, boltAgent = _b.boltAgent, authToken = _b.authToken, notificationFilter = _b.notificationFilter, onError = _b.onError, onComplete = _b.onComplete;
          var state = {};
          var observer = new stream_observers_1.LoginObserver({
            onError: function(error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function(metadata) {
              state.metadata = metadata;
              return _this._onLoginCompleted(metadata);
            }
          });
          this.write(request_message_1.default.hello5x5(userAgent, boltAgent, notificationFilter, this._serversideRouting), observer, false);
          return this.logon({
            authToken,
            onComplete: function(metadata) {
              return onComplete(__assign(__assign({}, metadata), state.metadata));
            },
            onError,
            flush: true
          });
        };
        BoltProtocol2.prototype.beginTransaction = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete
          });
          observer.prepareToHandleSingleResponse();
          this.write(request_message_1.default.begin5x5({ bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter }), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.run = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark,
            enrichMetadata: this._enrichMetadata
          });
          var flushRun = reactive;
          this.write(request_message_1.default.runWithMetadata5x5(query, parameters, {
            bookmarks,
            txConfig,
            database,
            mode,
            impersonatedUser,
            notificationFilter
          }), observer, flushRun && flush);
          if (!reactive) {
            this.write(request_message_1.default.pull({ n: fetchSize }), observer, flush);
          }
          return observer;
        };
        BoltProtocol2.prototype._enrichMetadata = function(metadata) {
          if (Array.isArray(metadata.statuses)) {
            metadata.statuses = metadata.statuses.map(function(status) {
              return __assign(__assign({}, status), { description: status.neo4j_code != null ? status.status_description : status.description, diagnostic_record: status.diagnostic_record !== null ? __assign(__assign({}, DEFAULT_DIAGNOSTIC_RECORD), status.diagnostic_record) : null });
            });
          }
          return metadata;
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x4_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x6.transformer.js
var require_bolt_protocol_v5x6_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x6.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x5_transformer_1 = __importDefault(require_bolt_protocol_v5x5_transformer());
    exports.default = __assign({}, bolt_protocol_v5x5_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x6.js
var require_bolt_protocol_v5x6 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x6.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x5_1 = __importDefault(require_bolt_protocol_v5x5());
    var bolt_protocol_v5x6_transformer_1 = __importDefault(require_bolt_protocol_v5x6_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var neo4j_driver_core_1 = require_lib();
    var BOLT_PROTOCOL_V5_6 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V5_6;
    var DEFAULT_DIAGNOSTIC_RECORD = Object.freeze({
      OPERATION: "",
      OPERATION_CODE: "0",
      CURRENT_SCHEMA: "/"
    });
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_6;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x6_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype._enrichMetadata = function(metadata) {
          if (Array.isArray(metadata.statuses)) {
            metadata.statuses = metadata.statuses.map(function(status) {
              return __assign(__assign({}, status), { diagnostic_record: status.diagnostic_record !== null ? __assign(__assign({}, DEFAULT_DIAGNOSTIC_RECORD), status.diagnostic_record) : null });
            });
          }
          return metadata;
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x5_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x7.transformer.js
var require_bolt_protocol_v5x7_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x7.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x6_transformer_1 = __importDefault(require_bolt_protocol_v5x6_transformer());
    exports.default = __assign({}, bolt_protocol_v5x6_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x7.js
var require_bolt_protocol_v5x7 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x7.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x6_1 = __importDefault(require_bolt_protocol_v5x6());
    var bolt_protocol_v5x7_transformer_1 = __importDefault(require_bolt_protocol_v5x7_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var neo4j_driver_core_1 = require_lib();
    var BOLT_PROTOCOL_V5_7 = neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V5_7;
    var DEFAULT_DIAGNOSTIC_RECORD = Object.freeze({
      OPERATION: "",
      OPERATION_CODE: "0",
      CURRENT_SCHEMA: "/"
    });
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_7;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x7_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.enrichErrorMetadata = function(metadata) {
          return __assign(__assign({}, metadata), { cause: metadata.cause !== null && metadata.cause !== void 0 ? this.enrichErrorMetadata(metadata.cause) : null, code: metadata.neo4j_code, diagnostic_record: metadata.diagnostic_record !== null ? __assign(__assign({}, DEFAULT_DIAGNOSTIC_RECORD), metadata.diagnostic_record) : null });
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x6_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x8.transformer.js
var require_bolt_protocol_v5x8_transformer = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x8.transformer.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x7_transformer_1 = __importDefault(require_bolt_protocol_v5x7_transformer());
    exports.default = __assign({}, bolt_protocol_v5x7_transformer_1.default);
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x8.js
var require_bolt_protocol_v5x8 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v5x8.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_protocol_v5x7_1 = __importDefault(require_bolt_protocol_v5x7());
    var bolt_protocol_v5x8_transformer_1 = __importDefault(require_bolt_protocol_v5x8_transformer());
    var transformer_1 = __importDefault(require_transformer());
    var request_message_1 = __importDefault(require_request_message());
    var stream_observers_1 = require_stream_observers();
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.constants;
    var BOLT_PROTOCOL_V5_8 = _a.BOLT_PROTOCOL_V5_8;
    var FETCH_ALL = _a.FETCH_ALL;
    var BoltProtocol = (
      /** @class */
      function(_super) {
        __extends(BoltProtocol2, _super);
        function BoltProtocol2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, "version", {
          get: function() {
            return BOLT_PROTOCOL_V5_8;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BoltProtocol2.prototype, "transformer", {
          get: function() {
            var _this = this;
            if (this._transformer === void 0) {
              this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x8_transformer_1.default).map(function(create) {
                return create(_this._config, _this._log);
              }));
            }
            return this._transformer;
          },
          enumerable: false,
          configurable: true
        });
        BoltProtocol2.prototype.run = function(query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g, onDb = _b.onDb;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
            highRecordWatermark,
            lowRecordWatermark,
            enrichMetadata: this._enrichMetadata,
            onDb
          });
          var flushRun = reactive;
          this.write(request_message_1.default.runWithMetadata5x5(query, parameters, {
            bookmarks,
            txConfig,
            database,
            mode,
            impersonatedUser,
            notificationFilter
          }), observer, flushRun && flush);
          if (!reactive) {
            this.write(request_message_1.default.pull({ n: fetchSize }), observer, flush);
          }
          return observer;
        };
        return BoltProtocol2;
      }(bolt_protocol_v5x7_1.default)
    );
    exports.default = BoltProtocol;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js
var require_response_handler = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var SUCCESS = 112;
    var RECORD = 113;
    var IGNORED = 126;
    var FAILURE = 127;
    function NO_OP() {
    }
    function NO_OP_IDENTITY(subject) {
      return subject;
    }
    var NO_OP_OBSERVER = {
      onNext: NO_OP,
      onCompleted: NO_OP,
      onError: NO_OP
    };
    var ResponseHandler = (
      /** @class */
      function() {
        function ResponseHandler2(_a) {
          var _b = _a === void 0 ? {} : _a, transformMetadata = _b.transformMetadata, enrichErrorMetadata = _b.enrichErrorMetadata, log = _b.log, observer = _b.observer;
          this._pendingObservers = [];
          this._log = log;
          this._transformMetadata = transformMetadata || NO_OP_IDENTITY;
          this._enrichErrorMetadata = enrichErrorMetadata || NO_OP_IDENTITY;
          this._observer = Object.assign({
            onObserversCountChange: NO_OP,
            onError: NO_OP,
            onFailure: NO_OP,
            onErrorApplyTransformation: NO_OP_IDENTITY
          }, observer);
        }
        Object.defineProperty(ResponseHandler2.prototype, "currentFailure", {
          get: function() {
            return this._currentFailure;
          },
          enumerable: false,
          configurable: true
        });
        ResponseHandler2.prototype.handleResponse = function(msg) {
          var payload = msg.fields[0];
          switch (msg.signature) {
            case RECORD:
              if (this._log.isDebugEnabled()) {
                this._log.debug("S: RECORD ".concat(neo4j_driver_core_1.json.stringify(msg)));
              }
              this._currentObserver.onNext(payload);
              break;
            case SUCCESS:
              if (this._log.isDebugEnabled()) {
                this._log.debug("S: SUCCESS ".concat(neo4j_driver_core_1.json.stringify(msg)));
              }
              try {
                var metadata = this._transformMetadata(payload);
                this._currentObserver.onCompleted(metadata);
              } finally {
                this._updateCurrentObserver();
              }
              break;
            case FAILURE:
              if (this._log.isDebugEnabled()) {
                this._log.debug("S: FAILURE ".concat(neo4j_driver_core_1.json.stringify(msg)));
              }
              try {
                this._currentFailure = this._handleErrorPayload(this._enrichErrorMetadata(payload));
                this._currentObserver.onError(this._currentFailure);
              } finally {
                this._updateCurrentObserver();
                this._observer.onFailure(this._currentFailure);
              }
              break;
            case IGNORED:
              if (this._log.isDebugEnabled()) {
                this._log.debug("S: IGNORED ".concat(neo4j_driver_core_1.json.stringify(msg)));
              }
              try {
                if (this._currentFailure && this._currentObserver.onError) {
                  this._currentObserver.onError(this._currentFailure);
                } else if (this._currentObserver.onError) {
                  this._currentObserver.onError((0, neo4j_driver_core_1.newError)("Ignored either because of an error or RESET"));
                }
              } finally {
                this._updateCurrentObserver();
              }
              break;
            default:
              this._observer.onError((0, neo4j_driver_core_1.newError)("Unknown Bolt protocol message: " + msg));
          }
        };
        ResponseHandler2.prototype._updateCurrentObserver = function() {
          this._currentObserver = this._pendingObservers.shift();
          this._observer.onObserversCountChange(this._observersCount);
        };
        Object.defineProperty(ResponseHandler2.prototype, "_observersCount", {
          get: function() {
            return this._currentObserver == null ? this._pendingObservers.length : this._pendingObservers.length + 1;
          },
          enumerable: false,
          configurable: true
        });
        ResponseHandler2.prototype._queueObserver = function(observer) {
          observer = observer || NO_OP_OBSERVER;
          observer.onCompleted = observer.onCompleted || NO_OP;
          observer.onError = observer.onError || NO_OP;
          observer.onNext = observer.onNext || NO_OP;
          if (this._currentObserver === void 0) {
            this._currentObserver = observer;
          } else {
            this._pendingObservers.push(observer);
          }
          this._observer.onObserversCountChange(this._observersCount);
          return true;
        };
        ResponseHandler2.prototype._notifyErrorToObservers = function(error) {
          if (this._currentObserver && this._currentObserver.onError) {
            this._currentObserver.onError(error);
          }
          while (this._pendingObservers.length > 0) {
            var observer = this._pendingObservers.shift();
            if (observer && observer.onError) {
              observer.onError(error);
            }
          }
        };
        ResponseHandler2.prototype.hasOngoingObservableRequests = function() {
          return this._currentObserver != null || this._pendingObservers.length > 0;
        };
        ResponseHandler2.prototype._resetFailure = function() {
          this._currentFailure = null;
        };
        ResponseHandler2.prototype._handleErrorPayload = function(payload) {
          var standardizedCode = _standardizeCode(payload.code);
          var cause = payload.cause != null ? this._handleErrorCause(payload.cause) : void 0;
          var error = (0, neo4j_driver_core_1.newError)(payload.message, standardizedCode, cause, payload.gql_status, payload.description, payload.diagnostic_record);
          return this._observer.onErrorApplyTransformation(error);
        };
        ResponseHandler2.prototype._handleErrorCause = function(payload) {
          var cause = payload.cause != null ? this._handleErrorCause(payload.cause) : void 0;
          var error = (0, neo4j_driver_core_1.newGQLError)(payload.message, cause, payload.gql_status, payload.description, payload.diagnostic_record);
          return this._observer.onErrorApplyTransformation(error);
        };
        return ResponseHandler2;
      }()
    );
    exports.default = ResponseHandler;
    function _standardizeCode(code) {
      if (code === "Neo.TransientError.Transaction.Terminated") {
        return "Neo.ClientError.Transaction.Terminated";
      } else if (code === "Neo.TransientError.Transaction.LockClientStopped") {
        return "Neo.ClientError.Transaction.LockClientStopped";
      }
      return code;
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/create.js
var require_create = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/create.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var bolt_protocol_v1_1 = __importDefault(require_bolt_protocol_v1());
    var bolt_protocol_v2_1 = __importDefault(require_bolt_protocol_v2());
    var bolt_protocol_v3_1 = __importDefault(require_bolt_protocol_v3());
    var bolt_protocol_v4x0_1 = __importDefault(require_bolt_protocol_v4x0());
    var bolt_protocol_v4x1_1 = __importDefault(require_bolt_protocol_v4x1());
    var bolt_protocol_v4x2_1 = __importDefault(require_bolt_protocol_v4x2());
    var bolt_protocol_v4x3_1 = __importDefault(require_bolt_protocol_v4x3());
    var bolt_protocol_v4x4_1 = __importDefault(require_bolt_protocol_v4x4());
    var bolt_protocol_v5x0_1 = __importDefault(require_bolt_protocol_v5x0());
    var bolt_protocol_v5x1_1 = __importDefault(require_bolt_protocol_v5x1());
    var bolt_protocol_v5x2_1 = __importDefault(require_bolt_protocol_v5x2());
    var bolt_protocol_v5x3_1 = __importDefault(require_bolt_protocol_v5x3());
    var bolt_protocol_v5x4_1 = __importDefault(require_bolt_protocol_v5x4());
    var bolt_protocol_v5x5_1 = __importDefault(require_bolt_protocol_v5x5());
    var bolt_protocol_v5x6_1 = __importDefault(require_bolt_protocol_v5x6());
    var bolt_protocol_v5x7_1 = __importDefault(require_bolt_protocol_v5x7());
    var bolt_protocol_v5x8_1 = __importDefault(require_bolt_protocol_v5x8());
    var channel_1 = require_channel();
    var response_handler_1 = __importDefault(require_response_handler());
    function create(_a) {
      var _b = _a === void 0 ? {} : _a, version = _b.version, chunker = _b.chunker, dechunker = _b.dechunker, channel = _b.channel, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt, serversideRouting = _b.serversideRouting, server = _b.server, log = _b.log, observer = _b.observer;
      var createResponseHandler = function(protocol) {
        var responseHandler = new response_handler_1.default({
          transformMetadata: protocol.transformMetadata.bind(protocol),
          enrichErrorMetadata: protocol.enrichErrorMetadata.bind(protocol),
          log,
          observer
        });
        channel.onerror = observer.onError.bind(observer);
        channel.onmessage = function(buf) {
          return dechunker.write(buf);
        };
        dechunker.onmessage = function(buf) {
          try {
            responseHandler.handleResponse(protocol.unpack(buf));
          } catch (e) {
            return observer.onError(e);
          }
        };
        return responseHandler;
      };
      return createProtocol(version, server, chunker, { disableLosslessIntegers, useBigInt }, serversideRouting, createResponseHandler, observer.onProtocolError.bind(observer), log);
    }
    exports.default = create;
    function createProtocol(version, server, chunker, packingConfig, serversideRouting, createResponseHandler, onProtocolError, log) {
      switch (version) {
        case 1:
          return new bolt_protocol_v1_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
        case 2:
          return new bolt_protocol_v2_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
        case 3:
          return new bolt_protocol_v3_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
        case 4:
          return new bolt_protocol_v4x0_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
        case 4.1:
          return new bolt_protocol_v4x1_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 4.2:
          return new bolt_protocol_v4x2_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 4.3:
          return new bolt_protocol_v4x3_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 4.4:
          return new bolt_protocol_v4x4_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5:
          return new bolt_protocol_v5x0_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.1:
          return new bolt_protocol_v5x1_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.2:
          return new bolt_protocol_v5x2_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.3:
          return new bolt_protocol_v5x3_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.4:
          return new bolt_protocol_v5x4_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.5:
          return new bolt_protocol_v5x5_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.6:
          return new bolt_protocol_v5x6_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.7:
          return new bolt_protocol_v5x7_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        case 5.8:
          return new bolt_protocol_v5x8_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
        default:
          throw (0, neo4j_driver_core_1.newError)("Unknown Bolt protocol version: " + version);
      }
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/bolt/index.js
var require_bolt = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/bolt/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawRoutingTable = exports.BoltProtocol = void 0;
    var handshake_1 = __importDefault(require_handshake());
    var create_1 = __importDefault(require_create());
    var bolt_protocol_v4x3_1 = __importDefault(require_bolt_protocol_v4x3());
    var routing_table_raw_1 = __importDefault(require_routing_table_raw());
    __exportStar(require_stream_observers(), exports);
    exports.BoltProtocol = bolt_protocol_v4x3_1.default;
    exports.RawRoutingTable = routing_table_raw_1.default;
    exports.default = {
      handshake: handshake_1.default,
      create: create_1.default
    };
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-single.js
var require_connection_provider_single = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-single.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var SingleConnectionProvider = (
      /** @class */
      function(_super) {
        __extends(SingleConnectionProvider2, _super);
        function SingleConnectionProvider2(connection) {
          var _this = _super.call(this) || this;
          _this._connection = connection;
          return _this;
        }
        SingleConnectionProvider2.prototype.acquireConnection = function(_a) {
          var _b = _a === void 0 ? {} : _a, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks;
          var connection = this._connection;
          this._connection = null;
          return Promise.resolve(connection);
        };
        return SingleConnectionProvider2;
      }(neo4j_driver_core_1.ConnectionProvider)
    );
    exports.default = SingleConnectionProvider;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection/connection.js
var require_connection2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection/connection.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var bolt_1 = require_bolt();
    var neo4j_driver_core_1 = require_lib();
    var Connection = (
      /** @class */
      function(_super) {
        __extends(Connection2, _super);
        function Connection2(errorHandler) {
          var _this = _super.call(this) || this;
          _this._errorHandler = errorHandler;
          return _this;
        }
        Object.defineProperty(Connection2.prototype, "id", {
          get: function() {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "databaseId", {
          get: function() {
            throw new Error("not implemented");
          },
          set: function(value) {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "authToken", {
          get: function() {
            throw new Error("not implemented");
          },
          set: function(value) {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "supportsReAuth", {
          get: function() {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "creationTimestamp", {
          get: function() {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "idleTimestamp", {
          get: function() {
            throw new Error("not implemented");
          },
          set: function(value) {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Connection2.prototype.protocol = function() {
          throw new Error("not implemented");
        };
        Object.defineProperty(Connection2.prototype, "address", {
          /**
           * @returns {ServerAddress} the server address this connection is opened against
           */
          get: function() {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "version", {
          /**
           * @returns {ServerVersion} the version of the server this connection is connected to
           */
          get: function() {
            throw new Error("not implemented");
          },
          set: function(value) {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Connection2.prototype, "server", {
          get: function() {
            throw new Error("not implemented");
          },
          enumerable: false,
          configurable: true
        });
        Connection2.prototype.connect = function(userAgent, boltAgent, authToken, shouldWaitReAuth) {
          throw new Error("not implemented");
        };
        Connection2.prototype.write = function(message, observer, flush) {
          throw new Error("not implemented");
        };
        Connection2.prototype.close = function() {
          throw new Error("not implemented");
        };
        Connection2.prototype.handleAndTransformError = function(error, address) {
          if (this._errorHandler) {
            return this._errorHandler.handleAndTransformError(error, address, this);
          }
          return error;
        };
        return Connection2;
      }(neo4j_driver_core_1.Connection)
    );
    exports.default = Connection;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection/connection-channel.js
var require_connection_channel = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection/connection-channel.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createChannelConnection = void 0;
    var channel_1 = require_channel();
    var neo4j_driver_core_1 = require_lib();
    var connection_1 = __importDefault(require_connection2());
    var bolt_1 = __importDefault(require_bolt());
    var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
    var Logger = neo4j_driver_core_1.internal.logger.Logger;
    var idGenerator = 0;
    function createChannelConnection(address, config, errorHandler, log, clientCertificate, serversideRouting, ssrCallback, createChannel) {
      if (serversideRouting === void 0) {
        serversideRouting = null;
      }
      if (createChannel === void 0) {
        createChannel = function(channelConfig2) {
          return new channel_1.Channel(channelConfig2);
        };
      }
      var channelConfig = new channel_1.ChannelConfig(address, config, errorHandler.errorCode(), clientCertificate);
      var channel = createChannel(channelConfig);
      return bolt_1.default.handshake(channel, log).then(function(_a) {
        var version = _a.protocolVersion, consumeRemainingBuffer = _a.consumeRemainingBuffer;
        var chunker = new channel_1.Chunker(channel);
        var dechunker = new channel_1.Dechunker();
        var createProtocol = function(conn) {
          return bolt_1.default.create({
            version,
            channel,
            chunker,
            dechunker,
            disableLosslessIntegers: config.disableLosslessIntegers,
            useBigInt: config.useBigInt,
            serversideRouting,
            server: conn.server,
            log: conn.logger,
            observer: {
              onObserversCountChange: conn._handleOngoingRequestsNumberChange.bind(conn),
              onError: conn._handleFatalError.bind(conn),
              onFailure: conn._resetOnFailure.bind(conn),
              onProtocolError: conn._handleProtocolError.bind(conn),
              onErrorApplyTransformation: function(error) {
                return conn.handleAndTransformError(error, conn._address);
              }
            }
          });
        };
        var connection = new ChannelConnection(channel, errorHandler, address, log, config.disableLosslessIntegers, serversideRouting, chunker, config.notificationFilter, createProtocol, config.telemetryDisabled, ssrCallback);
        consumeRemainingBuffer(function(buffer) {
          return dechunker.write(buffer);
        });
        return connection;
      }).catch(function(reason) {
        return channel.close().then(function() {
          throw reason;
        });
      });
    }
    exports.createChannelConnection = createChannelConnection;
    var ChannelConnection = (
      /** @class */
      function(_super) {
        __extends(ChannelConnection2, _super);
        function ChannelConnection2(channel, errorHandler, address, log, disableLosslessIntegers, serversideRouting, chunker, notificationFilter, protocolSupplier, telemetryDisabled, ssrCallback) {
          if (disableLosslessIntegers === void 0) {
            disableLosslessIntegers = false;
          }
          if (serversideRouting === void 0) {
            serversideRouting = null;
          }
          if (ssrCallback === void 0) {
            ssrCallback = function(_) {
            };
          }
          var _this = _super.call(this, errorHandler) || this;
          _this._authToken = null;
          _this._idle = false;
          _this._reseting = false;
          _this._resetObservers = [];
          _this._id = idGenerator++;
          _this._address = address;
          _this._server = { address: address.asHostPort() };
          _this._creationTimestamp = Date.now();
          _this._disableLosslessIntegers = disableLosslessIntegers;
          _this._ch = channel;
          _this._chunker = chunker;
          _this._log = createConnectionLogger(_this, log);
          _this._serversideRouting = serversideRouting;
          _this._notificationFilter = notificationFilter;
          _this._telemetryDisabledDriverConfig = telemetryDisabled === true;
          _this._telemetryDisabledConnection = true;
          _this._ssrCallback = ssrCallback;
          _this._dbConnectionId = null;
          _this._protocol = protocolSupplier(_this);
          _this._isBroken = false;
          if (_this._log.isDebugEnabled()) {
            _this._log.debug("created towards ".concat(address));
          }
          return _this;
        }
        ChannelConnection2.prototype.beginTransaction = function(config) {
          this._sendTelemetryIfEnabled(config);
          return this._protocol.beginTransaction(config);
        };
        ChannelConnection2.prototype.run = function(query, parameters, config) {
          this._sendTelemetryIfEnabled(config);
          return this._protocol.run(query, parameters, config);
        };
        ChannelConnection2.prototype._sendTelemetryIfEnabled = function(config) {
          if (this._telemetryDisabledConnection || this._telemetryDisabledDriverConfig || config == null || config.apiTelemetryConfig == null) {
            return;
          }
          this._protocol.telemetry({
            api: config.apiTelemetryConfig.api
          }, {
            onCompleted: config.apiTelemetryConfig.onTelemetrySuccess,
            onError: config.beforeError
          });
        };
        ChannelConnection2.prototype.commitTransaction = function(config) {
          return this._protocol.commitTransaction(config);
        };
        ChannelConnection2.prototype.rollbackTransaction = function(config) {
          return this._protocol.rollbackTransaction(config);
        };
        ChannelConnection2.prototype.getProtocolVersion = function() {
          return this._protocol.version;
        };
        Object.defineProperty(ChannelConnection2.prototype, "authToken", {
          get: function() {
            return this._authToken;
          },
          set: function(value) {
            this._authToken = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "supportsReAuth", {
          get: function() {
            return this._protocol.supportsReAuth;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "id", {
          get: function() {
            return this._id;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "databaseId", {
          get: function() {
            return this._dbConnectionId;
          },
          set: function(value) {
            this._dbConnectionId = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "idleTimestamp", {
          get: function() {
            return this._idleTimestamp;
          },
          set: function(value) {
            this._idleTimestamp = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "creationTimestamp", {
          get: function() {
            return this._creationTimestamp;
          },
          enumerable: false,
          configurable: true
        });
        ChannelConnection2.prototype.connect = function(userAgent, boltAgent, authToken, waitReAuth) {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (this._protocol.initialized && !this._protocol.supportsReAuth) {
                    throw (0, neo4j_driver_core_1.newError)("Connection does not support re-auth");
                  }
                  this._authToken = authToken;
                  if (!!this._protocol.initialized) return [3, 2];
                  return [4, this._initialize(userAgent, boltAgent, authToken)];
                case 1:
                  return [2, _a.sent()];
                case 2:
                  if (!waitReAuth) return [3, 4];
                  return [4, new Promise(function(resolve, reject) {
                    _this._protocol.logoff({
                      onError: reject
                    });
                    _this._protocol.logon({
                      authToken,
                      onError: reject,
                      onComplete: function() {
                        return resolve(_this);
                      },
                      flush: true
                    });
                  })];
                case 3:
                  return [2, _a.sent()];
                case 4:
                  this._protocol.logoff();
                  this._protocol.logon({ authToken, flush: true });
                  return [2, this];
              }
            });
          });
        };
        ChannelConnection2.prototype._initialize = function(userAgent, boltAgent, authToken) {
          var _this = this;
          var self = this;
          return new Promise(function(resolve, reject) {
            _this._protocol.initialize({
              userAgent,
              boltAgent,
              authToken,
              notificationFilter: _this._notificationFilter,
              onError: function(err) {
                return reject(err);
              },
              onComplete: function(metadata) {
                var _a;
                if (metadata) {
                  var serverVersion = metadata.server;
                  if (!_this.version || serverVersion) {
                    _this.version = serverVersion;
                  }
                  var dbConnectionId = metadata.connection_id;
                  if (!_this.databaseId) {
                    _this.databaseId = dbConnectionId;
                  }
                  if (metadata.hints) {
                    var receiveTimeoutRaw = metadata.hints["connection.recv_timeout_seconds"];
                    if (receiveTimeoutRaw !== null && receiveTimeoutRaw !== void 0) {
                      var receiveTimeoutInSeconds = (0, neo4j_driver_core_1.toNumber)(receiveTimeoutRaw);
                      if (Number.isInteger(receiveTimeoutInSeconds) && receiveTimeoutInSeconds > 0) {
                        _this._ch.setupReceiveTimeout(receiveTimeoutInSeconds * 1e3);
                      } else {
                        _this._log.info("Server located at ".concat(_this._address, " supplied an invalid connection receive timeout value (").concat(receiveTimeoutInSeconds, "). ") + "Please, verify the server configuration and status because this can be the symptom of a bigger issue.");
                      }
                    }
                    var telemetryEnabledHint = metadata.hints["telemetry.enabled"];
                    if (telemetryEnabledHint === true) {
                      _this._telemetryDisabledConnection = false;
                    }
                    _this.SSREnabledHint = metadata.hints["ssr.enabled"];
                  }
                  _this._ssrCallback((_a = _this.SSREnabledHint) !== null && _a !== void 0 ? _a : false, "OPEN");
                }
                resolve(self);
              }
            });
          });
        };
        ChannelConnection2.prototype.protocol = function() {
          return this._protocol;
        };
        Object.defineProperty(ChannelConnection2.prototype, "address", {
          get: function() {
            return this._address;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "version", {
          /**
           * Get the version of the connected server.
           * Available only after initialization
           *
           * @returns {ServerVersion} version
           */
          get: function() {
            return this._server.version;
          },
          set: function(value) {
            this._server.version = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "server", {
          get: function() {
            return this._server;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ChannelConnection2.prototype, "logger", {
          get: function() {
            return this._log;
          },
          enumerable: false,
          configurable: true
        });
        ChannelConnection2.prototype._handleFatalError = function(error) {
          this._isBroken = true;
          this._error = this.handleAndTransformError(this._protocol.currentFailure || error, this._address);
          if (this._log.isErrorEnabled()) {
            this._log.error("experienced a fatal error caused by ".concat(this._error, " (").concat(neo4j_driver_core_1.json.stringify(this._error), ")"));
          }
          this._protocol.notifyFatalError(this._error);
        };
        ChannelConnection2.prototype._setIdle = function(observer) {
          this._idle = true;
          this._ch.stopReceiveTimeout();
          this._protocol.queueObserverIfProtocolIsNotBroken(observer);
        };
        ChannelConnection2.prototype._unsetIdle = function() {
          this._idle = false;
          this._updateCurrentObserver();
        };
        ChannelConnection2.prototype._queueObserver = function(observer) {
          return this._protocol.queueObserverIfProtocolIsNotBroken(observer);
        };
        ChannelConnection2.prototype.hasOngoingObservableRequests = function() {
          return !this._idle && this._protocol.hasOngoingObservableRequests();
        };
        ChannelConnection2.prototype.resetAndFlush = function() {
          var _this = this;
          return new Promise(function(resolve, reject) {
            _this._reset({
              onError: function(error) {
                if (_this._isBroken) {
                  reject(error);
                } else {
                  var neo4jError = _this._handleProtocolError("Received FAILURE as a response for RESET: ".concat(error));
                  reject(neo4jError);
                }
              },
              onComplete: function() {
                resolve();
              }
            });
          });
        };
        ChannelConnection2.prototype._resetOnFailure = function() {
          var _this = this;
          if (!this.isOpen()) {
            return;
          }
          this._reset({
            onError: function() {
              _this._protocol.resetFailure();
            },
            onComplete: function() {
              _this._protocol.resetFailure();
            }
          });
        };
        ChannelConnection2.prototype._reset = function(observer) {
          var _this = this;
          if (this._reseting) {
            if (!this._protocol.isLastMessageReset()) {
              this._protocol.reset({
                onError: function(error) {
                  observer.onError(error);
                },
                onComplete: function() {
                  observer.onComplete();
                }
              });
            } else {
              this._resetObservers.push(observer);
            }
            return;
          }
          this._resetObservers.push(observer);
          this._reseting = true;
          var notifyFinish = function(notify) {
            _this._reseting = false;
            var observers = _this._resetObservers;
            _this._resetObservers = [];
            observers.forEach(notify);
          };
          this._protocol.reset({
            onError: function(error) {
              notifyFinish(function(obs) {
                return obs.onError(error);
              });
            },
            onComplete: function() {
              notifyFinish(function(obs) {
                return obs.onComplete();
              });
            }
          });
        };
        ChannelConnection2.prototype._updateCurrentObserver = function() {
          this._protocol.updateCurrentObserver();
        };
        ChannelConnection2.prototype.isOpen = function() {
          return !this._isBroken && this._ch._open;
        };
        ChannelConnection2.prototype._handleOngoingRequestsNumberChange = function(requestsNumber) {
          if (this._idle) {
            return;
          }
          if (requestsNumber === 0) {
            this._ch.stopReceiveTimeout();
          } else {
            this._ch.startReceiveTimeout();
          }
        };
        ChannelConnection2.prototype.close = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  this._ssrCallback((_a = this.SSREnabledHint) !== null && _a !== void 0 ? _a : false, "CLOSE");
                  if (this._log.isDebugEnabled()) {
                    this._log.debug("closing");
                  }
                  if (this._protocol && this.isOpen()) {
                    this._protocol.prepareToClose();
                  }
                  return [4, this._ch.close()];
                case 1:
                  _b.sent();
                  if (this._log.isDebugEnabled()) {
                    this._log.debug("closed");
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        ChannelConnection2.prototype.toString = function() {
          return "Connection [".concat(this.id, "][").concat(this.databaseId || "", "]");
        };
        ChannelConnection2.prototype._handleProtocolError = function(message) {
          this._protocol.resetFailure();
          this._updateCurrentObserver();
          var error = (0, neo4j_driver_core_1.newError)(message, PROTOCOL_ERROR);
          this._handleFatalError(error);
          return error;
        };
        return ChannelConnection2;
      }(connection_1.default)
    );
    exports.default = ChannelConnection;
    function createConnectionLogger(connection, logger) {
      return new Logger(logger._level, function(level, message) {
        return logger._loggerFunction(level, "".concat(connection, " ").concat(message));
      });
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection/connection-delegate.js
var require_connection_delegate = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection/connection-delegate.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var connection_1 = __importDefault(require_connection2());
    var DelegateConnection = (
      /** @class */
      function(_super) {
        __extends(DelegateConnection2, _super);
        function DelegateConnection2(delegate, errorHandler) {
          var _this = _super.call(this, errorHandler) || this;
          if (errorHandler) {
            _this._originalErrorHandler = delegate._errorHandler;
            delegate._errorHandler = _this._errorHandler;
          }
          _this._delegate = delegate;
          return _this;
        }
        DelegateConnection2.prototype.beginTransaction = function(config) {
          return this._delegate.beginTransaction(config);
        };
        DelegateConnection2.prototype.run = function(query, param, config) {
          return this._delegate.run(query, param, config);
        };
        DelegateConnection2.prototype.commitTransaction = function(config) {
          return this._delegate.commitTransaction(config);
        };
        DelegateConnection2.prototype.rollbackTransaction = function(config) {
          return this._delegate.rollbackTransaction(config);
        };
        DelegateConnection2.prototype.getProtocolVersion = function() {
          return this._delegate.getProtocolVersion();
        };
        Object.defineProperty(DelegateConnection2.prototype, "id", {
          get: function() {
            return this._delegate.id;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "databaseId", {
          get: function() {
            return this._delegate.databaseId;
          },
          set: function(value) {
            this._delegate.databaseId = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "server", {
          get: function() {
            return this._delegate.server;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "authToken", {
          get: function() {
            return this._delegate.authToken;
          },
          set: function(value) {
            this._delegate.authToken = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "supportsReAuth", {
          get: function() {
            return this._delegate.supportsReAuth;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "address", {
          get: function() {
            return this._delegate.address;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "version", {
          get: function() {
            return this._delegate.version;
          },
          set: function(value) {
            this._delegate.version = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "creationTimestamp", {
          get: function() {
            return this._delegate.creationTimestamp;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DelegateConnection2.prototype, "idleTimestamp", {
          get: function() {
            return this._delegate.idleTimestamp;
          },
          set: function(value) {
            this._delegate.idleTimestamp = value;
          },
          enumerable: false,
          configurable: true
        });
        DelegateConnection2.prototype.isOpen = function() {
          return this._delegate.isOpen();
        };
        DelegateConnection2.prototype.protocol = function() {
          return this._delegate.protocol();
        };
        DelegateConnection2.prototype.connect = function(userAgent, boltAgent, authToken, waitReAuth) {
          return this._delegate.connect(userAgent, boltAgent, authToken, waitReAuth);
        };
        DelegateConnection2.prototype.write = function(message, observer, flush) {
          return this._delegate.write(message, observer, flush);
        };
        DelegateConnection2.prototype.resetAndFlush = function() {
          return this._delegate.resetAndFlush();
        };
        DelegateConnection2.prototype.hasOngoingObservableRequests = function() {
          return this._delegate.hasOngoingObservableRequests();
        };
        DelegateConnection2.prototype.close = function() {
          return this._delegate.close();
        };
        DelegateConnection2.prototype.release = function() {
          if (this._originalErrorHandler) {
            this._delegate._errorHandler = this._originalErrorHandler;
          }
          return this._delegate.release();
        };
        return DelegateConnection2;
      }(connection_1.default)
    );
    exports.default = DelegateConnection;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection/connection-error-handler.js
var require_connection_error_handler = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection/connection-error-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
    var SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;
    var ConnectionErrorHandler = (
      /** @class */
      function() {
        function ConnectionErrorHandler2(errorCode, handleUnavailability, handleWriteFailure, handleSecurityError) {
          this._errorCode = errorCode;
          this._handleUnavailability = handleUnavailability || noOpHandler;
          this._handleWriteFailure = handleWriteFailure || noOpHandler;
          this._handleSecurityError = handleSecurityError || noOpHandler;
        }
        ConnectionErrorHandler2.create = function(_a) {
          var errorCode = _a.errorCode, handleUnavailability = _a.handleUnavailability, handleWriteFailure = _a.handleWriteFailure, handleSecurityError = _a.handleSecurityError;
          return new ConnectionErrorHandler2(errorCode, handleUnavailability, handleWriteFailure, handleSecurityError);
        };
        ConnectionErrorHandler2.prototype.errorCode = function() {
          return this._errorCode;
        };
        ConnectionErrorHandler2.prototype.handleAndTransformError = function(error, address, connection) {
          if (isSecurityError(error)) {
            return this._handleSecurityError(error, address, connection);
          }
          if (isAvailabilityError(error)) {
            return this._handleUnavailability(error, address, connection);
          }
          if (isFailureToWrite(error)) {
            return this._handleWriteFailure(error, address, connection);
          }
          return error;
        };
        return ConnectionErrorHandler2;
      }()
    );
    exports.default = ConnectionErrorHandler;
    function isSecurityError(error) {
      return error != null && error.code != null && error.code.startsWith("Neo.ClientError.Security.");
    }
    function isAvailabilityError(error) {
      if (error) {
        return error.code === SESSION_EXPIRED || error.code === SERVICE_UNAVAILABLE || error.code === "Neo.TransientError.General.DatabaseUnavailable";
      }
      return false;
    }
    function isFailureToWrite(error) {
      if (error) {
        return error.code === "Neo.ClientError.Cluster.NotALeader" || error.code === "Neo.ClientError.General.ForbiddenOnReadOnlyDatabase";
      }
      return false;
    }
    function noOpHandler(error) {
      return error;
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection/index.js
var require_connection3 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createChannelConnection = exports.ConnectionErrorHandler = exports.DelegateConnection = exports.ChannelConnection = exports.Connection = void 0;
    var connection_1 = __importDefault(require_connection2());
    exports.Connection = connection_1.default;
    var connection_channel_1 = __importStar(require_connection_channel());
    exports.ChannelConnection = connection_channel_1.default;
    Object.defineProperty(exports, "createChannelConnection", { enumerable: true, get: function() {
      return connection_channel_1.createChannelConnection;
    } });
    var connection_delegate_1 = __importDefault(require_connection_delegate());
    exports.DelegateConnection = connection_delegate_1.default;
    var connection_error_handler_1 = __importDefault(require_connection_error_handler());
    exports.ConnectionErrorHandler = connection_error_handler_1.default;
    exports.default = connection_1.default;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/authentication-provider.js
var require_authentication_provider = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/authentication-provider.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var lang_1 = require_lang();
    var AuthenticationProvider = (
      /** @class */
      function() {
        function AuthenticationProvider2(_a) {
          var authTokenManager = _a.authTokenManager, userAgent = _a.userAgent, boltAgent = _a.boltAgent;
          this._authTokenManager = authTokenManager || (0, neo4j_driver_core_1.staticAuthTokenManager)({});
          this._userAgent = userAgent;
          this._boltAgent = boltAgent;
        }
        AuthenticationProvider2.prototype.authenticate = function(_a) {
          var connection = _a.connection, auth = _a.auth, skipReAuth = _a.skipReAuth, waitReAuth = _a.waitReAuth, forceReAuth = _a.forceReAuth;
          return __awaiter(this, void 0, void 0, function() {
            var shouldReAuth, authToken;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!(auth != null)) return [3, 3];
                  shouldReAuth = connection.supportsReAuth === true && (!lang_1.object.equals(connection.authToken, auth) && skipReAuth !== true || forceReAuth === true);
                  if (!(connection.authToken == null || shouldReAuth)) return [3, 2];
                  return [4, connection.connect(this._userAgent, this._boltAgent, auth, waitReAuth || false)];
                case 1:
                  return [2, _b.sent()];
                case 2:
                  return [2, connection];
                case 3:
                  return [4, this._authTokenManager.getToken()];
                case 4:
                  authToken = _b.sent();
                  if (!!lang_1.object.equals(authToken, connection.authToken)) return [3, 6];
                  return [4, connection.connect(this._userAgent, this._boltAgent, authToken, false)];
                case 5:
                  return [2, _b.sent()];
                case 6:
                  return [2, connection];
              }
            });
          });
        };
        AuthenticationProvider2.prototype.handleError = function(_a) {
          var connection = _a.connection, code = _a.code;
          if (connection && code.startsWith("Neo.ClientError.Security.")) {
            return this._authTokenManager.handleSecurityException(connection.authToken, code);
          }
          return false;
        };
        return AuthenticationProvider2;
      }()
    );
    exports.default = AuthenticationProvider;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/liveness-check-provider.js
var require_liveness_check_provider = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/liveness-check-provider.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var LivenessCheckProvider = (
      /** @class */
      function() {
        function LivenessCheckProvider2(_a) {
          var connectionLivenessCheckTimeout = _a.connectionLivenessCheckTimeout;
          this._connectionLivenessCheckTimeout = connectionLivenessCheckTimeout;
        }
        LivenessCheckProvider2.prototype.check = function(connection) {
          return __awaiter(this, void 0, void 0, function() {
            var idleFor;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (this._isCheckDisabled || this._isNewlyCreatedConnection(connection)) {
                    return [2, true];
                  }
                  idleFor = Date.now() - connection.idleTimestamp;
                  if (!(this._connectionLivenessCheckTimeout === 0 || idleFor > this._connectionLivenessCheckTimeout)) return [3, 2];
                  return [4, connection.resetAndFlush().then(function() {
                    return true;
                  })];
                case 1:
                  return [2, _a.sent()];
                case 2:
                  return [2, true];
              }
            });
          });
        };
        Object.defineProperty(LivenessCheckProvider2.prototype, "_isCheckDisabled", {
          get: function() {
            return this._connectionLivenessCheckTimeout == null || this._connectionLivenessCheckTimeout < 0;
          },
          enumerable: false,
          configurable: true
        });
        LivenessCheckProvider2.prototype._isNewlyCreatedConnection = function(connection) {
          return connection.authToken == null;
        };
        return LivenessCheckProvider2;
      }()
    );
    exports.default = LivenessCheckProvider;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/client-certificate-holder.js
var require_client_certificate_holder = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/client-certificate-holder.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var channel_1 = require_channel();
    var ClientCertificateHolder = (
      /** @class */
      function() {
        function ClientCertificateHolder2(_a) {
          var clientCertificateProvider = _a.clientCertificateProvider, loader = _a.loader;
          this._clientCertificateProvider = clientCertificateProvider;
          this._loader = loader || channel_1.ClientCertificatesLoader;
          this._clientCertificate = null;
        }
        ClientCertificateHolder2.prototype.getClientCertificate = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, _b;
            var _this = this;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _a = this._clientCertificateProvider != null;
                  if (!_a) return [3, 3];
                  _b = this._clientCertificate == null;
                  if (_b) return [3, 2];
                  return [4, this._clientCertificateProvider.hasUpdate()];
                case 1:
                  _b = _c.sent();
                  _c.label = 2;
                case 2:
                  _a = _b;
                  _c.label = 3;
                case 3:
                  if (_a) {
                    this._clientCertificate = Promise.resolve(this._clientCertificateProvider.getClientCertificate()).then(this._loader.load).then(function(clientCertificate) {
                      _this._clientCertificate = clientCertificate;
                      return _this._clientCertificate;
                    }).catch(function(error) {
                      _this._clientCertificate = null;
                      throw error;
                    });
                  }
                  return [2, this._clientCertificate];
              }
            });
          });
        };
        return ClientCertificateHolder2;
      }()
    );
    exports.default = ClientCertificateHolder;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-pooled.js
var require_connection_provider_pooled = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-pooled.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var connection_1 = require_connection3();
    var neo4j_driver_core_1 = require_lib();
    var authentication_provider_1 = __importDefault(require_authentication_provider());
    var lang_1 = require_lang();
    var liveness_check_provider_1 = __importDefault(require_liveness_check_provider());
    var client_certificate_holder_1 = __importDefault(require_client_certificate_holder());
    var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
    var AUTHENTICATION_ERRORS = [
      "Neo.ClientError.Security.CredentialsExpired",
      "Neo.ClientError.Security.Forbidden",
      "Neo.ClientError.Security.TokenExpired",
      "Neo.ClientError.Security.Unauthorized"
    ];
    var _a = neo4j_driver_core_1.internal.pool;
    var Pool = _a.Pool;
    var PoolConfig = _a.PoolConfig;
    var PooledConnectionProvider = (
      /** @class */
      function(_super) {
        __extends(PooledConnectionProvider2, _super);
        function PooledConnectionProvider2(_a2, createChannelConnectionHook) {
          var id = _a2.id, config = _a2.config, log = _a2.log, userAgent = _a2.userAgent, boltAgent = _a2.boltAgent, authTokenManager = _a2.authTokenManager, _b = _a2.newPool, newPool = _b === void 0 ? function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new (Pool.bind.apply(Pool, __spreadArray([void 0], __read(args), false)))();
          } : _b;
          if (createChannelConnectionHook === void 0) {
            createChannelConnectionHook = null;
          }
          var _this = _super.call(this) || this;
          _this._id = id;
          _this._config = config;
          _this._log = log;
          _this._clientCertificateHolder = new client_certificate_holder_1.default({ clientCertificateProvider: _this._config.clientCertificate });
          _this._authenticationProvider = new authentication_provider_1.default({ authTokenManager, userAgent, boltAgent });
          _this._livenessCheckProvider = new liveness_check_provider_1.default({ connectionLivenessCheckTimeout: config.connectionLivenessCheckTimeout });
          _this._userAgent = userAgent;
          _this._boltAgent = boltAgent;
          _this._createChannelConnection = createChannelConnectionHook || function(address) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a3, _b2;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    _a3 = connection_1.createChannelConnection;
                    _b2 = [
                      address,
                      this._config,
                      this._createConnectionErrorHandler(),
                      this._log
                    ];
                    return [4, this._clientCertificateHolder.getClientCertificate()];
                  case 1:
                    return [2, _a3.apply(void 0, _b2.concat([_c.sent()]))];
                }
              });
            });
          };
          _this._connectionPool = newPool({
            create: _this._createConnection.bind(_this),
            destroy: _this._destroyConnection.bind(_this),
            validateOnAcquire: _this._validateConnectionOnAcquire.bind(_this),
            validateOnRelease: _this._validateConnectionOnRelease.bind(_this),
            installIdleObserver: PooledConnectionProvider2._installIdleObserverOnConnection.bind(_this),
            removeIdleObserver: PooledConnectionProvider2._removeIdleObserverOnConnection.bind(_this),
            config: PoolConfig.fromDriverConfig(config),
            log: _this._log
          });
          _this._openConnections = {};
          return _this;
        }
        PooledConnectionProvider2.prototype._createConnectionErrorHandler = function() {
          return new connection_1.ConnectionErrorHandler(SERVICE_UNAVAILABLE);
        };
        PooledConnectionProvider2.prototype._getClientCertificate = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this._config.clientCertificate.getClientCertificate()];
            });
          });
        };
        PooledConnectionProvider2.prototype._createConnection = function(_a2, address, release) {
          var _this = this;
          var auth = _a2.auth;
          return this._createChannelConnection(address).then(function(connection) {
            connection.release = function() {
              connection.idleTimestamp = Date.now();
              return release(address, connection);
            };
            _this._openConnections[connection.id] = connection;
            return _this._authenticationProvider.authenticate({ connection, auth }).catch(function(error) {
              _this._destroyConnection(connection);
              throw error;
            });
          });
        };
        PooledConnectionProvider2.prototype._validateConnectionOnAcquire = function(_a2, conn) {
          var auth = _a2.auth, skipReAuth = _a2.skipReAuth;
          return __awaiter(this, void 0, void 0, function() {
            var error_1, error_2;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!this._validateConnection(conn)) {
                    return [2, false];
                  }
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 3, , 4]);
                  return [4, this._livenessCheckProvider.check(conn)];
                case 2:
                  _b.sent();
                  return [3, 4];
                case 3:
                  error_1 = _b.sent();
                  this._log.debug("The connection ".concat(conn.id, " is not alive because of an error ").concat(error_1.code, " '").concat(error_1.message, "'"));
                  return [2, false];
                case 4:
                  _b.trys.push([4, 6, , 7]);
                  return [4, this._authenticationProvider.authenticate({ connection: conn, auth, skipReAuth })];
                case 5:
                  _b.sent();
                  return [2, true];
                case 6:
                  error_2 = _b.sent();
                  this._log.debug("The connection ".concat(conn.id, " is not valid because of an error ").concat(error_2.code, " '").concat(error_2.message, "'"));
                  return [2, false];
                case 7:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        PooledConnectionProvider2.prototype._validateConnectionOnRelease = function(conn) {
          return conn._sticky !== true && this._validateConnection(conn);
        };
        PooledConnectionProvider2.prototype._validateConnection = function(conn) {
          if (!conn.isOpen()) {
            return false;
          }
          var maxConnectionLifetime = this._config.maxConnectionLifetime;
          var lifetime = Date.now() - conn.creationTimestamp;
          if (lifetime > maxConnectionLifetime) {
            return false;
          }
          return true;
        };
        PooledConnectionProvider2.prototype._destroyConnection = function(conn) {
          delete this._openConnections[conn.id];
          return conn.close();
        };
        PooledConnectionProvider2.prototype._verifyConnectivityAndGetServerVersion = function(_a2) {
          var address = _a2.address;
          return __awaiter(this, void 0, void 0, function() {
            var connection, serverInfo;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, this._connectionPool.acquire({}, address)];
                case 1:
                  connection = _b.sent();
                  serverInfo = new neo4j_driver_core_1.ServerInfo(connection.server, connection.protocol().version);
                  _b.label = 2;
                case 2:
                  _b.trys.push([2, , 5, 7]);
                  if (!!connection.protocol().isLastMessageLogon()) return [3, 4];
                  return [4, connection.resetAndFlush()];
                case 3:
                  _b.sent();
                  _b.label = 4;
                case 4:
                  return [3, 7];
                case 5:
                  return [4, connection.release()];
                case 6:
                  _b.sent();
                  return [
                    7
                    /*endfinally*/
                  ];
                case 7:
                  return [2, serverInfo];
              }
            });
          });
        };
        PooledConnectionProvider2.prototype._verifyAuthentication = function(_a2) {
          var getAddress = _a2.getAddress, auth = _a2.auth;
          return __awaiter(this, void 0, void 0, function() {
            var connectionsToRelease, address, connection, lastMessageIsNotLogin, stickyConnection, error_3;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  connectionsToRelease = [];
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 8, 9, 11]);
                  return [4, getAddress()];
                case 2:
                  address = _b.sent();
                  return [4, this._connectionPool.acquire({ auth, skipReAuth: true }, address)];
                case 3:
                  connection = _b.sent();
                  connectionsToRelease.push(connection);
                  lastMessageIsNotLogin = !connection.protocol().isLastMessageLogon();
                  if (!connection.supportsReAuth) {
                    throw (0, neo4j_driver_core_1.newError)("Driver is connected to a database that does not support user switch.");
                  }
                  if (!(lastMessageIsNotLogin && connection.supportsReAuth)) return [3, 5];
                  return [4, this._authenticationProvider.authenticate({ connection, auth, waitReAuth: true, forceReAuth: true })];
                case 4:
                  _b.sent();
                  return [3, 7];
                case 5:
                  if (!(lastMessageIsNotLogin && !connection.supportsReAuth)) return [3, 7];
                  return [4, this._connectionPool.acquire({ auth }, address, { requireNew: true })];
                case 6:
                  stickyConnection = _b.sent();
                  stickyConnection._sticky = true;
                  connectionsToRelease.push(stickyConnection);
                  _b.label = 7;
                case 7:
                  return [2, true];
                case 8:
                  error_3 = _b.sent();
                  if (AUTHENTICATION_ERRORS.includes(error_3.code)) {
                    return [2, false];
                  }
                  throw error_3;
                case 9:
                  return [4, Promise.all(connectionsToRelease.map(function(conn) {
                    return conn.release();
                  }))];
                case 10:
                  _b.sent();
                  return [
                    7
                    /*endfinally*/
                  ];
                case 11:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        PooledConnectionProvider2.prototype._verifyStickyConnection = function(_a2) {
          var auth = _a2.auth, connection = _a2.connection, address = _a2.address;
          return __awaiter(this, void 0, void 0, function() {
            var connectionWithSameCredentials, shouldCreateStickyConnection;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  connectionWithSameCredentials = lang_1.object.equals(auth, connection.authToken);
                  shouldCreateStickyConnection = !connectionWithSameCredentials;
                  connection._sticky = connectionWithSameCredentials && !connection.supportsReAuth;
                  if (!(shouldCreateStickyConnection || connection._sticky)) return [3, 2];
                  return [4, connection.release()];
                case 1:
                  _b.sent();
                  throw (0, neo4j_driver_core_1.newError)("Driver is connected to a database that does not support user switch.");
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        PooledConnectionProvider2.prototype.close = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [
                    4,
                    this._connectionPool.close()
                    // then close all connections driver has ever created
                    // it is needed to close connections that are active right now and are acquired from the pool
                  ];
                case 1:
                  _a2.sent();
                  return [4, Promise.all(Object.values(this._openConnections).map(function(c) {
                    return c.close();
                  }))];
                case 2:
                  _a2.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        PooledConnectionProvider2._installIdleObserverOnConnection = function(conn, observer) {
          conn._setIdle(observer);
        };
        PooledConnectionProvider2._removeIdleObserverOnConnection = function(conn) {
          conn._unsetIdle();
        };
        PooledConnectionProvider2.prototype._handleSecurityError = function(error, address, connection) {
          var handled = this._authenticationProvider.handleError({ connection, code: error.code });
          if (handled) {
            error.retriable = true;
          }
          if (error.code === "Neo.ClientError.Security.AuthorizationExpired") {
            this._connectionPool.apply(address, function(conn) {
              conn.authToken = null;
            });
          }
          if (connection) {
            connection.close().catch(function() {
              return void 0;
            });
          }
          return error;
        };
        return PooledConnectionProvider2;
      }(neo4j_driver_core_1.ConnectionProvider)
    );
    exports.default = PooledConnectionProvider;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-direct.js
var require_connection_provider_direct = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-direct.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var connection_provider_pooled_1 = __importDefault(require_connection_provider_pooled());
    var connection_1 = require_connection3();
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.constants;
    var BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3;
    var BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0;
    var BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
    var BOLT_PROTOCOL_V5_1 = _a.BOLT_PROTOCOL_V5_1;
    var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
    var DirectConnectionProvider = (
      /** @class */
      function(_super) {
        __extends(DirectConnectionProvider2, _super);
        function DirectConnectionProvider2(_a2) {
          var id = _a2.id, config = _a2.config, log = _a2.log, address = _a2.address, userAgent = _a2.userAgent, boltAgent = _a2.boltAgent, authTokenManager = _a2.authTokenManager, newPool = _a2.newPool;
          var _this = _super.call(this, { id, config, log, userAgent, boltAgent, authTokenManager, newPool }) || this;
          _this._address = address;
          return _this;
        }
        DirectConnectionProvider2.prototype.acquireConnection = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks, auth = _b.auth, forceReAuth = _b.forceReAuth;
          return __awaiter(this, void 0, void 0, function() {
            var databaseSpecificErrorHandler, connection;
            var _this = this;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  databaseSpecificErrorHandler = connection_1.ConnectionErrorHandler.create({
                    errorCode: SERVICE_UNAVAILABLE,
                    handleSecurityError: function(error, address, conn) {
                      return _this._handleSecurityError(error, address, conn, database);
                    }
                  });
                  return [4, this._connectionPool.acquire({ auth, forceReAuth }, this._address)];
                case 1:
                  connection = _c.sent();
                  if (!auth) return [3, 3];
                  return [4, this._verifyStickyConnection({
                    auth,
                    connection,
                    address: this._address
                  })];
                case 2:
                  _c.sent();
                  return [2, connection];
                case 3:
                  return [2, new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler)];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype._handleSecurityError = function(error, address, connection, database) {
          this._log.warn("Direct driver ".concat(this._id, " will close connection to ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
          return _super.prototype._handleSecurityError.call(this, error, address, connection);
        };
        DirectConnectionProvider2.prototype._hasProtocolVersion = function(versionPredicate) {
          return __awaiter(this, void 0, void 0, function() {
            var connection, protocolVersion;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._createChannelConnection(this._address)];
                case 1:
                  connection = _a2.sent();
                  protocolVersion = connection.protocol() ? connection.protocol().version : null;
                  return [4, connection.close()];
                case 2:
                  _a2.sent();
                  if (protocolVersion) {
                    return [2, versionPredicate(protocolVersion)];
                  }
                  return [2, false];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.supportsMultiDb = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V4_0;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.getNegotiatedProtocolVersion = function() {
          var _this = this;
          return new Promise(function(resolve, reject) {
            _this._hasProtocolVersion(resolve).catch(reject);
          });
        };
        DirectConnectionProvider2.prototype.supportsTransactionConfig = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V3;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.supportsUserImpersonation = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V4_4;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.supportsSessionAuth = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V5_1;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.verifyAuthentication = function(_a2) {
          var auth = _a2.auth;
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_b) {
              return [2, this._verifyAuthentication({
                auth,
                getAddress: function() {
                  return _this._address;
                }
              })];
            });
          });
        };
        DirectConnectionProvider2.prototype.verifyConnectivityAndGetServerInfo = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._verifyConnectivityAndGetServerVersion({ address: this._address })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        return DirectConnectionProvider2;
      }(connection_provider_pooled_1.default)
    );
    exports.default = DirectConnectionProvider;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/rediscovery/routing-table.js
var require_routing_table = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/rediscovery/routing-table.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createValidRoutingTable = void 0;
    var neo4j_driver_core_1 = require_lib();
    var _a = neo4j_driver_core_1.internal.constants;
    var WRITE = _a.ACCESS_MODE_WRITE;
    var READ = _a.ACCESS_MODE_READ;
    var ServerAddress = neo4j_driver_core_1.internal.serverAddress.ServerAddress;
    var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
    var MIN_ROUTERS = 1;
    var RoutingTable = (
      /** @class */
      function() {
        function RoutingTable2(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, database = _b.database, routers = _b.routers, readers = _b.readers, writers = _b.writers, expirationTime = _b.expirationTime, ttl = _b.ttl;
          this.database = database || null;
          this.databaseName = database || "default database";
          this.routers = routers || [];
          this.readers = readers || [];
          this.writers = writers || [];
          this.expirationTime = expirationTime || (0, neo4j_driver_core_1.int)(0);
          this.ttl = ttl;
        }
        RoutingTable2.fromRawRoutingTable = function(database, routerAddress, rawRoutingTable) {
          return createValidRoutingTable(database, routerAddress, rawRoutingTable);
        };
        RoutingTable2.prototype.forget = function(address) {
          this.readers = removeFromArray(this.readers, address);
          this.writers = removeFromArray(this.writers, address);
        };
        RoutingTable2.prototype.forgetRouter = function(address) {
          this.routers = removeFromArray(this.routers, address);
        };
        RoutingTable2.prototype.forgetWriter = function(address) {
          this.writers = removeFromArray(this.writers, address);
        };
        RoutingTable2.prototype.isStaleFor = function(accessMode) {
          return this.expirationTime.lessThan(Date.now()) || this.routers.length < MIN_ROUTERS || accessMode === READ && this.readers.length === 0 || accessMode === WRITE && this.writers.length === 0;
        };
        RoutingTable2.prototype.isExpiredFor = function(duration) {
          return this.expirationTime.add(duration).lessThan(Date.now());
        };
        RoutingTable2.prototype.allServers = function() {
          return __spreadArray(__spreadArray(__spreadArray([], __read(this.routers), false), __read(this.readers), false), __read(this.writers), false);
        };
        RoutingTable2.prototype.toString = function() {
          return "RoutingTable[" + "database=".concat(this.databaseName, ", ") + "expirationTime=".concat(this.expirationTime, ", ") + "currentTime=".concat(Date.now(), ", ") + "routers=[".concat(this.routers, "], ") + "readers=[".concat(this.readers, "], ") + "writers=[".concat(this.writers, "]]");
        };
        return RoutingTable2;
      }()
    );
    exports.default = RoutingTable;
    function removeFromArray(array, element) {
      return array.filter(function(item) {
        return item.asKey() !== element.asKey();
      });
    }
    function createValidRoutingTable(database, routerAddress, rawRoutingTable) {
      var ttl = rawRoutingTable.ttl;
      var expirationTime = calculateExpirationTime(rawRoutingTable, routerAddress);
      var _a2 = parseServers(rawRoutingTable, routerAddress), routers = _a2.routers, readers = _a2.readers, writers = _a2.writers;
      assertNonEmpty(routers, "routers", routerAddress);
      assertNonEmpty(readers, "readers", routerAddress);
      return new RoutingTable({
        database: database || rawRoutingTable.db,
        routers,
        readers,
        writers,
        expirationTime,
        ttl
      });
    }
    exports.createValidRoutingTable = createValidRoutingTable;
    function parseServers(rawRoutingTable, routerAddress) {
      try {
        var routers_1 = [];
        var readers_1 = [];
        var writers_1 = [];
        rawRoutingTable.servers.forEach(function(server) {
          var role = server.role;
          var addresses = server.addresses;
          if (role === "ROUTE") {
            routers_1 = parseArray(addresses).map(function(address) {
              return ServerAddress.fromUrl(address);
            });
          } else if (role === "WRITE") {
            writers_1 = parseArray(addresses).map(function(address) {
              return ServerAddress.fromUrl(address);
            });
          } else if (role === "READ") {
            readers_1 = parseArray(addresses).map(function(address) {
              return ServerAddress.fromUrl(address);
            });
          }
        });
        return {
          routers: routers_1,
          readers: readers_1,
          writers: writers_1
        };
      } catch (error) {
        throw (0, neo4j_driver_core_1.newError)("Unable to parse servers entry from router ".concat(routerAddress, " from addresses:\n").concat(neo4j_driver_core_1.json.stringify(rawRoutingTable.servers), "\nError message: ").concat(error.message), PROTOCOL_ERROR);
      }
    }
    function calculateExpirationTime(rawRoutingTable, routerAddress) {
      try {
        var now = (0, neo4j_driver_core_1.int)(Date.now());
        var expires = (0, neo4j_driver_core_1.int)(rawRoutingTable.ttl).multiply(1e3).add(now);
        if (expires.lessThan(now)) {
          return neo4j_driver_core_1.Integer.MAX_VALUE;
        }
        return expires;
      } catch (error) {
        throw (0, neo4j_driver_core_1.newError)("Unable to parse TTL entry from router ".concat(routerAddress, " from raw routing table:\n").concat(neo4j_driver_core_1.json.stringify(rawRoutingTable), "\nError message: ").concat(error.message), PROTOCOL_ERROR);
      }
    }
    function assertNonEmpty(serverAddressesArray, serversName, routerAddress) {
      if (serverAddressesArray.length === 0) {
        throw (0, neo4j_driver_core_1.newError)("Received no " + serversName + " from router " + routerAddress, PROTOCOL_ERROR);
      }
    }
    function parseArray(addresses) {
      if (!Array.isArray(addresses)) {
        throw new TypeError("Array expected but got: " + addresses);
      }
      return Array.from(addresses);
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/rediscovery/rediscovery.js
var require_rediscovery = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/rediscovery/rediscovery.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var routing_table_1 = __importDefault(require_routing_table());
    var neo4j_driver_core_1 = require_lib();
    var Rediscovery = (
      /** @class */
      function() {
        function Rediscovery2(routingContext) {
          this._routingContext = routingContext;
        }
        Rediscovery2.prototype.lookupRoutingTableOnRouter = function(session, database, routerAddress, impersonatedUser) {
          var _this = this;
          return session._acquireConnection(function(connection) {
            return _this._requestRawRoutingTable(connection, session, database, routerAddress, impersonatedUser).then(function(rawRoutingTable) {
              if (rawRoutingTable.isNull) {
                return null;
              }
              return routing_table_1.default.fromRawRoutingTable(database, routerAddress, rawRoutingTable);
            });
          });
        };
        Rediscovery2.prototype._requestRawRoutingTable = function(connection, session, database, routerAddress, impersonatedUser) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            connection.protocol().requestRoutingInformation({
              routingContext: _this._routingContext,
              databaseName: database,
              impersonatedUser,
              sessionContext: {
                bookmarks: session._lastBookmarks,
                mode: session._mode,
                database: session._database,
                afterComplete: session._onComplete
              },
              onCompleted: resolve,
              onError: reject
            });
          });
        };
        return Rediscovery2;
      }()
    );
    exports.default = Rediscovery;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/rediscovery/index.js
var require_rediscovery2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/rediscovery/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RoutingTable = exports.Rediscovery = void 0;
    var rediscovery_1 = __importDefault(require_rediscovery());
    exports.Rediscovery = rediscovery_1.default;
    var routing_table_1 = __importDefault(require_routing_table());
    exports.RoutingTable = routing_table_1.default;
    exports.default = rediscovery_1.default;
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-routing.js
var require_connection_provider_routing = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-routing.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var neo4j_driver_core_1 = require_lib();
    var rediscovery_1 = __importStar(require_rediscovery2());
    var channel_1 = require_channel();
    var connection_provider_single_1 = __importDefault(require_connection_provider_single());
    var connection_provider_pooled_1 = __importDefault(require_connection_provider_pooled());
    var load_balancing_1 = require_load_balancing();
    var connection_1 = require_connection3();
    var lang_1 = require_lang();
    var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
    var SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;
    var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks;
    var _a = neo4j_driver_core_1.internal.constants;
    var READ = _a.ACCESS_MODE_READ;
    var WRITE = _a.ACCESS_MODE_WRITE;
    var BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3;
    var BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0;
    var BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
    var BOLT_PROTOCOL_V5_1 = _a.BOLT_PROTOCOL_V5_1;
    var PROCEDURE_NOT_FOUND_CODE = "Neo.ClientError.Procedure.ProcedureNotFound";
    var DATABASE_NOT_FOUND_CODE = "Neo.ClientError.Database.DatabaseNotFound";
    var INVALID_BOOKMARK_CODE = "Neo.ClientError.Transaction.InvalidBookmark";
    var INVALID_BOOKMARK_MIXTURE_CODE = "Neo.ClientError.Transaction.InvalidBookmarkMixture";
    var AUTHORIZATION_EXPIRED_CODE = "Neo.ClientError.Security.AuthorizationExpired";
    var INVALID_ARGUMENT_ERROR = "Neo.ClientError.Statement.ArgumentError";
    var INVALID_REQUEST_ERROR = "Neo.ClientError.Request.Invalid";
    var STATEMENT_TYPE_ERROR = "Neo.ClientError.Statement.TypeError";
    var NOT_AVAILABLE = "N/A";
    var SYSTEM_DB_NAME = "system";
    var DEFAULT_DB_NAME = null;
    var DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, neo4j_driver_core_1.int)(3e4);
    var RoutingConnectionProvider = (
      /** @class */
      function(_super) {
        __extends(RoutingConnectionProvider2, _super);
        function RoutingConnectionProvider2(_a2) {
          var id = _a2.id, address = _a2.address, routingContext = _a2.routingContext, hostNameResolver = _a2.hostNameResolver, config = _a2.config, log = _a2.log, userAgent = _a2.userAgent, boltAgent = _a2.boltAgent, authTokenManager = _a2.authTokenManager, routingTablePurgeDelay = _a2.routingTablePurgeDelay, newPool = _a2.newPool;
          var _this = _super.call(this, { id, config, log, userAgent, boltAgent, authTokenManager, newPool }, function(address2) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a3, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    _a3 = connection_1.createChannelConnection;
                    _b = [
                      address2,
                      this._config,
                      this._createConnectionErrorHandler(),
                      this._log
                    ];
                    return [4, this._clientCertificateHolder.getClientCertificate()];
                  case 1:
                    return [2, _a3.apply(void 0, _b.concat([
                      _c.sent(),
                      this._routingContext,
                      this._channelSsrCallback.bind(this)
                    ]))];
                }
              });
            });
          }) || this;
          _this._routingContext = __assign(__assign({}, routingContext), { address: address.toString() });
          _this._seedRouter = address;
          _this._rediscovery = new rediscovery_1.default(_this._routingContext);
          _this._loadBalancingStrategy = new load_balancing_1.LeastConnectedLoadBalancingStrategy(_this._connectionPool);
          _this._hostNameResolver = hostNameResolver;
          _this._dnsResolver = new channel_1.HostNameResolver();
          _this._log = log;
          _this._useSeedRouter = true;
          _this._routingTableRegistry = new RoutingTableRegistry(routingTablePurgeDelay ? (0, neo4j_driver_core_1.int)(routingTablePurgeDelay) : DEFAULT_ROUTING_TABLE_PURGE_DELAY);
          _this._refreshRoutingTable = lang_1.functional.reuseOngoingRequest(_this._refreshRoutingTable, _this);
          _this._withSSR = 0;
          _this._withoutSSR = 0;
          return _this;
        }
        RoutingConnectionProvider2.prototype._createConnectionErrorHandler = function() {
          return new connection_1.ConnectionErrorHandler(SESSION_EXPIRED);
        };
        RoutingConnectionProvider2.prototype._handleUnavailability = function(error, address, database) {
          this._log.warn("Routing driver ".concat(this._id, " will forget ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
          this.forget(address, database || DEFAULT_DB_NAME);
          return error;
        };
        RoutingConnectionProvider2.prototype._handleSecurityError = function(error, address, connection, database) {
          this._log.warn("Routing driver ".concat(this._id, " will close connections to ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
          return _super.prototype._handleSecurityError.call(this, error, address, connection, database);
        };
        RoutingConnectionProvider2.prototype._handleWriteFailure = function(error, address, database) {
          this._log.warn("Routing driver ".concat(this._id, " will forget writer ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
          this.forgetWriter(address, database || DEFAULT_DB_NAME);
          return (0, neo4j_driver_core_1.newError)("No longer possible to write to server at " + address, SESSION_EXPIRED, error);
        };
        RoutingConnectionProvider2.prototype.acquireConnection = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved, auth = _b.auth, homeDb = _b.homeDb;
          return __awaiter(this, void 0, void 0, function() {
            var context, databaseSpecificErrorHandler, conn, currentRoutingTable, routingTable;
            var _this = this;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  context = { database: database || DEFAULT_DB_NAME };
                  databaseSpecificErrorHandler = new connection_1.ConnectionErrorHandler(SESSION_EXPIRED, function(error, address) {
                    return _this._handleUnavailability(error, address, context.database);
                  }, function(error, address) {
                    return _this._handleWriteFailure(error, address, homeDb !== null && homeDb !== void 0 ? homeDb : context.database);
                  }, function(error, address, conn2) {
                    return _this._handleSecurityError(error, address, conn2, context.database);
                  });
                  if (!(this.SSREnabled() && homeDb !== void 0 && database === "")) return [3, 2];
                  currentRoutingTable = this._routingTableRegistry.get(homeDb, function() {
                    return new rediscovery_1.RoutingTable({ database: homeDb });
                  });
                  if (!(currentRoutingTable && !currentRoutingTable.isStaleFor(accessMode))) return [3, 2];
                  return [4, this.getConnectionFromRoutingTable(currentRoutingTable, auth, accessMode, databaseSpecificErrorHandler)];
                case 1:
                  conn = _c.sent();
                  if (this.SSREnabled()) {
                    return [2, conn];
                  }
                  conn.release();
                  _c.label = 2;
                case 2:
                  return [4, this._freshRoutingTable({
                    accessMode,
                    database: context.database,
                    bookmarks,
                    impersonatedUser,
                    auth,
                    onDatabaseNameResolved: function(databaseName) {
                      context.database = context.database || databaseName;
                      if (onDatabaseNameResolved) {
                        onDatabaseNameResolved(databaseName);
                      }
                    }
                  })];
                case 3:
                  routingTable = _c.sent();
                  return [2, this.getConnectionFromRoutingTable(routingTable, auth, accessMode, databaseSpecificErrorHandler)];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.getConnectionFromRoutingTable = function(routingTable, auth, accessMode, databaseSpecificErrorHandler) {
          return __awaiter(this, void 0, void 0, function() {
            var name, address, connection, error_1, transformed;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  if (accessMode === READ) {
                    address = this._loadBalancingStrategy.selectReader(routingTable.readers);
                    name = "read";
                  } else if (accessMode === WRITE) {
                    address = this._loadBalancingStrategy.selectWriter(routingTable.writers);
                    name = "write";
                  } else {
                    throw (0, neo4j_driver_core_1.newError)("Illegal mode " + accessMode);
                  }
                  if (!address) {
                    throw (0, neo4j_driver_core_1.newError)("Failed to obtain connection towards ".concat(name, " server. Known routing table is: ").concat(routingTable), SESSION_EXPIRED);
                  }
                  _a2.label = 1;
                case 1:
                  _a2.trys.push([1, 5, , 6]);
                  return [4, this._connectionPool.acquire({ auth }, address)];
                case 2:
                  connection = _a2.sent();
                  if (!auth) return [3, 4];
                  return [4, this._verifyStickyConnection({
                    auth,
                    connection,
                    address
                  })];
                case 3:
                  _a2.sent();
                  return [2, connection];
                case 4:
                  return [2, new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler)];
                case 5:
                  error_1 = _a2.sent();
                  transformed = databaseSpecificErrorHandler.handleAndTransformError(error_1, address);
                  throw transformed;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._hasProtocolVersion = function(versionPredicate) {
          return __awaiter(this, void 0, void 0, function() {
            var addresses, lastError, i, connection, protocolVersion, error_2;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._resolveSeedRouter(this._seedRouter)];
                case 1:
                  addresses = _a2.sent();
                  i = 0;
                  _a2.label = 2;
                case 2:
                  if (!(i < addresses.length)) return [3, 8];
                  _a2.label = 3;
                case 3:
                  _a2.trys.push([3, 6, , 7]);
                  return [4, this._createChannelConnection(addresses[i])];
                case 4:
                  connection = _a2.sent();
                  protocolVersion = connection.protocol() ? connection.protocol().version : null;
                  return [4, connection.close()];
                case 5:
                  _a2.sent();
                  if (protocolVersion) {
                    return [2, versionPredicate(protocolVersion)];
                  }
                  return [2, false];
                case 6:
                  error_2 = _a2.sent();
                  lastError = error_2;
                  return [3, 7];
                case 7:
                  i++;
                  return [3, 2];
                case 8:
                  if (lastError) {
                    throw lastError;
                  }
                  return [2, false];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.supportsMultiDb = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V4_0;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.supportsTransactionConfig = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V3;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.supportsUserImpersonation = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V4_4;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.supportsSessionAuth = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hasProtocolVersion(function(version) {
                    return version >= BOLT_PROTOCOL_V5_1;
                  })];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.getNegotiatedProtocolVersion = function() {
          var _this = this;
          return new Promise(function(resolve, reject) {
            _this._hasProtocolVersion(resolve).catch(reject);
          });
        };
        RoutingConnectionProvider2.prototype.verifyAuthentication = function(_a2) {
          var database = _a2.database, accessMode = _a2.accessMode, auth = _a2.auth;
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_b) {
              return [2, this._verifyAuthentication({
                auth,
                getAddress: function() {
                  return __awaiter(_this, void 0, void 0, function() {
                    var context, routingTable, servers;
                    return __generator(this, function(_a3) {
                      switch (_a3.label) {
                        case 0:
                          context = { database: database || DEFAULT_DB_NAME };
                          return [4, this._freshRoutingTable({
                            accessMode,
                            database: context.database,
                            auth,
                            onDatabaseNameResolved: function(databaseName) {
                              context.database = context.database || databaseName;
                            }
                          })];
                        case 1:
                          routingTable = _a3.sent();
                          servers = accessMode === WRITE ? routingTable.writers : routingTable.readers;
                          if (servers.length === 0) {
                            throw (0, neo4j_driver_core_1.newError)("No servers available for database '".concat(context.database, "' with access mode '").concat(accessMode, "'"), SERVICE_UNAVAILABLE);
                          }
                          return [2, servers[0]];
                      }
                    });
                  });
                }
              })];
            });
          });
        };
        RoutingConnectionProvider2.prototype.verifyConnectivityAndGetServerInfo = function(_a2) {
          var database = _a2.database, accessMode = _a2.accessMode;
          return __awaiter(this, void 0, void 0, function() {
            var context, routingTable, servers, error, servers_1, servers_1_1, address, serverInfo, e_1, e_2_1;
            var e_2, _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  context = { database: database || DEFAULT_DB_NAME };
                  return [4, this._freshRoutingTable({
                    accessMode,
                    database: context.database,
                    onDatabaseNameResolved: function(databaseName) {
                      context.database = context.database || databaseName;
                    }
                  })];
                case 1:
                  routingTable = _c.sent();
                  servers = accessMode === WRITE ? routingTable.writers : routingTable.readers;
                  error = (0, neo4j_driver_core_1.newError)("No servers available for database '".concat(context.database, "' with access mode '").concat(accessMode, "'"), SERVICE_UNAVAILABLE);
                  _c.label = 2;
                case 2:
                  _c.trys.push([2, 9, 10, 11]);
                  servers_1 = __values(servers), servers_1_1 = servers_1.next();
                  _c.label = 3;
                case 3:
                  if (!!servers_1_1.done) return [3, 8];
                  address = servers_1_1.value;
                  _c.label = 4;
                case 4:
                  _c.trys.push([4, 6, , 7]);
                  return [4, this._verifyConnectivityAndGetServerVersion({ address })];
                case 5:
                  serverInfo = _c.sent();
                  return [2, serverInfo];
                case 6:
                  e_1 = _c.sent();
                  error = e_1;
                  return [3, 7];
                case 7:
                  servers_1_1 = servers_1.next();
                  return [3, 3];
                case 8:
                  return [3, 11];
                case 9:
                  e_2_1 = _c.sent();
                  e_2 = { error: e_2_1 };
                  return [3, 11];
                case 10:
                  try {
                    if (servers_1_1 && !servers_1_1.done && (_b = servers_1.return)) _b.call(servers_1);
                  } finally {
                    if (e_2) throw e_2.error;
                  }
                  return [
                    7
                    /*endfinally*/
                  ];
                case 11:
                  throw error;
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.forget = function(address, database) {
          this._routingTableRegistry.apply(database, {
            applyWhenExists: function(routingTable) {
              return routingTable.forget(address);
            }
          });
          this._connectionPool.purge(address).catch(function() {
          });
        };
        RoutingConnectionProvider2.prototype.forgetWriter = function(address, database) {
          this._routingTableRegistry.apply(database, {
            applyWhenExists: function(routingTable) {
              return routingTable.forgetWriter(address);
            }
          });
        };
        RoutingConnectionProvider2.prototype._freshRoutingTable = function(_a2) {
          var _b = _a2 === void 0 ? {} : _a2, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved, auth = _b.auth;
          var currentRoutingTable = this._routingTableRegistry.get(database, function() {
            return new rediscovery_1.RoutingTable({ database });
          });
          if (!currentRoutingTable.isStaleFor(accessMode)) {
            return currentRoutingTable;
          }
          this._log.info('Routing table is stale for database: "'.concat(database, '" and access mode: "').concat(accessMode, '": ').concat(currentRoutingTable));
          return this._refreshRoutingTable(currentRoutingTable, bookmarks, impersonatedUser, auth).then(function(newRoutingTable) {
            onDatabaseNameResolved(newRoutingTable.database);
            return newRoutingTable;
          });
        };
        RoutingConnectionProvider2.prototype._refreshRoutingTable = function(currentRoutingTable, bookmarks, impersonatedUser, auth) {
          var knownRouters = currentRoutingTable.routers;
          if (this._useSeedRouter) {
            return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth);
          }
          return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth);
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters = function(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth) {
          return __awaiter(this, void 0, void 0, function() {
            var seenRouters, _a2, newRoutingTable, error, _b, newRoutingTable2, error2;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  seenRouters = [];
                  return [4, this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmarks, impersonatedUser, auth)];
                case 1:
                  _a2 = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable = _a2[0], error = _a2[1];
                  if (!newRoutingTable) return [3, 2];
                  this._useSeedRouter = false;
                  return [3, 4];
                case 2:
                  return [4, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth)];
                case 3:
                  _b = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable2 = _b[0], error2 = _b[1];
                  newRoutingTable = newRoutingTable2;
                  error = error2 || error;
                  _c.label = 4;
                case 4:
                  return [4, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, error)];
                case 5:
                  return [2, _c.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter = function(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth) {
          return __awaiter(this, void 0, void 0, function() {
            var _a2, newRoutingTable, error;
            var _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  return [4, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth)];
                case 1:
                  _a2 = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable = _a2[0], error = _a2[1];
                  if (!!newRoutingTable) return [3, 3];
                  return [4, this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmarks, impersonatedUser, auth)];
                case 2:
                  _b = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable = _b[0], error = _b[1];
                  _c.label = 3;
                case 3:
                  return [4, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, error)];
                case 4:
                  return [2, _c.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTableUsingKnownRouters = function(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth) {
          return __awaiter(this, void 0, void 0, function() {
            var _a2, newRoutingTable, error, lastRouterIndex;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, auth)];
                case 1:
                  _a2 = __read.apply(void 0, [_b.sent(), 2]), newRoutingTable = _a2[0], error = _a2[1];
                  if (newRoutingTable) {
                    return [2, [newRoutingTable, null]];
                  }
                  lastRouterIndex = knownRouters.length - 1;
                  RoutingConnectionProvider2._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);
                  return [2, [null, error]];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTableUsingSeedRouter = function(seenRouters, seedRouter, routingTable, bookmarks, impersonatedUser, auth) {
          return __awaiter(this, void 0, void 0, function() {
            var resolvedAddresses, newAddresses;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [
                    4,
                    this._resolveSeedRouter(seedRouter)
                    // filter out all addresses that we've already tried
                  ];
                case 1:
                  resolvedAddresses = _a2.sent();
                  newAddresses = resolvedAddresses.filter(function(address) {
                    return seenRouters.indexOf(address) < 0;
                  });
                  return [4, this._fetchRoutingTable(newAddresses, routingTable, bookmarks, impersonatedUser, auth)];
                case 2:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._resolveSeedRouter = function(seedRouter) {
          return __awaiter(this, void 0, void 0, function() {
            var resolvedAddresses, dnsResolvedAddresses;
            var _this = this;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hostNameResolver.resolve(seedRouter)];
                case 1:
                  resolvedAddresses = _a2.sent();
                  return [4, Promise.all(resolvedAddresses.map(function(address) {
                    return _this._dnsResolver.resolve(address);
                  }))];
                case 2:
                  dnsResolvedAddresses = _a2.sent();
                  return [2, [].concat.apply([], dnsResolvedAddresses)];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTable = function(routerAddresses, routingTable, bookmarks, impersonatedUser, auth) {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a2) {
              return [2, routerAddresses.reduce(function(refreshedTablePromise, currentRouter, currentIndex) {
                return __awaiter(_this, void 0, void 0, function() {
                  var _a3, newRoutingTable, previousRouterIndex, _b, session, error, error_3;
                  return __generator(this, function(_c) {
                    switch (_c.label) {
                      case 0:
                        return [4, refreshedTablePromise];
                      case 1:
                        _a3 = __read.apply(void 0, [_c.sent(), 1]), newRoutingTable = _a3[0];
                        if (newRoutingTable) {
                          return [2, [newRoutingTable, null]];
                        } else {
                          previousRouterIndex = currentIndex - 1;
                          RoutingConnectionProvider2._forgetRouter(routingTable, routerAddresses, previousRouterIndex);
                        }
                        return [4, this._createSessionForRediscovery(currentRouter, bookmarks, impersonatedUser, auth)];
                      case 2:
                        _b = __read.apply(void 0, [_c.sent(), 2]), session = _b[0], error = _b[1];
                        if (!session) return [3, 8];
                        _c.label = 3;
                      case 3:
                        _c.trys.push([3, 5, 6, 7]);
                        return [4, this._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter, impersonatedUser)];
                      case 4:
                        return [2, [_c.sent(), null]];
                      case 5:
                        error_3 = _c.sent();
                        return [2, this._handleRediscoveryError(error_3, currentRouter)];
                      case 6:
                        session.close();
                        return [
                          7
                          /*endfinally*/
                        ];
                      case 7:
                        return [3, 9];
                      case 8:
                        return [2, [null, error]];
                      case 9:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, Promise.resolve([null, null]))];
            });
          });
        };
        RoutingConnectionProvider2.prototype._createSessionForRediscovery = function(routerAddress, bookmarks, impersonatedUser, auth) {
          return __awaiter(this, void 0, void 0, function() {
            var connection, databaseSpecificErrorHandler, delegateConnection, connectionProvider, protocolVersion, error_4;
            var _this = this;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 4, , 5]);
                  return [4, this._connectionPool.acquire({ auth }, routerAddress)];
                case 1:
                  connection = _a2.sent();
                  if (!auth) return [3, 3];
                  return [4, this._verifyStickyConnection({
                    auth,
                    connection,
                    address: routerAddress
                  })];
                case 2:
                  _a2.sent();
                  _a2.label = 3;
                case 3:
                  databaseSpecificErrorHandler = connection_1.ConnectionErrorHandler.create({
                    errorCode: SESSION_EXPIRED,
                    handleSecurityError: function(error, address, conn) {
                      return _this._handleSecurityError(error, address, conn);
                    }
                  });
                  delegateConnection = !connection._sticky ? new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler) : new connection_1.DelegateConnection(connection);
                  connectionProvider = new connection_provider_single_1.default(delegateConnection);
                  protocolVersion = connection.protocol().version;
                  if (protocolVersion < 4) {
                    return [2, [new neo4j_driver_core_1.Session({
                      mode: WRITE,
                      bookmarks: Bookmarks.empty(),
                      connectionProvider
                    }), null]];
                  }
                  return [2, [new neo4j_driver_core_1.Session({
                    mode: READ,
                    database: SYSTEM_DB_NAME,
                    bookmarks,
                    connectionProvider,
                    impersonatedUser
                  }), null]];
                case 4:
                  error_4 = _a2.sent();
                  return [2, this._handleRediscoveryError(error_4, routerAddress)];
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._handleRediscoveryError = function(error, routerAddress) {
          if (_isFailFastError(error) || _isFailFastSecurityError(error)) {
            throw error;
          } else if (error.code === PROCEDURE_NOT_FOUND_CODE) {
            throw (0, neo4j_driver_core_1.newError)("Server at ".concat(routerAddress.asHostPort(), " can't perform routing. Make sure you are connecting to a causal cluster"), SERVICE_UNAVAILABLE, error);
          }
          this._log.warn("unable to fetch routing table because of an error ".concat(error));
          return [null, error];
        };
        RoutingConnectionProvider2.prototype._applyRoutingTableIfPossible = function(currentRoutingTable, newRoutingTable, error) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  if (!newRoutingTable) {
                    throw (0, neo4j_driver_core_1.newError)("Could not perform discovery. No routing servers available. Known routing table: ".concat(currentRoutingTable), SERVICE_UNAVAILABLE, error);
                  }
                  if (newRoutingTable.writers.length === 0) {
                    this._useSeedRouter = true;
                  }
                  return [4, this._updateRoutingTable(newRoutingTable)];
                case 1:
                  _a2.sent();
                  return [2, newRoutingTable];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._updateRoutingTable = function(newRoutingTable) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._connectionPool.keepAll(newRoutingTable.allServers())];
                case 1:
                  _a2.sent();
                  this._routingTableRegistry.removeExpired();
                  this._routingTableRegistry.register(newRoutingTable);
                  this._log.info("Updated routing table ".concat(newRoutingTable));
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        RoutingConnectionProvider2._forgetRouter = function(routingTable, routersArray, routerIndex) {
          var address = routersArray[routerIndex];
          if (routingTable && address) {
            routingTable.forgetRouter(address);
          }
        };
        RoutingConnectionProvider2.prototype._channelSsrCallback = function(isEnabled, action) {
          if (action === "OPEN") {
            if (isEnabled === true) {
              this._withSSR = this._withSSR + 1;
            } else {
              this._withoutSSR = this._withoutSSR + 1;
            }
          } else if (action === "CLOSE") {
            if (isEnabled === true) {
              this._withSSR = this._withSSR - 1;
            } else {
              this._withoutSSR = this._withoutSSR - 1;
            }
          } else {
            throw (0, neo4j_driver_core_1.newError)("Channel SSR Callback invoked with action other than 'OPEN' or 'CLOSE'");
          }
        };
        RoutingConnectionProvider2.prototype.SSREnabled = function() {
          return this._withSSR > 0 && this._withoutSSR === 0;
        };
        return RoutingConnectionProvider2;
      }(connection_provider_pooled_1.default)
    );
    exports.default = RoutingConnectionProvider;
    var RoutingTableRegistry = (
      /** @class */
      function() {
        function RoutingTableRegistry2(routingTablePurgeDelay) {
          this._tables = /* @__PURE__ */ new Map();
          this._routingTablePurgeDelay = routingTablePurgeDelay;
        }
        RoutingTableRegistry2.prototype.register = function(table) {
          this._tables.set(table.database, table);
          return this;
        };
        RoutingTableRegistry2.prototype.apply = function(database, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, applyWhenExists = _b.applyWhenExists, _c = _b.applyWhenDontExists, applyWhenDontExists = _c === void 0 ? function() {
          } : _c;
          if (this._tables.has(database)) {
            applyWhenExists(this._tables.get(database));
          } else if (typeof database === "string" || database === null) {
            applyWhenDontExists();
          } else {
            this._forEach(applyWhenExists);
          }
          return this;
        };
        RoutingTableRegistry2.prototype.get = function(database, defaultSupplier) {
          if (this._tables.has(database)) {
            return this._tables.get(database);
          }
          return typeof defaultSupplier === "function" ? defaultSupplier() : defaultSupplier;
        };
        RoutingTableRegistry2.prototype.removeExpired = function() {
          var _this = this;
          return this._removeIf(function(value) {
            return value.isExpiredFor(_this._routingTablePurgeDelay);
          });
        };
        RoutingTableRegistry2.prototype._forEach = function(apply) {
          var e_3, _a2;
          try {
            for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), value = _d[1];
              apply(value);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          return this;
        };
        RoutingTableRegistry2.prototype._remove = function(key) {
          this._tables.delete(key);
          return this;
        };
        RoutingTableRegistry2.prototype._removeIf = function(predicate) {
          var e_4, _a2;
          try {
            for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
              if (predicate(value)) {
                this._remove(key);
              }
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
          return this;
        };
        return RoutingTableRegistry2;
      }()
    );
    function _isFailFastError(error) {
      return [
        DATABASE_NOT_FOUND_CODE,
        INVALID_BOOKMARK_CODE,
        INVALID_BOOKMARK_MIXTURE_CODE,
        INVALID_ARGUMENT_ERROR,
        INVALID_REQUEST_ERROR,
        STATEMENT_TYPE_ERROR,
        NOT_AVAILABLE
      ].includes(error.code);
    }
    function _isFailFastSecurityError(error) {
      return error.code.startsWith("Neo.ClientError.Security.") && ![
        AUTHORIZATION_EXPIRED_CODE
      ].includes(error.code);
    }
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/connection-provider/index.js
var require_connection_provider2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/connection-provider/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RoutingConnectionProvider = exports.DirectConnectionProvider = exports.PooledConnectionProvider = exports.SingleConnectionProvider = void 0;
    var connection_provider_single_1 = require_connection_provider_single();
    Object.defineProperty(exports, "SingleConnectionProvider", { enumerable: true, get: function() {
      return __importDefault(connection_provider_single_1).default;
    } });
    var connection_provider_pooled_1 = require_connection_provider_pooled();
    Object.defineProperty(exports, "PooledConnectionProvider", { enumerable: true, get: function() {
      return __importDefault(connection_provider_pooled_1).default;
    } });
    var connection_provider_direct_1 = require_connection_provider_direct();
    Object.defineProperty(exports, "DirectConnectionProvider", { enumerable: true, get: function() {
      return __importDefault(connection_provider_direct_1).default;
    } });
    var connection_provider_routing_1 = require_connection_provider_routing();
    Object.defineProperty(exports, "RoutingConnectionProvider", { enumerable: true, get: function() {
      return __importDefault(connection_provider_routing_1).default;
    } });
  }
});

// node_modules/neo4j-driver-bolt-connection/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/neo4j-driver-bolt-connection/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.packstream = exports.channel = exports.buf = exports.bolt = exports.loadBalancing = void 0;
    exports.loadBalancing = __importStar(require_load_balancing());
    exports.bolt = __importStar(require_bolt());
    exports.buf = __importStar(require_buf());
    exports.channel = __importStar(require_channel());
    exports.packstream = __importStar(require_packstream());
    __exportStar(require_connection_provider2(), exports);
  }
});

// node_modules/neo4j-driver/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/neo4j-driver/lib/index.js"(exports) {
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnboundRelationship = exports.Relationship = exports.Node = exports.Record = exports.ServerInfo = exports.GqlStatusObject = exports.Notification = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.ResultSummary = exports.RxResult = exports.RxManagedTransaction = exports.RxTransaction = exports.RxSession = exports.EagerResult = exports.Result = exports.ManagedTransaction = exports.Transaction = exports.Session = exports.Driver = exports.temporal = exports.spatial = exports.graph = exports.error = exports.routing = exports.session = exports.types = exports.logging = exports.auth = exports.isRetryableError = exports.Neo4jError = exports.integer = exports.isUnboundRelationship = exports.isRelationship = exports.isPathSegment = exports.isPath = exports.isNode = exports.isDateTime = exports.isLocalDateTime = exports.isDate = exports.isTime = exports.isLocalTime = exports.isDuration = exports.isPoint = exports.isInt = exports.int = exports.hasReachableServer = exports.driver = exports.authTokenManagers = void 0;
    exports.clientCertificateProviders = exports.notificationFilterMinimumSeverityLevel = exports.notificationFilterDisabledClassification = exports.notificationFilterDisabledCategory = exports.notificationSeverityLevel = exports.notificationClassification = exports.notificationCategory = exports.resultTransformers = exports.bookmarkManager = exports.DateTime = exports.LocalDateTime = exports.Date = exports.Time = exports.LocalTime = exports.Duration = exports.Integer = exports.Point = exports.PathSegment = exports.Path = void 0;
    var driver_1 = require_driver2();
    Object.defineProperty(exports, "Driver", { enumerable: true, get: function() {
      return driver_1.Driver;
    } });
    var version_1 = __importDefault(require_version());
    var neo4j_driver_core_1 = require_lib();
    Object.defineProperty(exports, "authTokenManagers", { enumerable: true, get: function() {
      return neo4j_driver_core_1.authTokenManagers;
    } });
    Object.defineProperty(exports, "Neo4jError", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Neo4jError;
    } });
    Object.defineProperty(exports, "isRetryableError", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isRetryableError;
    } });
    Object.defineProperty(exports, "error", { enumerable: true, get: function() {
      return neo4j_driver_core_1.error;
    } });
    Object.defineProperty(exports, "Integer", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Integer;
    } });
    Object.defineProperty(exports, "int", { enumerable: true, get: function() {
      return neo4j_driver_core_1.int;
    } });
    Object.defineProperty(exports, "isInt", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isInt;
    } });
    Object.defineProperty(exports, "isPoint", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isPoint;
    } });
    Object.defineProperty(exports, "Point", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Point;
    } });
    Object.defineProperty(exports, "Date", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Date;
    } });
    Object.defineProperty(exports, "DateTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.DateTime;
    } });
    Object.defineProperty(exports, "Duration", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Duration;
    } });
    Object.defineProperty(exports, "isDate", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isDate;
    } });
    Object.defineProperty(exports, "isDateTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isDateTime;
    } });
    Object.defineProperty(exports, "isDuration", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isDuration;
    } });
    Object.defineProperty(exports, "isLocalDateTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isLocalDateTime;
    } });
    Object.defineProperty(exports, "isLocalTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isLocalTime;
    } });
    Object.defineProperty(exports, "isNode", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isNode;
    } });
    Object.defineProperty(exports, "isPath", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isPath;
    } });
    Object.defineProperty(exports, "isPathSegment", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isPathSegment;
    } });
    Object.defineProperty(exports, "isRelationship", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isRelationship;
    } });
    Object.defineProperty(exports, "isTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isTime;
    } });
    Object.defineProperty(exports, "isUnboundRelationship", { enumerable: true, get: function() {
      return neo4j_driver_core_1.isUnboundRelationship;
    } });
    Object.defineProperty(exports, "LocalDateTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.LocalDateTime;
    } });
    Object.defineProperty(exports, "LocalTime", { enumerable: true, get: function() {
      return neo4j_driver_core_1.LocalTime;
    } });
    Object.defineProperty(exports, "Time", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Time;
    } });
    Object.defineProperty(exports, "Node", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Node;
    } });
    Object.defineProperty(exports, "Path", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Path;
    } });
    Object.defineProperty(exports, "PathSegment", { enumerable: true, get: function() {
      return neo4j_driver_core_1.PathSegment;
    } });
    Object.defineProperty(exports, "Relationship", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Relationship;
    } });
    Object.defineProperty(exports, "UnboundRelationship", { enumerable: true, get: function() {
      return neo4j_driver_core_1.UnboundRelationship;
    } });
    Object.defineProperty(exports, "Record", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Record;
    } });
    Object.defineProperty(exports, "ResultSummary", { enumerable: true, get: function() {
      return neo4j_driver_core_1.ResultSummary;
    } });
    Object.defineProperty(exports, "Plan", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Plan;
    } });
    Object.defineProperty(exports, "ProfiledPlan", { enumerable: true, get: function() {
      return neo4j_driver_core_1.ProfiledPlan;
    } });
    Object.defineProperty(exports, "QueryStatistics", { enumerable: true, get: function() {
      return neo4j_driver_core_1.QueryStatistics;
    } });
    Object.defineProperty(exports, "Notification", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Notification;
    } });
    Object.defineProperty(exports, "GqlStatusObject", { enumerable: true, get: function() {
      return neo4j_driver_core_1.GqlStatusObject;
    } });
    Object.defineProperty(exports, "ServerInfo", { enumerable: true, get: function() {
      return neo4j_driver_core_1.ServerInfo;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Result;
    } });
    Object.defineProperty(exports, "EagerResult", { enumerable: true, get: function() {
      return neo4j_driver_core_1.EagerResult;
    } });
    Object.defineProperty(exports, "auth", { enumerable: true, get: function() {
      return neo4j_driver_core_1.auth;
    } });
    Object.defineProperty(exports, "Session", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Session;
    } });
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return neo4j_driver_core_1.Transaction;
    } });
    Object.defineProperty(exports, "ManagedTransaction", { enumerable: true, get: function() {
      return neo4j_driver_core_1.ManagedTransaction;
    } });
    Object.defineProperty(exports, "bookmarkManager", { enumerable: true, get: function() {
      return neo4j_driver_core_1.bookmarkManager;
    } });
    Object.defineProperty(exports, "routing", { enumerable: true, get: function() {
      return neo4j_driver_core_1.routing;
    } });
    Object.defineProperty(exports, "resultTransformers", { enumerable: true, get: function() {
      return neo4j_driver_core_1.resultTransformers;
    } });
    Object.defineProperty(exports, "notificationCategory", { enumerable: true, get: function() {
      return neo4j_driver_core_1.notificationCategory;
    } });
    Object.defineProperty(exports, "notificationClassification", { enumerable: true, get: function() {
      return neo4j_driver_core_1.notificationClassification;
    } });
    Object.defineProperty(exports, "notificationSeverityLevel", { enumerable: true, get: function() {
      return neo4j_driver_core_1.notificationSeverityLevel;
    } });
    Object.defineProperty(exports, "notificationFilterDisabledCategory", { enumerable: true, get: function() {
      return neo4j_driver_core_1.notificationFilterDisabledCategory;
    } });
    Object.defineProperty(exports, "notificationFilterDisabledClassification", { enumerable: true, get: function() {
      return neo4j_driver_core_1.notificationFilterDisabledClassification;
    } });
    Object.defineProperty(exports, "notificationFilterMinimumSeverityLevel", { enumerable: true, get: function() {
      return neo4j_driver_core_1.notificationFilterMinimumSeverityLevel;
    } });
    Object.defineProperty(exports, "clientCertificateProviders", { enumerable: true, get: function() {
      return neo4j_driver_core_1.clientCertificateProviders;
    } });
    var neo4j_driver_bolt_connection_1 = require_lib2();
    var session_rx_1 = __importDefault(require_session_rx());
    exports.RxSession = session_rx_1.default;
    var transaction_rx_1 = __importDefault(require_transaction_rx());
    exports.RxTransaction = transaction_rx_1.default;
    var transaction_managed_rx_1 = __importDefault(require_transaction_managed_rx());
    exports.RxManagedTransaction = transaction_managed_rx_1.default;
    var result_rx_1 = __importDefault(require_result_rx());
    exports.RxResult = result_rx_1.default;
    var _a = neo4j_driver_core_1.internal.util;
    var ENCRYPTION_ON = _a.ENCRYPTION_ON;
    var assertString = _a.assertString;
    var isEmptyObjectOrNull = _a.isEmptyObjectOrNull;
    var ServerAddress = neo4j_driver_core_1.internal.serverAddress.ServerAddress;
    var urlUtil = neo4j_driver_core_1.internal.urlUtil;
    var USER_AGENT = "neo4j-javascript/" + version_1.default;
    function isAuthTokenManager(value) {
      return typeof value === "object" && value != null && "getToken" in value && "handleSecurityException" in value && typeof value.getToken === "function" && typeof value.handleSecurityException === "function";
    }
    function createAuthManager(authTokenOrManager) {
      if (isAuthTokenManager(authTokenOrManager)) {
        return authTokenOrManager;
      }
      var authToken = authTokenOrManager;
      authToken = authToken || {};
      authToken.scheme = authToken.scheme || "none";
      return (0, neo4j_driver_core_1.staticAuthTokenManager)({ authToken });
    }
    function driver(url, authToken, config) {
      if (config === void 0) {
        config = {};
      }
      assertString(url, "Bolt URL");
      var parsedUrl = urlUtil.parseDatabaseUrl(url);
      var routing = false;
      var encrypted = false;
      var trust;
      switch (parsedUrl.scheme) {
        case "bolt":
          break;
        case "bolt+s":
          encrypted = true;
          trust = "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES";
          break;
        case "bolt+ssc":
          encrypted = true;
          trust = "TRUST_ALL_CERTIFICATES";
          break;
        case "neo4j":
          routing = true;
          break;
        case "neo4j+s":
          encrypted = true;
          trust = "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES";
          routing = true;
          break;
        case "neo4j+ssc":
          encrypted = true;
          trust = "TRUST_ALL_CERTIFICATES";
          routing = true;
          break;
        default:
          throw new Error("Unknown scheme: ".concat(parsedUrl.scheme));
      }
      if (encrypted) {
        if ("encrypted" in config || "trust" in config) {
          throw new Error("Encryption/trust can only be configured either through URL or config, not both");
        }
        config.encrypted = ENCRYPTION_ON;
        config.trust = trust;
        config.clientCertificate = (0, neo4j_driver_core_1.resolveCertificateProvider)(config.clientCertificate);
      }
      var authTokenManager = createAuthManager(authToken);
      config.userAgent = config.userAgent || USER_AGENT;
      config.boltAgent = neo4j_driver_core_1.internal.boltAgent.fromVersion(version_1.default);
      var address = ServerAddress.fromUrl(parsedUrl.hostAndPort);
      var meta = {
        address,
        typename: routing ? "Routing" : "Direct",
        routing
      };
      return new driver_1.Driver(meta, config, createConnectionProviderFunction());
      function createConnectionProviderFunction() {
        if (routing) {
          return function(id, config2, log, hostNameResolver) {
            return new neo4j_driver_bolt_connection_1.RoutingConnectionProvider({
              id,
              config: config2,
              log,
              hostNameResolver,
              authTokenManager,
              address,
              userAgent: config2.userAgent,
              boltAgent: config2.boltAgent,
              routingContext: parsedUrl.query
            });
          };
        } else {
          if (!isEmptyObjectOrNull(parsedUrl.query)) {
            throw new Error("Parameters are not supported with none routed scheme. Given URL: '".concat(url, "'"));
          }
          return function(id, config2, log) {
            return new neo4j_driver_bolt_connection_1.DirectConnectionProvider({
              id,
              config: config2,
              log,
              authTokenManager,
              address,
              userAgent: config2.userAgent,
              boltAgent: config2.boltAgent
            });
          };
        }
      }
    }
    exports.driver = driver;
    function hasReachableServer(url, config) {
      return __awaiter(this, void 0, void 0, function() {
        var nonLoggedDriver;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              nonLoggedDriver = driver(url, { scheme: "none", principal: "", credentials: "" }, config);
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, , 3, 5]);
              return [4, nonLoggedDriver.getNegotiatedProtocolVersion()];
            case 2:
              _a2.sent();
              return [2, true];
            case 3:
              return [4, nonLoggedDriver.close()];
            case 4:
              _a2.sent();
              return [
                7
                /*endfinally*/
              ];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.hasReachableServer = hasReachableServer;
    var logging = {
      console: function(level) {
        return {
          level,
          logger: function(level2, message) {
            return console.log("".concat(global.Date.now(), " ").concat(level2.toUpperCase(), " ").concat(message));
          }
        };
      }
    };
    exports.logging = logging;
    var types = {
      Node: neo4j_driver_core_1.Node,
      Relationship: neo4j_driver_core_1.Relationship,
      UnboundRelationship: neo4j_driver_core_1.UnboundRelationship,
      PathSegment: neo4j_driver_core_1.PathSegment,
      Path: neo4j_driver_core_1.Path,
      Result: neo4j_driver_core_1.Result,
      EagerResult: neo4j_driver_core_1.EagerResult,
      ResultSummary: neo4j_driver_core_1.ResultSummary,
      Record: neo4j_driver_core_1.Record,
      Point: neo4j_driver_core_1.Point,
      Date: neo4j_driver_core_1.Date,
      DateTime: neo4j_driver_core_1.DateTime,
      Duration: neo4j_driver_core_1.Duration,
      LocalDateTime: neo4j_driver_core_1.LocalDateTime,
      LocalTime: neo4j_driver_core_1.LocalTime,
      Time: neo4j_driver_core_1.Time,
      Integer: neo4j_driver_core_1.Integer
    };
    exports.types = types;
    var session = {
      READ: driver_1.READ,
      WRITE: driver_1.WRITE
    };
    exports.session = session;
    var integer = {
      toNumber: neo4j_driver_core_1.toNumber,
      toString: neo4j_driver_core_1.toString,
      inSafeRange: neo4j_driver_core_1.inSafeRange
    };
    exports.integer = integer;
    var spatial = {
      isPoint: neo4j_driver_core_1.isPoint
    };
    exports.spatial = spatial;
    var temporal = {
      isDuration: neo4j_driver_core_1.isDuration,
      isLocalTime: neo4j_driver_core_1.isLocalTime,
      isTime: neo4j_driver_core_1.isTime,
      isDate: neo4j_driver_core_1.isDate,
      isLocalDateTime: neo4j_driver_core_1.isLocalDateTime,
      isDateTime: neo4j_driver_core_1.isDateTime
    };
    exports.temporal = temporal;
    var graph = {
      isNode: neo4j_driver_core_1.isNode,
      isPath: neo4j_driver_core_1.isPath,
      isPathSegment: neo4j_driver_core_1.isPathSegment,
      isRelationship: neo4j_driver_core_1.isRelationship,
      isUnboundRelationship: neo4j_driver_core_1.isUnboundRelationship
    };
    exports.graph = graph;
    var forExport = {
      authTokenManagers: neo4j_driver_core_1.authTokenManagers,
      driver,
      hasReachableServer,
      int: neo4j_driver_core_1.int,
      isInt: neo4j_driver_core_1.isInt,
      isPoint: neo4j_driver_core_1.isPoint,
      isDuration: neo4j_driver_core_1.isDuration,
      isLocalTime: neo4j_driver_core_1.isLocalTime,
      isTime: neo4j_driver_core_1.isTime,
      isDate: neo4j_driver_core_1.isDate,
      isLocalDateTime: neo4j_driver_core_1.isLocalDateTime,
      isDateTime: neo4j_driver_core_1.isDateTime,
      isNode: neo4j_driver_core_1.isNode,
      isPath: neo4j_driver_core_1.isPath,
      isPathSegment: neo4j_driver_core_1.isPathSegment,
      isRelationship: neo4j_driver_core_1.isRelationship,
      isUnboundRelationship: neo4j_driver_core_1.isUnboundRelationship,
      integer,
      Neo4jError: neo4j_driver_core_1.Neo4jError,
      isRetryableError: neo4j_driver_core_1.isRetryableError,
      auth: neo4j_driver_core_1.auth,
      logging,
      types,
      session,
      routing: neo4j_driver_core_1.routing,
      error: neo4j_driver_core_1.error,
      graph,
      spatial,
      temporal,
      Driver: driver_1.Driver,
      Session: neo4j_driver_core_1.Session,
      Transaction: neo4j_driver_core_1.Transaction,
      ManagedTransaction: neo4j_driver_core_1.ManagedTransaction,
      Result: neo4j_driver_core_1.Result,
      EagerResult: neo4j_driver_core_1.EagerResult,
      RxSession: session_rx_1.default,
      RxTransaction: transaction_rx_1.default,
      RxManagedTransaction: transaction_managed_rx_1.default,
      RxResult: result_rx_1.default,
      ResultSummary: neo4j_driver_core_1.ResultSummary,
      Plan: neo4j_driver_core_1.Plan,
      ProfiledPlan: neo4j_driver_core_1.ProfiledPlan,
      QueryStatistics: neo4j_driver_core_1.QueryStatistics,
      Notification: neo4j_driver_core_1.Notification,
      GqlStatusObject: neo4j_driver_core_1.GqlStatusObject,
      ServerInfo: neo4j_driver_core_1.ServerInfo,
      Record: neo4j_driver_core_1.Record,
      Node: neo4j_driver_core_1.Node,
      Relationship: neo4j_driver_core_1.Relationship,
      UnboundRelationship: neo4j_driver_core_1.UnboundRelationship,
      Path: neo4j_driver_core_1.Path,
      PathSegment: neo4j_driver_core_1.PathSegment,
      Point: neo4j_driver_core_1.Point,
      Integer: neo4j_driver_core_1.Integer,
      Duration: neo4j_driver_core_1.Duration,
      LocalTime: neo4j_driver_core_1.LocalTime,
      Time: neo4j_driver_core_1.Time,
      Date: neo4j_driver_core_1.Date,
      LocalDateTime: neo4j_driver_core_1.LocalDateTime,
      DateTime: neo4j_driver_core_1.DateTime,
      bookmarkManager: neo4j_driver_core_1.bookmarkManager,
      resultTransformers: neo4j_driver_core_1.resultTransformers,
      notificationCategory: neo4j_driver_core_1.notificationCategory,
      notificationSeverityLevel: neo4j_driver_core_1.notificationSeverityLevel,
      notificationFilterDisabledCategory: neo4j_driver_core_1.notificationFilterDisabledCategory,
      notificationFilterMinimumSeverityLevel: neo4j_driver_core_1.notificationFilterMinimumSeverityLevel,
      clientCertificateProviders: neo4j_driver_core_1.clientCertificateProviders
    };
    exports.default = forExport;
  }
});
export default require_lib3();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=neo4j-driver.js.map
